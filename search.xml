<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL 入门笔记（十七）创建和操纵表</title>
      <link href="/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E5%92%8C%E6%93%8D%E7%BA%B5%E8%A1%A8/"/>
      <url>/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E5%92%8C%E6%93%8D%E7%BA%B5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>本节将讲述创建、更改和删除表的基础知识</p><h1 id="创建表">创建表</h1><p>创建表的话，最好是通过图形化的管理工具来创建，但也可以手动通过 SQL 语句创建</p><p>本节不会介绍创建表时可以使用的所有选项，只会给出一些基本选项，详细的信息还是去翻对应的 DBMS 文档吧（</p><h2 id="表创建基础">表创建基础</h2><p>利用 <code>CREATE TABLE</code> 创建表，必须给出以下信息：</p><ul><li>新表的名字，在关键字 <code>CREATE TABLE</code> 之后给出</li><li>表列的名字和定义，用逗号分隔</li><li>有点 DBMS 还要求指定表的位置</li></ul><p>下面的 SQL 语句创建了样例中的 Products 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Products</span><br><span class="line">(</span><br><span class="line">    prod_id        <span class="type">CHAR</span>(<span class="number">10</span>)         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    vend_id        <span class="type">CHAR</span>(<span class="number">10</span>)         <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_name      <span class="type">CHAR</span>(<span class="number">254</span>)        <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_price     <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)     <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_desc      <span class="type">VARCHAR</span>(<span class="number">1000</span>)    <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="使用-NULL-值">使用 NULL 值</h2><p>某一列是否能为 NULL 值可以在创建时设置，就如上面的那样</p><p>如果缺省的话，大多数 DBMS 都会设置为 <code>NULL</code> ，而不是 <code>NOT NULL</code>  ，当然也有一些例外，并且有些 DBMS 必须要你指定是 <code>NULL</code> 还是 <code>NOT NULL</code>，所有为了兼容性，建议始终指定这一项</p><h2 id="指定默认值">指定默认值</h2><p>类似地，可以指定默认值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OrderItems</span><br><span class="line">(</span><br><span class="line">    order_num      <span class="type">INTEGER</span>           <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    order_item     <span class="type">INTEGER</span>           <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    prod_id        <span class="type">CHAR</span>(<span class="number">10</span>)          <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    quantity       <span class="type">INTEGER</span>           <span class="keyword">NOT</span> <span class="keyword">NULL</span>     <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">    item_price     <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>默认值经常用于日期或者时间戳列，设定获取当前时间的函数为默认值，这样在插入时就可以自动写入时间了</p><h2 id="从检索的数据创建表">从检索的数据创建表</h2><p>之前讲了可以使用 <code>INSERT SELECT</code> 将检索数据添加到一个已经存在的表，而 <code>CREATE SELECT</code> 能将使用检索数据创建一个新表（有些 DBMS 可以覆盖已存在的表）</p><p>下面的例子说明如何使用 <code>CREATE SELECT</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> CustCopy <span class="keyword">AS</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p>若是使用 SQL Server，可以这么写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> CustCopy <span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p>这条 <code>SELECT</code>  语句创建一个名为 <code>CustCopy</code> 的新表，并把 <code>Customers</code> 表的整个内容复制到新表中。因为这里用的是 <code>SELECT *</code> ，所以每一列都是相同的。如果只想复制部分列，可以给出列名</p><details class="toggle" ><summary class="toggle-button" style="">提示：进行表的复制</summary><div class="toggle-content"><p>在试验新的 SQL 语句之前，可以先复制出来一份出来测试，<code>CREATE SELECT</code> 是很好的工具</p></div></details><h1 id="更新表">更新表</h1><p>更新表定义，可以使用 <code>ALTER TABLE</code> 语句。虽然所有的 DBMS 都支持，但它们所允许更新的内容差别很大，以下是使用 <code>ALTER TABLE</code> 时需要考虑的事情</p><ul><li>在理想情况下，不要在表中包括数据时对其进行更新。应该在表的设计过程中充分考虑未来可能的需求，避免今后对表的结果做出大改动</li><li>所有的 DBMS 都允许给现有的表增加列，不过对所增加列的数据类型，以及 NULL 和 DEFAULT 的使用有所限制</li><li>许多 DBMS 不允许删除或更改表中的列</li><li>多数 DBMS 允许重命名表中的列</li><li>许多 DBMS 限制对已经填有数据的列进行改变，对未填有数据的列几乎没有限制</li></ul><p>可以看出，对已有的表做出更改既复杂又不统一，需要参考具体的 DBMS 文档</p><p>使用 <code>ALTER TABLE</code> 更改表结构，必须给出下面的信息：</p><ul><li>在 <code>ALTER TABLE</code> 之后给出要更改的表名</li><li>列出要做出哪些更改</li></ul><p>因为给已有的表增加列可能是所有 DBMS 都支持的唯一操作，所以举下面这个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">ADD</span> vend_phone <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>而这个例子就并非对所有 DBMS 都有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Vendors</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure><p>如果要更改复杂的表结构，建议使用下面的步骤</p><ul><li>用新的列布局创建一个新表</li><li>使用 <code>INSERT SELECT</code> 把数据搬过去</li><li>检验包含所需数据的新表</li><li>把旧表重命名或者删掉</li><li>用旧表原来的名字重命名新表</li><li>根据需要，重新创建触发器、存储过程、索引和外键</li></ul><details class="toggle" ><summary class="toggle-button" style="">说明：ALTER TABLE 和 SQLite</summary><div class="toggle-content"><p>在 SQLite 中，不允许使用 <code>ALTER TABLE</code> 定义主键和外键，这些必须在最初创建表时指定</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：小心使用 ALTER TABLE</summary><div class="toggle-content"><p>使用 <code>ALTER TABLE</code> 要极为小心，建议先备份，因为数据库表的更改不能撤销</p></div></details><h1 id="删除表">删除表</h1><p>非常简单，使用 <code>DROP TABLE</code> 即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> CustCopy;</span><br></pre></td></tr></table></figure><h1 id="重命名表">重命名表</h1><p>每个 DBMS 对表重命名的支持有所不同，对于这个操作不存在严格的标准。DB2、MySQL、Oracle 和 PostgreSQL 使用 <code>RENAME</code> 语句，SQL Server 使用 <code>sp_rename</code> 存储过程，SQLite 使用 <code>ALTER TABLE</code> 语句，具体的还得看文档</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十六）更新和删除数据</title>
      <link href="/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>本节将记录如何使用 UPDATE 和 DELETE 来进一步操纵表</p><p>鄙人感觉这两个语句是非常简单并且直观的</p><h1 id="更新数据">更新数据</h1><p>使用 <code>UPDATE</code> 非常简单，你只需给出三个信息：</p><ul><li>要更新的表</li><li>列名和它的新值</li><li>确定要更新哪些行的过滤条件</li></ul><p>例如，一位顾客有了新的电子邮件地址，因此记录需要更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers                        # 表名</span><br><span class="line"><span class="keyword">SET</span> cust_email <span class="operator">=</span> <span class="string">&#x27;kim@thetoystore.com&#x27;</span>  # 新的值</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000005</span>;             # 指定对象，不然就是更新整个表了<span class="operator">~</span></span><br></pre></td></tr></table></figure><p>当然，可以一次更新多个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Customers</span><br><span class="line"><span class="keyword">SET</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Sam Roberts&#x27;</span>,</span><br><span class="line">    cust_email <span class="operator">=</span> <span class="string">&#x27;sam@toyland.com&#x27;</span>  </span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000006</span>;</span><br></pre></td></tr></table></figure><p>记住只需要一个 <code>SET</code> ，并且每对数据直接要用逗号分隔</p><details class="toggle" ><summary class="toggle-button" style="">提示：在 UPDATE 语句中使用子查询</summary><div class="toggle-content"><p>在 <code>UPDATE</code> 语句中可以使用子查询，这样可以用 <code>SELECT</code> 的检索结果更新数据</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：FROM 关键字</summary><div class="toggle-content"><p>某些 DBMS 支持在 <code>UPDATE</code> 中使用 <code>FROM</code> 子句，用一个表的数据更新另一个表的行</p></div></details><h1 id="删除数据">删除数据</h1><p>与 <code>UPDATE</code> 类似， <code>DELETE</code> 也非常简单，<s>但是一定不要忘了 <code>WHERE</code> 子句，不然就全删完了</s></p><p>下面的语句从 Customers 表中删除一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000006</span>;</span><br></pre></td></tr></table></figure><p>关于 DELETE 的几个知识点：</p><ul><li><code>DELETE</code> 不需要列名或通配符</li><li><code>DELETE</code> 删除整行而不是删除列</li><li><code>DELETE</code> 删除的是表的内容而不是表，你可以删除表中的所有行，但不能删除表本身</li></ul><details class="toggle" ><summary class="toggle-button" style="">提示：友好的外键</summary><div class="toggle-content"><p>在第 12 节中讲解了联结，简单联结两个表只需要这两个表中的公共字段。也可以让 DBMS 通过使用外键来严格实施关系。存在外键时，DBMS 使用它们实施引用完整性。例如要向 Products 表中插入一个新产品，DBMS 不允许通过未知的供应商 ID 插入它。因为 vend_id 列是作为外键连接到 Vendors 表的。而在删除时也是同理，例如要从 Products 表中删除一个产品，而这个产品用在 OrderItems 的已有订单中，那么 <code>DELETE</code> 语句将抛出错误并终止。这是总要定义外键的一个理由</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：更快地删除</summary><div class="toggle-content"><p>如果需要删除所有的行，可使用 <code>TRUNCATE TABLE</code> ，它更快，因为不记录数据的变动</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十五）插入数据</title>
      <link href="/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/06/24/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>这一节将讲述如何使用 <code>INSERT</code> 插入数据</p><h1 id="数据插入">数据插入</h1><p>顾名思义， <code>INSERT</code> 用来将行插入（或添加）到数据库表，插入有几种方式：</p><ul><li>插入完整的行</li><li>插入行的一部分</li><li>插入某些查询的结果</li></ul><h2 id="插入完整的行">插入完整的行</h2><p>插入完整的行，可以不指定字段名，靠次序来定位，也可以指定字段名，这样可以更安全（也允许乱序）</p><ul><li><p>不指定字段名（不推荐）</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers # 这个 <span class="keyword">INTO</span> 在某些 DBMS 是可以选的，但还是建议加上</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000000006</span>,</span><br><span class="line">      <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">      <span class="keyword">NULL</span>,</span><br><span class="line">      <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure></li><li><p>指定字段名</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country,</span><br><span class="line">                      cust_contact,</span><br><span class="line">                      cust_email)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000000006</span>,</span><br><span class="line">      <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>,</span><br><span class="line">      <span class="keyword">NULL</span>,</span><br><span class="line">      <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><p>（因为主键是不能重复的，所以你不能插入两次）</p></li></ul><h2 id="插入部分行">插入部分行</h2><p>指定列名时，如果表允许的话，可以省略部分列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1000000006</span>,</span><br><span class="line">      <span class="string">&#x27;Toy Land&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;123 Any Street&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;NY&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;11111&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;USA&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果省略，则会被填入默认值或 NULL 值，如果表没有设定默认值又不允许 NULL 值，就会报错</p><h2 id="插入检索出的数据">插入检索出的数据</h2><p>使用 <code>INSERT SELECT</code> ，可以向表中插入检索的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customers(cust_id,</span><br><span class="line">                      cust_name,</span><br><span class="line">                      cust_address,</span><br><span class="line">                      cust_city,</span><br><span class="line">                      cust_state,</span><br><span class="line">                      cust_zip,</span><br><span class="line">                      cust_country)</span><br><span class="line"><span class="keyword">SELECT</span> cust_id, # 其实这里的列名没必要与上面的相同，只是按顺序对号入座而已</span><br><span class="line">       cust_name,</span><br><span class="line">       cust_address,</span><br><span class="line">       cust_city,</span><br><span class="line">       cust_state,</span><br><span class="line">       cust_zip,</span><br><span class="line">       cust_country</span><br><span class="line"><span class="keyword">FROM</span> CustNew # 不存在这张表，只是示例</span><br></pre></td></tr></table></figure><p>一般来说 <code>INSERT</code> 只会插入一行，但是 <code>INSERT SELECT</code> 会把检索的所有结果都插入</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十四）组合查询</title>
      <link href="/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E7%BB%84%E5%90%88%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%E7%BB%84%E5%90%88%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>本节将讲述如何利用 <code>UNION</code> 操作符将多条 <code>SELECT</code> 语句的结果组合成一个结果集</p><h1 id="组合查询">组合查询</h1><p>多数 SQL 查询只包含从一个或多个表中返回数据的单条 <code>SELECT</code> 语句。但是，SQL 也允许执行多个查询（多条 <code>SELECT</code> 语句），并将结果作为一个查询结果返回。这些组合查询通常被称为 <code>并（union）</code> 或 <code>复合查询（compound query）</code></p><p>主要有两种情况需要使用组合查询：</p><ul><li>在一个查询中从不同的表返回数据结构</li><li>对一个表执行多个查询，按一个查询返回数据</li></ul><details class="toggle" ><summary class="toggle-button" style="">说明：组合查询和多个 WHERE 条件</summary><div class="toggle-content"><p>多数情况下，组合相同表的两个查询所完成的工作与具有多个 WHERE 子句条件的一个查询所完成的工作相同。换句话说，任何具有多个 <code>WHERE</code> 子句的 <code>SELECT</code> 语句都可以作为一个组合查询，在下面可以看到这一点</p></div></details><h1 id="创建组合查询">创建组合查询</h1><h2 id="使用-UNION">使用 UNION</h2><p>很简单，只需要在各条 <code>SELECT</code> 之间加上 <code>UNION</code> 就好了</p><p>举个例子，假如需要 Illinois、Indian 和 Michigan 等美国几个州的所有顾客的报表，还想包括不管位于那个州的所有的 Fun4All</p><p>这当然可以使用 <code>WHERE</code> 子句，例如下面这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>) <span class="keyword">OR</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure><p>而如果使用 <code>UNION</code> ，则会是这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232219763.png" alt="image-20220623221928698"></p><p>在这个简单的例子中，使用 <code>UNION</code> 的确比使用 <code>WHERE</code> 更加复杂。但是对于较复杂的过滤条件，或从多个表（而不是一个表）中检索数据的情形，使用 <code>UNION</code> 可能会更简单</p><details class="toggle" ><summary class="toggle-button" style="">提示：UNION 的限制</summary><div class="toggle-content"><p>使用 <code>UNION</code> 组合 <code>SELECT</code> 语句的数目，SQL 没有标准限制，但是 DBMS 可能会有限制</p></div></details><h2 id="UNION-规则">UNION 规则</h2><p>可以看到，<code>UNION</code> 非常容易使用，但在进行组合时需要注意几条规则</p><ul><li><code>UNION</code> 必须由两条或两条以上的 <code>SELECT</code> 语句组成，语句之间使用 <code>UNION</code> 分隔</li><li><code>UNION</code> 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）</li><li>列数据类型必须兼容：类型不必完全相同，但是必须是 DBMS 可以隐式转换的类型</li></ul><details class="toggle" ><summary class="toggle-button" style="">提示：UNION 的列名</summary><div class="toggle-content"><p>如果结合的两个查询使用不同的列名，那会返回什么名字呢？例如第一个语句是 SELECT <code>prod_name</code>，而第二个是 <code>SELECT productname</code></p><p>答案是使用第一个名字，举得这个例子会返回 <code>prod_name</code> ，而不管第二个名字。这意味着你可以对第一个名字使用别名，而自定义返回的列名。同时如果排序的话也只能使用第一个名字</p></div></details><h2 id="包含或取消重复的行">包含或取消重复的行</h2><p>如果你单独执行上面被组合起来的两个查询语句，你会发现第一条会返回 3 行，第二条会返回 2 行，而且这两组结果中有一行是相同的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232220334.png" alt="image-20220623222047270"></p><p>但是将这两个组合在一起，就只会返回 4 行，而不是 5 行，可见 <code>UNION</code> 默认会自动去重</p><p>如果需要改变这一点，可以使用 <code>UNION ALL</code>  ，这样会返回所有的匹配行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232224915.png" alt="image-20220623222419864"></p><p>前面说过， <code>UNION</code> 几乎总是完成与多个 <code>WHERE</code> 条件相同的工作。但是 <code>UNION ALL</code> 作为 <code>UNION</code> 的一种形式，它能完成 <code>WHERE</code> 不能完成的工作</p><h2 id="对组合查询结果排序">对组合查询结果排序</h2><p><code>SELECT</code> 语句使用 <code>ORDER BY</code> 子句排序，在用 <code>UNION</code> 组合查询时，只能用一条 <code>ORDER</code> BY 子句，它必须在最后一条 <code>SELET</code> 语句之后。对于结果集，不能使用一种方式排序一部分，而又用另一种方式排序另一部分，因此不允许使用多条 <code>ORDER BY</code> 子句</p><p>下面的例子对前面 UNION 返回的结果进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_state <span class="keyword">IN</span> (<span class="string">&#x27;IL&#x27;</span>,<span class="string">&#x27;IN&#x27;</span>,<span class="string">&#x27;MI&#x27;</span>)</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact, cust_email</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> <span class="string">&#x27;Fun4All&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name, cust_contact;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232240586.png" alt="image-20220623224041528"></p><p>虽然 <code>ORDER BY</code> 子句看上去只是最后一条 <code>SELECT</code> 的一部分，但实际上它对整个结果集进行排序</p><details class="toggle" ><summary class="toggle-button" style="">说明：其他类型的 UNION</summary><div class="toggle-content"><p>某些 DBMS 还支持另外两种 <code>UNION</code> ：</p><ul><li><code>EXCEPT</code>（有时称为 <code>MINUS</code> ），检索只在第一个表中存在而第二个表中不存在的行</li><li><code>INTERSECT</code> ，检索两个表中都存在的行</li></ul><p>实际上，这些 <code>UNION</code> 很少使用，因为相同的结果可以通过联结得到</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：操作多个表</summary><div class="toggle-content"><p>本节的例子都是使用 <code>UNION</code> 来组合查询一个表，但是 <code>UNION</code> 在需要组合多个表的数据时也很有用，即使是有不匹配的列名的表</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十三）创建高级联结</title>
      <link href="/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%88%9B%E5%BB%BA%E9%AB%98%E7%BA%A7%E8%81%94%E7%BB%93/"/>
      <url>/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%E5%88%9B%E5%BB%BA%E9%AB%98%E7%BA%A7%E8%81%94%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="使用表别名">使用表别名</h1><p>第 7 节介绍了如何使用别名引用被检索的表列，给列起别名的语法如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p>SQL 除了可以对列名和计算字段使用别名，还允许<mark class="hl-label green">给表名起别名</mark> ，这样做有两个理由</p><ul><li>缩短 SQL 语句</li><li>允许在一条 <code>SELECT</code> 语句中多次使用相同的表</li></ul><p>多次使用相同的表？是不是听上去很奇怪？别急，后面会有例子，但是先来尝试一下给表取别名</p><p>从上一篇的代码为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>下面给表名取别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI # 取别名</span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>运行结果和上面是一样的，在这个例子中，别名只用于 <code>WHERE</code> 子句，但其实还可以用在 <code>SELECT</code> 、<code>ORDER BY</code> 以及其他部分。并且表别名只在查询执行中使用，与列别名不同，表别名不返回到客户端</p><details class="toggle" ><summary class="toggle-button" style="">注意：Oracle 中没有 AS</summary><div class="toggle-content"><p>在 Oracle 中使用别名，不需要 <code>AS</code> ，简单地指定列名即可（因此，应该是 <code>Customers C</code>，而不是 <code>Customers AS C</code></p></div></details><hr><h1 id="使用不同类型的联结">使用不同类型的联结</h1><h2 id="自联结">自联结</h2><p>如前所述，使用表别名的一个主要原因是能在一条 <code>SELECT</code> 语句中不止一次引用相同的表，下面是一个例子</p><p>假如要给与 Jim Jones 同一公司的所有顾客发送一封信件。这个查询需要首先找出 Jim Jones 工作的公司，然后找出在公司工作的顾客，下面是一种解决方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cust_id, cust_name, cust_contact # 鄙人按：cust_name 是公司名，cust_contact 应该是联系人名</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_name <span class="operator">=</span> (<span class="keyword">SELECT</span> cust_name</span><br><span class="line">                   <span class="keyword">FROM</span> Customers</span><br><span class="line">                   <span class="keyword">WHERE</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>);</span><br></pre></td></tr></table></figure><p>现在来看看使用自联结的写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c1.cust_id, c1.cust_name, c1.cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> c1, Customers <span class="keyword">AS</span> c2</span><br><span class="line"><span class="keyword">WHERE</span> c1.cust_name <span class="operator">=</span> c2.cust_name</span><br><span class="line">  <span class="keyword">AND</span> c2.cust_contact <span class="operator">=</span> <span class="string">&#x27;Jim Jones&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206231614688.png" alt="image-20220623161409611"></p><p>在此查询中需要的两个表实际上是相同的表，但是是有必要使用别名的，写的时候可以认为是复制出来了两张名字不同的表</p><h2 id="自然联结">自然联结</h2><p>这部分我看得有点迷，书上讲的跟网上讲的也不一样，而且我感觉这东西没什么用（</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.<span class="operator">*</span>, O.order_num, O.order_date,</span><br><span class="line">       OI.prod_id, OI.quantity, OI.item_price</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">AS</span> C, Orders <span class="keyword">AS</span> O, OrderItems <span class="keyword">AS</span> OI</span><br><span class="line"><span class="keyword">WHERE</span> C.cust_id <span class="operator">=</span> O.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OI.order_num <span class="operator">=</span> O.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="外联结">外联结</h2><p>许多联结将表中的行与另一个表中的行相关联，但有时需要包含没有关联的那些行。例如，可能需要使用联结完成以下工作：</p><ul><li>对每个顾客下的订单进行计数，包括那些至今尚未下单的顾客</li><li>列出所有产品以及订购数量，包括没有人订购的产品</li><li>计算平均销售规模，包括那些至今尚未下订单的顾客</li></ul><details class="toggle" ><summary class="toggle-button" style="">注意：语法差别</summary><div class="toggle-content"><p>创建外联结的语法在不同的 SQL 实现中可能稍有不同，下面的语法形式覆盖了大多数实现</p></div></details><p>先从一个内联结开始，它检索所有顾客及其订单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br></pre></td></tr></table></figure><p>外联结语法类似，要检索包括没有订单顾客在内的所有顾客，可如下进行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232021217.png" alt="image-20220623202109152"></p><p>类似于内联结，外联结使用 <code>OUTER JOIN</code> 来指定联结类型。与内连接关联两个表中的行不同的是，外联结还包含没有关联行的行。在使用  <code>OUTER JOIN</code> 时，必须使用 <code>RIGHT</code> 或者 <code>LEFT</code> 关键字指定那个表应该包含所有行。像这里，想要列出所有的顾客情况，而顾客表在左边，所有使用 <code>LEFT</code> ，又称为左联结，相对地，也有右联结</p><details class="toggle" ><summary class="toggle-button" style="">注意：SQLite 外联结</summary><div class="toggle-content"><p>SQLite 支持 <code>LEFT OUTER JOIN</code> ，但是不支持 <code>LEFT OUTER JOIN</code> ，但这两个联结的不同也就只是顺序的区别，调换一下表的顺序即可</p></div></details><h1 id="使用带聚集函数的联结">使用带聚集函数的联结</h1><p>聚集函数用来汇总数据，但至今为止的例子都只是从一个表中汇总数据，其实聚集函数可以与联结一起使用</p><p>来看个例子，要检索所有顾客及每个顾客所下的订单数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, <span class="built_in">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_order</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232055503.png" alt="image-20220623205546448"></p><p>聚集函数还可以与其他联结一起使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, <span class="built_in">COUNT</span>(Orders.order_num) <span class="keyword">AS</span> num_ord</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Customers.cust_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206232100689.png" alt="image-20220623210031626"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十二）联结表</title>
      <link href="/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E8%81%94%E7%BB%93%E8%A1%A8/"/>
      <url>/2022/06/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%E8%81%94%E7%BB%93%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="联结">联结</h1><p>SQL 最强大的功能之一就是能在数据查询的执行中 <code>联结 (join)</code> 表。联结是利用SQL的 <code>SELECT</code> 能执行的最重要的操作，很好地理联结以及其法是学习 SOL 的极为重要的部分</p><p>在能够有效地使用联结前，必须了解关系表以及关系数据库设计的基础知识。下面的介绍并不能涵盖这一主题的所有内容，但作为入门经够了</p><h2 id="关系表">关系表</h2><p>理解关系表，最好是来看个例子。有一个包含产品目录的数据库表，其中每类物品占一行。对于每一种物品，要存储的信息包括产品描述、价格，以及供应商</p><p>现在有同一供应商生产的多种物品，那么在何处存储供应商名、地址、联系方式呢？将这些数据与产品信息分开存储的理由是：</p><ul><li>同一供应商生产的每个商品，其供应商数据都是相同的，对每个产品重复此信息既浪费时间又浪费存储空间</li><li>如果供应商信息发生变化，例如供应商迁址或电话号码变动，只需修改一次即可</li><li>如果有重复数据（即每种产品都存储供应商信息），则很难保证每次输入该数据的方式都相同，不一致的数据在报表中就很难利用</li></ul><p>关健是，相同的数据出现多次决不是一件好事，这是关系数据库设计的基础。关系表的设计就是要把信息分解成多个表，一类数据一个表。各表通过某些共同的值互相关联（所以才叫关系数据库）</p><p>在这个例子中可建立两个表：一个存储供应商信息，另一个存储产品信息。<code>Vendors</code> 表包含所有供应商信息，每个供应商占一行，具有唯一的标识。此标识称为 <code>主键（primary key)</code> ，可以是供应商 ID 或任何其他唯一值</p><p><code>Products</code> 表只存储产品信息，除了存储供应商 ID（Vendors 表的主键）外，它不存储其他有关供应商的信息。Vendors 表的主键将 Vendors 表与 Products 表关联，利用供应商 ID 能从 Vendors 表中找出相应供应商的详细信息。<br>这样做的好处是：</p><ul><li>供应商信息不重复，不会浪费时间和空间</li><li>如果供应商信息变动，可以只更新 Vendors 表中的单个记录，相关表中的数据不用改动</li><li>由于数据不重复，数据显然是一致的，使得处理数据和生成报报表更简单</li></ul><h2 id="为什么使用联结">为什么使用联结</h2><p>如前所述，将数据分解为多个表能更有效地存储，更方便地处理，并且可伸缩性更好，但这些好处是有代价的</p><p>如果数据存储在多个表中，怎样用一条 <code>SELECT</code> 语句就检索出数据呢？</p><p>答案是使用联结。<mark class="hl-label green">简单说，联结是一种机制，用来在一条语句中关系表，因此称为联结</mark> 。使用特珠的语法，可以联结多个表返一组输出，联结在运行时关联表中正确的行</p><details class="toggle" ><summary class="toggle-button" style="">说明：使用交互式 DBMS 工具</summary><div class="toggle-content"><p>重要的是，要理解联结不是物理实体。换句话说，它在实际的数据库表中并不存在。DBMS 会根据需要建立联结，它在查询执行期间一直存在。许多 DBMS 提供图形界面，用来交互式地定义表关系。这些工具族来有助于维护引用完整性。在使用关系表时，仅在关系列中插入合法数据是非常重要的。回到这里的例子，如果 Products 表中存储了无效的供应商 ID，则相应的产品不可访问，因为它们没有关联到某个供应商。为避免这种情况发生，可指示数据库只允许在 Products 表的供应商 ID列中出现合法值（即出现在 Vendors 表中的供应商)。引用完整性表示 DBMS 强制实施数据完整性规则，这些规则一般由提供了完整界面的 DBMS 管理</p></div></details><h1 id="创建联结">创建联结</h1><p>创建联结非常简单，<mark class="hl-label green">指定要联结的所有表以及它们的方式即可</mark> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products</span><br><span class="line"><span class="keyword">WHERE</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206230905097.png" alt="image-20220623090516030"></p><p>可以看到，<code>SELECT</code> 语句与之前的都不同，它指定的 3 列并不在同一个表中，因此在 <code>FROM</code> 子句中有两个表，并且这两个表用 <code>WHERE</code> 子句联结在一起</p><p><code>WHERE</code> 子句指示 DBMS 将 <code>Vendors</code> 表中的 vend_id 与 <code>Products</code> 表中的 vend_id 匹配起来</p><details class="toggle" ><summary class="toggle-button" style="">警告：完全限定列名</summary><div class="toggle-content"><p>在引用的列可能出现歧义时（例如这个例子），必须使用完全限定列名，不然大多数 DBMS 会返回错误</p></div></details><h2 id="WHERE-子句的重要性">WHERE 子句的重要性</h2><p>使用 <code>WHERE</code> 子句建立联结可能有些奇怪，但是实际上有个很充分的理由：<code>WHERE</code> 子句是用来过滤的</p><p>可以试一下没有这一子句的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors, Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206230920290.png" alt="image-20220623092007222"></p><p>答案是，直接返回了两表的笛卡尔积，将第一个表的每一行都与第二个表的每一行匹配，这也被称为<code>叉联积（cross join） </code>，但在这里明显不是我们想要的</p><p>而 <code>WHERE Vendors.vend_id = Products.vend_id</code> 就是用来过滤出那些恰当的行</p><h2 id="内联积">内联积</h2><p>到目前为止使用的联结称为<code>等值联结（equijoin）</code> ，它基于两个表之间的相等测试，这种联结也被称为<code>内联结（inner join）</code></p><p>其实，可以对这种联结使用稍微不同的语法，明确指定联结的类型，下面的 SELECT 语句返回与前面例子完全相同的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Products <span class="keyword">ON</span> Vendors.vend_id <span class="operator">=</span> Products.vend_id;</span><br></pre></td></tr></table></figure><p>此语句中的 <code>SELECT</code> 与的面的 <code>SELECT</code> 语句相同，但 <code>FROM</code> 子句不同。这里，两个表之间的关系是以 <code>INNER JOIN</code> 指定的部分 <code>FROM</code> 子句。在做用这种语法时，联结系件用特定的 <code>ON</code> 子句而不是 <code>WHERE</code> 子句给出。至于选用哪种语法，请参阅具体的 DBMS 文档。</p><details class="toggle" ><summary class="toggle-button" style="">说明：“正确的”语法</summary><div class="toggle-content"><p>ANST SOL 规范首选 <code>INNER JOIN</code> 语法，之前使用的是简单的等值语法。其实，SOL语言纯正论者是用鄙视的眼光看待简单语法的。这就是说，DBMS 的确支持简单格式和标准格式，我建议你理解这两种<br>格式，具体使用就看你用哪个更顺手了。</p></div></details><h2 id="联结多个表">联结多个表</h2><p>SQL 不限制一条 SELECT 语句中可以联结的表的数目，创建联结的基本规则也相同：首先列出所有表，然后定义表之间的关系</p><p>来回顾上一节的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> Orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> OrderItems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br></pre></td></tr></table></figure><p>正如上一节所述，子查询并不是执行复杂 SELECT 操作的最有效方法，下面是使用联结的相同查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers, Orders, OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id</span><br><span class="line">  <span class="keyword">AND</span> OrderItems.order_num <span class="operator">=</span> Orders.order_num</span><br><span class="line">  <span class="keyword">AND</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">注意：性能考虑</summary><div class="toggle-content"><p>不要联结不必要的表，联结的表越多，性能下降越厉害</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：联结中表的最大数目</summary><div class="toggle-content"><p>虽然 SQL 本身不限制每个联结的约束中表的最大数目，但实际上许多 DBMS 都有限制，请参阅具体的 DBMS 文档以了解其限制</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：多做实验</summary><div class="toggle-content"><p>可以看到，执行任一给定的 SQL 操作一般不止一种方法。很少有绝对正确或绝对错误的方法。性能可能会受到操作类型、所使用的 DBMS 、表中数据量、是否存在索引或键等条件的影响。因此，有必要试验不同的选择机制，找出最合适具体情况的方法</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：联结的列名</summary><div class="toggle-content"><p>在上述所有的例子中，联结的几个列的名字都是一样的，但这实际上不是必须的</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十一）使用子查询</title>
      <link href="/2022/06/22/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/06/22/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="子查询">子查询</h1><p><code>SELECT</code> 语句是 SQL 的查询，我们迄今为止所看到的所有 <code>SELECT</code> 语句都是简单查询，即从单个数据库表中检索的简单语句</p><p>SQL 还允许创建 <code>子查询（subquery）</code> ，即嵌套在其他查询中的查询（将一个查询的结果作为另一个查询的一部分），理解子查询的最好方法自然是看几个例子</p><h1 id="利用子查询进行过滤">利用子查询进行过滤</h1><p>我们样例的数据表都是关系表，例如订单存储在两个表中每个订单包含订单编号、客户 ID、订单日期，在 <code>orders</code> 表中存储为一行。各订单的物品存储在相关的 <code>Order Items</code> 表中。<code>Orders</code> 表不存储顾客信息，只存储顾客 ID，顾客的实际信息存储在 <code>Customers</code> 表中</p><p>现在，假如你需要列出订购物品 RGAN01 的所有顾客，应该怎样检索？</p><ol><li><p>在 <code>Order Items</code> 表中检索包含 RGAN01 的所有订单编号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222159977.png" alt="image-20220622215935874"></p></li><li><p>依靠订单编号查找所以的顾客 ID</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222200486.png" alt="image-20220622220048420"></p></li><li><p>去 <code>Customers</code> 表中依靠顾客 ID 返回顾客信息</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222201098.png" alt="image-20220622220121046"></p></li></ol><p>上述每个步骤都可以单独作为一个查询来执行，把一条语句的结果用于另一条语句的 WHERE 子句</p><p>也可以使用子查询来把 3 个查询组合成一条语句</p><hr><p>现在分别使用两种方法来感受一下</p><p>先去 <code>Order Items</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在得到 20007 和 20008 这两个编号之后，再去查 <code>Orders</code> 表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="number">20007</span>,<span class="number">20008</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222245854.png" alt="image-20220622224519778"></p><p>现在，试图结合这两个查询，把第一个查询变为子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                    <span class="keyword">FROM</span> OrderItems</span><br><span class="line">                    <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222248025.png" alt="image-20220622224824961"></p><p>成功运行，现在尝试加上最后一层，先尝试硬编码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="number">1000000004</span>,<span class="number">1000000005</span>);</span><br></pre></td></tr></table></figure><p>再尝试结合子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> cust_id</span><br><span class="line">                  <span class="keyword">FROM</span> Orders</span><br><span class="line">                  <span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="keyword">SELECT</span> order_num</span><br><span class="line">                                      <span class="keyword">FROM</span> OrderItems</span><br><span class="line">                                      <span class="keyword">WHERE</span> prod_id <span class="operator">=</span> <span class="string">&#x27;RGAN01&#x27;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222253052.png" alt="image-20220622225331981"></p><p>如你所见，子查询的嵌套数目没有限制，但是实际使用时由于性能的原因，不能嵌套太多的子查询</p><details class="toggle" ><summary class="toggle-button" style="">注意：只能是单列</summary><div class="toggle-content"><p>作为子查询的 SELECT 语句只能查询单个列，企图检索多个列将返回错误</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：子查询和性能</summary><div class="toggle-content"><p>对于这个例子，子查询并不是最佳的方法，更好的方法将在下一篇讲到</p></div></details><h1 id="作为计算字段使用子查询">作为计算字段使用子查询</h1><p>使用子查询的另一方法是创建计算字段，例如需要显示 <code>Customers</code> 表中每个顾客的订单总数</p><p>对于这个例子，一共有两步：</p><ol><li><p>从 <code>Customers</code> 表中获得每个用户的 ID</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222322603.png" alt="image-20220622232244539"></p></li><li><p>去 <code>Orders</code> 表中统计数目</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222323794.png" alt="image-20220622232305732"></p></li></ol><p>先编写内层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> cust_id <span class="operator">=</span> <span class="number">1000000001</span>;</span><br></pre></td></tr></table></figure><p>然后把它作为子查询，同时 WHERE 子句需要进行联结操作（这将是下一篇的重点内容）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name,</span><br><span class="line">       cust_state,</span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders</span><br><span class="line">        <span class="keyword">FROM</span> Orders</span><br><span class="line">        <span class="keyword">WHERE</span> Orders.cust_id <span class="operator">=</span> Customers.cust_id ) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222318482.png" alt="image-20220622231827397"></p><details class="toggle" ><summary class="toggle-button" style="">提示：不止一种解决方法</summary><div class="toggle-content"><p>同样，这个例子中使用子查询也不是最优方案，更好的方案在后面会讲到</p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理1』期末复习</title>
      <link href="/2022/06/22/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/06/22/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>电通量：场强乘以面积</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206212142516.png" alt="image-20220621214211394"></p><p>安培环路定理：</p><p>空间中有一些电流，它们激发出磁场。对于任意回路，它的环流等于内部净电流乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\mu _{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>静电场的高斯定理：</p><p>任意闭合面的电通量等于内部净电荷乘以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><msub><mi>ε</mi><mn>0</mn></msub></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{1}{\varepsilon _{0}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206211430250.png" alt="image-20220621143046181"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』允许使用 SSH 远程连接 root 用户</title>
      <link href="/2022/06/18/%E3%80%8ELinux%E3%80%8F%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8-SSH-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-root-%E7%94%A8%E6%88%B7/"/>
      <url>/2022/06/18/%E3%80%8ELinux%E3%80%8F%E5%85%81%E8%AE%B8%E4%BD%BF%E7%94%A8-SSH-%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-root-%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<p>编辑 <code>/etc/ssh/sshd_config</code> 即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>在 <code>#PermitRootLogin prohibit-password</code> 下方加上这一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206182016925.png" alt="image-20220618201626869"></p><p>保存，然后重启即可</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P4：幂级数</title>
      <link href="/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP4%EF%BC%9A%E5%B9%82%E7%BA%A7%E6%95%B0/"/>
      <url>/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP4%EF%BC%9A%E5%B9%82%E7%BA%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181922687.png" alt="image-20220618192237468"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181930776.png" alt="image-20220618193043647"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181932900.png" alt="image-20220618193200802"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181932423.png" alt="image-20220618193219316"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181934291.png" alt="image-20220618193427111"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181938967.png" alt="image-20220618193854702"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181946930.png" alt="image-20220618194655563"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181951108.png" alt="image-20220618195136981"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181954362.png" alt="image-20220618195429210"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181955083.png" alt="image-20220618195542983"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206182006774.png" alt="image-20220618200657534"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P3：常数项级数</title>
      <link href="/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP3%EF%BC%9A%E5%B8%B8%E6%95%B0%E9%A1%B9%E7%BA%A7%E6%95%B0/"/>
      <url>/2022/06/18/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP3%EF%BC%9A%E5%B8%B8%E6%95%B0%E9%A1%B9%E7%BA%A7%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181603099.png" alt="image-20220618160339849"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181605541.png" alt="image-20220618160514455"><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181605323.png" alt="image-20220618160528206"><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181606115.png" alt="image-20220618160628982"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181607785.png" alt="image-20220618160706669"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181608379.png" alt="image-20220618160836097"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181611130.png" alt="image-20220618161118835"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181612807.png" alt="image-20220618161243754"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181613857.png" alt="image-20220618161303743"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181614388.png" alt="image-20220618161430235"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181625625.png" alt="image-20220618162541556"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181626794.png" alt="image-20220618162603551"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181631930.png" alt="image-20220618163126835"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181630415.png" alt="image-20220618163038243"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181634347.png" alt="image-20220618163455138"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181635752.png" alt="image-20220618163522669"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181636761.png" alt="image-20220618163641631"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181637025.png" alt="image-20220618163758754"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P2：多元函数求导</title>
      <link href="/2022/06/17/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP2%EF%BC%9A%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/"/>
      <url>/2022/06/17/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP2%EF%BC%9A%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="复合函数链式求导">复合函数链式求导</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172128316.png" alt="image-20220617212847098"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172130410.png" alt="image-20220617213020341"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172132659.png" alt="image-20220617213225538"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172137437.png" alt="image-20220617213710214"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172150711.png" alt="image-20220617215016468"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172204041.png" alt="image-20220617220432975"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172205372.png" alt="image-20220617220532141"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172210302.png" alt="image-20220617221034108"></p><p>（最后不要忘合并）</p><h1 id="隐函数求导">隐函数求导</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172225865.png" alt="image-20220617222531624"></p><p>（例1略）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172229170.png" alt="image-20220617222954960"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172233808.png" alt="image-20220617223348555"></p><p>（雅各比行列式）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172237398.png" alt="image-20220617223704288"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172238177.png" alt="image-20220617223851013"></p><h1 id="练习题">练习题</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181011595.png" alt="image-20220618101106457"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181013084.png" alt="image-20220618101322992"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181017110.png" alt="image-20220618101710931"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206181025842.png" alt="image-20220618102558553"></p><p>我圈出来的地方应该是写错了的，应该是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>z</mi><mn>2</mn></msup><mo>−</mo><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">z^{2}-xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『高等数学』P1：空间几何、多元函数极限、偏导</title>
      <link href="/2022/06/16/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP1%EF%BC%9A%E7%A9%BA%E9%97%B4%E5%87%A0%E4%BD%95%E3%80%81%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E3%80%81%E5%81%8F%E5%AF%BC/"/>
      <url>/2022/06/16/%E3%80%8E%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E3%80%8FP1%EF%BC%9A%E7%A9%BA%E9%97%B4%E5%87%A0%E4%BD%95%E3%80%81%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E3%80%81%E5%81%8F%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="平面与空间直线">平面与空间直线</h1><h2 id="平面">平面</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161557206.png" alt="image-20220616155711049"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161558630.png" alt="image-20220616155803544"></p><h2 id="直线">直线</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161559836.png" alt="image-20220616155933728"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161601775.png" alt="image-20220616160100713"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161603113.png" alt="image-20220616160259870"></p><p>表示直线的时候 0 是可以在分母上的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161606515.png" alt="image-20220616160618391"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161607942.png" alt="image-20220616160702824"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161608858.png" alt="image-20220616160826608"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161611564.png" alt="image-20220616161115439"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161616560.png" alt="image-20220616161649451"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161617074.png" alt="image-20220616161732013"></p><h1 id="二元函数的极限">二元函数的极限</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161620080.png" alt="image-20220616162024018"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161625968.png" alt="image-20220616162554815"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161626650.png" alt="image-20220616162623560"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161627318.png" alt="image-20220616162753247"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161628112.png" alt="image-20220616162810056"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172243659.png" alt="image-20220617224314516"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161628002.png" alt="image-20220616162845904"></p><h1 id="偏导数">偏导数</h1><p>（略）</p><h1 id="全微分">全微分</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161641187.png" alt="image-20220616164125070"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161647478.png" alt="image-20220616164724416"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161642160.png" alt="image-20220616164224065"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161643616.png" alt="image-20220616164328506"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161644064.png" alt="image-20220616164425977"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161646470.png" alt="image-20220616164626376"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161646541.png" alt="image-20220616164650496"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161648220.png" alt="image-20220616164807119"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206161649231.png" alt="image-20220616164923091"></p><h1 id="练习题-2">练习题</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172118208.png" alt="image-20220617211831146"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172119289.png" alt="image-20220617211909119"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172119738.png" alt="image-20220617211956663"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206172122028.png" alt="image-20220617212258930"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『随笔』618桌面改造计划</title>
      <link href="/2022/06/14/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F618%E6%A1%8C%E9%9D%A2%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2022/06/14/%E3%80%8E%E9%9A%8F%E7%AC%94%E3%80%8F618%E6%A1%8C%E9%9D%A2%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="前情提要">前情提要</h1><p>鄙人自开学以来桌面一直是没有放显示器的，毕竟从小到大一直用小屏的笔记本电脑打游戏，上了大学也没有什么感觉。我高考后买的一台屏幕 13 寸的 ROG 幻13，可以 360° 旋转，还支持触控，加上一支微软的 Surface Pen，上课记笔记就变得十分方便，也就一直用到了现在，直到——</p><p>直到我参加了字节跳动的青训营（笑）</p><p>青训营最后有一个小组项目，然后我发现一个小屏就不够我看的了，因为要一边写代码，一边看文档，一边还要关注群里面的最新消息，这是我第一次这么急切地想要一个大屏幕，最好能来个双屏</p><p>并且，我平时桌面是很乱的，一堆乱七八糟的东西，还有一堆充电线，真的看着都影响工作效率，必须要有行之有效的解决方法</p><p>最后就是看书的问题，如果我想看书的话，必须把电脑往里面推，屏幕就隔得很远，不容易看清。而且如果以后要放一个大屏的话，支架肯定会占据很大一块桌面空间，纸质资料很多的话可能顶着支架，很烦（杭电的桌子不大，经我测量约为 100*50*40，长宽高）</p><p>所以，这次改造一共要解决三个痛点：</p><ul><li>屏幕不够大</li><li>桌面太乱</li><li>看书体验不够舒适</li></ul><p>那么，我最后有没有解决这些问题呢？</p><hr><h1 id="成品演示">成品演示</h1><blockquote><p>这应该是我目前能想到的最优解了，那个键盘其实还可以往里推，还是有点深度的</p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206141922073.jpg" alt="67a9e11604d71d8c45b4f7aa91502d9"></p><p>其实后面也是有一堆乱七八糟的线的，只是屏幕挡住了，眼不见心不烦</p><p>可以迁一个 USB Hub 出来放桌面上，但其实平时没有很多拔插的需求</p><hr><h1 id="分步讲解">分步讲解</h1><h2 id="买台子">买台子</h2><p>首先，综合各方面考虑，我必须为我的屏幕买一个台子</p><p>这样就不会因为它的支架而困扰，台子下面可以放很多东西</p><p>而且不能太高，杭电的桌面高度很低，上面有个大书架</p><p>经过我的一番寻找，下单了一件 8mm 高的显示器增高台</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142011931.png" alt="image-20220614201141806"></p><hr><h2 id="买屏幕">买屏幕</h2><p>屏幕自然是要买的，在估算高度后，我发现显示器的合理大小是 24 寸，小屏幕不够大，大屏幕放不下</p><p>之后在 B 站逛了一圈后，我选择了创维的F24G3。第一，它价格相对亲民，第二，虽然只有1080p，但它的刷新率够高，打战雷的时候不会卡就行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142005667.png" alt="+"></p><p>（现在看的时候发现比我买的便宜了30块，简直血亏）</p><hr><h2 id="重新买台子-买屏幕支架">重新买台子+买屏幕支架</h2><p>因为是京东自营的，快递极快无比，显示器早上下单下午就到，晚上我拿了快递准备装的时候，却发现了一个严重的问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142022915.png" alt="img"></p><p>无奈，只能重新开始思考，下一步需要怎么办</p><p>舍友建议我退货，但是我肯定是要想想能不能变通一下的</p><p>最终，我选择了买一个可调节高度的支架，加一个更矮的台子（5 mm）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142031001.png" alt="image-20220614203133839"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142032938.png" alt="image-20220614203202795"></p><p>这一次，在我精密的细算下，应该是不会再出什么幺蛾子了</p><p>而之前的那个台子呢？我选择把它放在上面的书柜，这样桌面上的乱七八糟的东西都可以放在上面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142040988.png" alt="img"></p><hr><h2 id="买屏幕挂灯">买屏幕挂灯</h2><p>下一步，为了替代之前的台灯，屏幕挂灯是肯定需要的</p><p>了解了一下主流品牌的价格，明基的 1k+，直接贵死，唯一的选择就是小米（现在的价格比我买的时候贵了20块）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142044316.png" alt="image-20220614204424174"></p><p>本来想拍个视频演示一下的，无奈手机镜头太差劲，拍不好，结论就是非常好用就是了，十分推荐</p><hr><h2 id="买键盘">买键盘</h2><p>键盘根据初中同学的推荐自己组装了一个机械的，为了舍友着想入了静音轴</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142104486.png" alt="image-20220614210450344"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142105628.png" alt="image-20220614210557487"></p><p>在同学的帮助下手忙脚乱地装好了，正好装费两个轴（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142107183.png" alt="img"></p><p>对这把键盘的评价我只能说一般般，可能是因为我之前一直用的是笔记本的薄膜键盘，刚上手机械有些不适应，而且有些键位换了</p><hr><h2 id="买桌下纸巾盒">买桌下纸巾盒</h2><p>这个是在 B 站上学到的，感觉还是挺方便的，便宜东西，随便买</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142110689.png" alt="image-20220614211058545"></p><hr><h1 id="购买清单">购买清单</h1><p>最后，来看看我这次一共花了多少钱</p><table><thead><tr><th>产品</th><th>价格</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://item.jd.com/100021861365.html#none">创维 F24G3</a></td><td>￥799（12期免息）</td><td>23.8寸，1080p，144赫兹</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.200f2e8dFwNL0f&amp;id=667573291250&amp;_u=82027lusvpda35">桌面美学黑胡桃16077379木显示器增高台架办公颈室式电护屏幕抬高</a></td><td>¥11.91</td><td>颜色分类：40cm长单层白色材料，40*20*8（长宽高）</td></tr><tr><td><a href="https://detail.tmall.com/item.htm?id=577100722027&amp;spm=a1z09.2.0.0.200f2e8dFwNL0f&amp;_u=82027lusvpdea1">实木电脑显示器台式屏幕增高架办公室垫高底座桌面键盘收纳置物架</a></td><td>￥29.90</td><td>颜色分类：#款式B1（单层），54.9*19.9*5.4（长宽高）</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=520388310322&amp;_u=e2027lusvpf2be">电脑显示器底座底座液晶升降触摸屏</a></td><td>￥45.00</td><td>颜色分类：12-27寸高度调节</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=652102082248&amp;_u=e2027lusvpda02">CIY Tester68试轴器TES68机械轴热插拔轴座双模客制化套件套装</a></td><td>￥96.00</td><td>轴体：无轴体套件颜色分类：白色套餐类型：套餐一</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=669730759677&amp;_u=e2027lusvp198a">高特静音水蜜桃轴青柠轴水晶轴海洋轴熊猫轴防尘银轴客制化DIY轴</a></td><td>￥70.00</td><td>轴体：无颜色分类：高特静音水蜜桃轴70个[送拔轴器]套餐类型：官方标</td></tr><tr><td><a href="https://item.jd.com/10051630613784.html">米家 小米显示器挂灯 台灯 金属灯体 磁吸旋转灯寝室书桌阅读灯电脑挂灯 米家显示器挂</a></td><td>¥179.00（3期免息）</td><td>一代的，非二代</td></tr><tr><td><a href="https://item.taobao.com/item.htm?id=672212398395&amp;_u=e2027lusvp02e0">纸巾盒壁挂式抽纸盒放洗脸巾挂壁收纳厕所挂墙厨房倒挂免打孔桌下</a></td><td>￥4.30</td><td>颜色分类：壁挂抽纸盒&amp;mdash：白色（粘的时候注意方向，开口应向内）</td></tr><tr><td><a href="https://item.taobao.com/item.htm?id=613437552544&amp;_u=e2027lusvp3cd3">同款万次纳米胶带无痕魔力加厚透明胶高粘度双面不伤透明款</a></td><td>￥2.90</td><td>颜色分类：厚1mm宽2cm长1米</td></tr><tr><td><a href="https://item.taobao.com/item.htm?spm=a1z09.2.0.0.58de2e8dwAhcGl&amp;id=661754512152&amp;_u=e2027lusvpc220">治迅Type-C公对母延长线弯头90度充电数据线转换器USB3.1Gen2超短转接头母口PD快充100W母头扩展坞接</a></td><td>￥24.00</td><td>长度：1m颜色分类：弯头尼龙线丨100W功率丨20V5A丨E-maker芯片丨USB3.1Gen2丨10Gbps传输丨4k视频</td></tr></tbody></table><ul><li>总价：￥1262.01，但是大头其实分了很多期，经济压力也不算太大，个人来说比较满意</li></ul><hr><h1 id="Q-A">Q&amp;A</h1><p>装好之后发了一篇朋友圈，有些同学来问我一些细节问题，在此也记录一下</p><h2 id="Q1：你的耳机的充电器是什么">Q1：你的耳机的充电器是什么</h2><details class="toggle" ><summary class="toggle-button" style="">Answer</summary><div class="toggle-content"><p>那个只是个壳子，自己走线，是之前买的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142052358.jpg" alt="4d9308b1699a8fc6b9d8885dbbbf642"></p><p>链接：<a href="https://m.tb.cn/h.fuazZp1?tk=ls4Q2NrmQdl">https://m.tb.cn/h.fuazZp1?tk=ls4Q2NrmQdl</a></p></div></details><h2 id="Q2：磁吸灯你是怎么装的">Q2：磁吸灯你是怎么装的</h2><details class="toggle" ><summary class="toggle-button" style="">Answer</summary><div class="toggle-content"><p>这是一个侧面图</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142055476.jpg" alt="96c78d58456901657e9f271dabcf172"></p><p>（后面是一个金属吊篮，里面有一个排插还有一堆线）</p></div></details><h2 id="Q3：你这样夹着最上面是不是会挡住一点？">Q3：你这样夹着最上面是不是会挡住一点？</h2><details class="toggle" ><summary class="toggle-button" style="">Answer</summary><div class="toggle-content"><p>挡了一丁点，但我觉得没什么感觉</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206142059143.jpg" alt="2a46be3242f1ea935cd673b82d35900"></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 618好物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』结营感想（待后续）</title>
      <link href="/2022/06/12/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E7%BB%93%E8%90%A5%E6%84%9F%E6%83%B3/"/>
      <url>/2022/06/12/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E7%BB%93%E8%90%A5%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">福利</summary><div class="toggle-content"><p>鄙人平时上课的时候使用 IDM 把视频爬了下来，各位可以使用下面的链接访问！</p><blockquote><p>阿里云：<a href="https://www.aliyundrive.com/s/xW4crbwj2f2">https://www.aliyundrive.com/s/xW4crbwj2f2</a> （被反馈貌似无法下载）<br>提取码: 5m2g</p><p>百度云：<a href="https://pan.baidu.com/s/1nAhcW__vhYPQfOGYXUO-Xg">https://pan.baidu.com/s/1nAhcW__vhYPQfOGYXUO-Xg</a><br>提取码：89nn</p></blockquote></div></details><hr><p>呼！为期一个多月的课程已经结束了，我们的小组项目也进入了收尾阶段，是时候来写一篇总结了</p><h1 id="课程方面">课程方面</h1><h2 id="总体的课程安排">总体的课程安排</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206121029032.png" alt="image-20220612102953823"></p><p>一个月的时间，从 Golang 的入门开始，到网络，到架构，到存储，真的可以说是收获颇丰</p><p>从5月7日到5月17日，我们学习了Go 语言原理与实践，最后的那一天还做了个小项目</p><p>从5月17日到5月24日，我们学习的是网络与部署的相关内容</p><p>25日上了算法课，讲了一种老师的新排序算法，可以取各种主流算法的长处，并被 Golang 的新版本采用</p><p>从27日到29日，连上三节课，讲的是框架方面的内容，而且很多东西都是学校里学不到的，比如微服务之类的，学校肯定不会给你教这个</p><p>接着，从5月31日到6月2日，开始讲中间件，消息队列的两种主流处理方式的的确确吸引到了我</p><p>最后一部分便是存储与数据库了，从最简单的单机存储，一种讲到分布式对象存储，算是开眼了，了解了很多此前闻所未闻的东西</p><h2 id="我的感受">我的感受</h2><p>总的来说，这门课我能给满分，毕竟讲得是真的好，下面是几个本次课程给我最大的几个点</p><h3 id="讲师资历深厚">讲师资历深厚</h3><p>来给我们上课的老师都是字节内部工作了很久的老员工，比如给我们讲对象存储的老师介绍自己说是18年来字节的，是对象存储的早期成员，一路见证了字节对象存储容量的持续爆炸和架构的持续演进。再例如给我们讲 GORM 的老师张⾦柱，他本人就是 GORM 的作者，还有谁能比作者还有资格向你介绍 GORM ？再比如说曾负责阿里巴巴红包的王老师，累计发放数十亿现金，这个简历简直不要太霸气（</p><h3 id="老师们都很有耐心">老师们都很有耐心</h3><p>老师上课非常有耐心回答同学的问题，每节课都有 QA 环节，而且对于基础班还有 QA 文档可以在上面提问，不管是有关课程的还是有关项目的</p><h3 id="纯干货，传授的都是前沿知识">纯干货，传授的都是前沿知识</h3><p>我记得开营班会的时候说课程讲的都会是干货，不会去复述网上的博客，拿着10年前的解决方案给大家讲。课上的确也是这样的，介绍的都是业界现在最领先、最优解的做法。而且与实际生产相结合，我在课上能看到字节内部的后端同学的日常都是怎样的，而在讲OSS的时候，直接给我们看字节内部的对象存储平台如何使用，非常的接地气</p><h1 id="项目方面">项目方面</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206121138668.png" alt="image-20220612113808554"></p><p>本次有两个项目可选，分别是抖音和搜索引擎，对于我们这种菜鸡自然要选更简单的抖音项目了</p><p>这次项目中我负责了三个接口，和杭助后端的成员一起开发，效率也很高，使用 Apifox 来更新项目情况，项目进度一目了然</p><p>在项目中锻炼了我的 git 技能，此前一直不太熟练，这次算是熟练了</p><h1 id="个人总结">个人总结</h1><ul><li>提升了业务能力，还锻炼了团队协作的能力</li><li>了解了很多基础框架和前沿知识，不少东西都是学校不会教的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Golang』import 中下划线，点，别名的作用</title>
      <link href="/2022/06/11/%E3%80%8EGolang%E3%80%8Fimport-%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2022/06/11/%E3%80%8EGolang%E3%80%8Fimport-%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="下划线">下划线</h1><p>众所周知，在 Golang 中如果 import 了一个包，会自动运行它的 init() 函数，并且如果你不在你的代码中使用该包，就无法编译</p><p>而如果你只需要它的 init() 函数，不需要使用它内部其他组件，就可以加一个下划线</p><p>例如在使用 GORM 时，不仅要引入 GORM 的包，还要引入数据库驱动</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  _ <span class="string">&quot;example.com/my_mysql_driver&quot;</span></span><br><span class="line">  <span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="点">点</h1><p>加点后，在调用时可以省略包名前缀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> . <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="别名">别名</h1><p>别名就更简单了，就是取别名的意思</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> f <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    f.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『面试八股文』1：如何在40亿个整数中寻找一个数字</title>
      <link href="/2022/06/06/%E3%80%8E%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%8F1%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
      <url>/2022/06/06/%E3%80%8E%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1%E6%96%87%E3%80%8F1%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A840%E4%BA%BF%E4%B8%AA%E6%95%B4%E6%95%B0%E4%B8%AD%E5%AF%BB%E6%89%BE%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><ul><li>本篇来源于B站视频：<a href="https://www.bilibili.com/video/BV1aP4y1P7PH">漫画面试系列-如何在40亿个整数中寻找一个数字</a></li><li>整数是 32 位的 int</li><li>机器只有 2G 内存</li><li>可以使用很多机器</li></ul><hr><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062250505.png" alt="image-20220606225015382"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062250549.png" alt="image-20220606225030411"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062250467.png" alt="image-20220606225050357"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062251582.png" alt="image-20220606225106441"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206062251705.png" alt="image-20220606225126587"></p>]]></content>
      
      
      <categories>
          
          <category> 面试八股文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理』叉乘的计算</title>
      <link href="/2022/06/05/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%8F%89%E4%B9%98%E7%9A%84%E8%AE%A1%E7%AE%97/"/>
      <url>/2022/06/05/%E3%80%8E%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%86%E3%80%8F%E5%8F%89%E4%B9%98%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>感谢 B 站视频：<a href="https://www.bilibili.com/video/BV1S741157cb">叉乘/向量积的右手螺旋法则</a></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{a}\times \overrightarrow{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0359em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span></span></p><h1 id="方向判定">方向判定</h1><p>伸直右手，四指向前，大拇指垂直，将四指指向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9526em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span> 的方向，然后向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span> 的方向弯曲，大拇指的方向就是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">\overrightarrow{a}\times \overrightarrow{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0359em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span></span></span></span> 的方向</p><h1 id="大小判定">大小判定</h1><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">∣</mo><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover><mo fence="true">∣</mo></mrow><mo>=</mo><mrow><mo fence="true">∣</mo><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo fence="true">∣</mo></mrow><mo>⋅</mo><mrow><mo fence="true">∣</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover><mo fence="true">∣</mo></mrow><mo>⋅</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\left| \overrightarrow{a}\times \overrightarrow{b}\right| =\left| \overrightarrow{a}\right| \cdot \left| \overrightarrow{b}\right| \cdot \sin \theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8665em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.162em;"><span style="top:-1.966em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.564em;"><span class="pstrut" style="height:2.616em;"></span><span style="height:0.616em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='0.616em' style='width:0.3333em' viewBox='0 0 333.33000000000004 616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V616 H145z M145 0 H188 V616 H145z'/></svg></span></span><span style="top:-3.172em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.162em;"><span style="top:-1.966em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.564em;"><span class="pstrut" style="height:2.616em;"></span><span style="height:0.616em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='0.616em' style='width:0.3333em' viewBox='0 0 333.33000000000004 616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V616 H145z M145 0 H188 V616 H145z'/></svg></span></span><span style="top:-3.172em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.812em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.162em;"><span style="top:-1.966em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.564em;"><span class="pstrut" style="height:2.616em;"></span><span style="height:0.616em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='0.616em' style='width:0.3333em' viewBox='0 0 333.33000000000004 616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V616 H145z M145 0 H188 V616 H145z'/></svg></span></span><span style="top:-3.172em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.162em;"><span style="top:-1.966em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.564em;"><span class="pstrut" style="height:2.616em;"></span><span style="height:0.616em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='0.616em' style='width:0.3333em' viewBox='0 0 333.33000000000004 616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V616 H145z M145 0 H188 V616 H145z'/></svg></span></span><span style="top:-3.172em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.8665em;vertical-align:-0.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.162em;"><span style="top:-1.966em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.564em;"><span class="pstrut" style="height:2.616em;"></span><span style="height:0.616em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='0.616em' style='width:0.3333em' viewBox='0 0 333.33000000000004 616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V616 H145z M145 0 H188 V616 H145z'/></svg></span></span><span style="top:-3.172em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.162em;"><span style="top:-1.966em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.564em;"><span class="pstrut" style="height:2.616em;"></span><span style="height:0.616em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='0.616em' style='width:0.3333em' viewBox='0 0 333.33000000000004 616' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V616 H145z M145 0 H188 V616 H145z'/></svg></span></span><span style="top:-3.172em;"><span class="pstrut" style="height:2.616em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.65em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p><h1 id="使用行列式计算">使用行列式计算</h1><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo stretchy="true">→</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo stretchy="true">→</mo></mover><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>i</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>j</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>k</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>z</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">\overrightarrow{a}\times \overrightarrow{b}=\begin{vmatrix}i &amp; j &amp; k \\a_{x} &amp; a_{y} &amp; a_{z} \\b_{x} &amp; b_{y} &amp; b_{z}\end{vmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0359em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2164em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2164em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span class="svg-align" style="top:-3.6944em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.612em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.062em;"><span style="top:-2.866em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.464em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='2.416em' style='width:0.3333em' viewBox='0 0 333.33000000000004 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style="top:-5.872em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.062em;"><span style="top:-2.866em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.464em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.3333em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.3333em' height='2.416em' style='width:0.3333em' viewBox='0 0 333.33000000000004 2416' preserveAspectRatio='xMinYMin'><path d='M145 0 H188 V2416 H145z M145 0 H188 V2416 H145z'/></svg></span></span><span style="top:-5.872em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L20：Tos 对象存储实战</title>
      <link href="/2022/06/05/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL20%EF%BC%9ATos-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%AE%9E%E6%88%98/"/>
      <url>/2022/06/05/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL20%EF%BC%9ATos-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="抖音背后的存储">抖音背后的存储</h1><h2 id="重任来袭">重任来袭</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051005774.png" alt="image-20220605100518664"></p><h2 id="短视频架构初探">短视频架构初探</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051005124.png" alt="image-20220605100539031"></p><h2 id="存储需求">存储需求</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051006772.png" alt="image-20220605100625664"></p><h2 id="存储需求量细化">存储需求量细化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051007446.png" alt="image-20220605100737345"></p><h2 id="寻找天选存储">寻找天选存储</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051008451.png" alt="image-20220605100831365"></p><h1 id="为什么对象存储">为什么对象存储</h1><h2 id="前情回顾">前情回顾</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051009240.png" alt="image-20220605100942155"></p><h2 id="存储对比">存储对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051011486.png" alt="image-20220605101104399"></p><h2 id="分布式存储选型">分布式存储选型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051012585.png" alt="image-20220605101213487"></p><h2 id="易用性-2">易用性</h2><h3 id="接口对比">接口对比</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051015226.png" alt="image-20220605101508130"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051016194.png" alt="image-20220605101612042"></p><p>（听上去好像真的很方便）</p><h2 id="适应环境">适应环境</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051019536.png" alt="image-20220605101915455"></p><h1 id="对象存储怎么用">对象存储怎么用</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051019597.png" alt="image-20220605101947519"></p><h2 id="申请-Bucket">申请 Bucket</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051021340.png" alt="image-20220605102146263"></p><p>（链接是一个视频，实操如何在字节内部创建 Bucket）</p><h2 id="Restful-接口">Restful 接口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051023208.png" alt="image-20220605102302103"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051024148.png" alt="image-20220605102444063"></p><p>（也是一个内部视频，你可用看见这个视频本身就是放在 TOS 上的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051026776.png" alt="image-20220605102608575"></p><h2 id="MultiUpload-接口">MultiUpload 接口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051026321.png" alt="image-20220605102631210"></p><h2 id="Listprefix-接口">Listprefix 接口</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051027857.png" alt="image-20220605102759746"></p><h1 id="TOS字节内部实践">TOS字节内部实践</h1><p>（这是讲师18年来到字节后积累的经验）</p><h2 id="开发一个对象存储">开发一个对象存储</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051030882.png" alt="image-20220605103001784"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051031308.png" alt="image-20220605103132211"></p><h2 id="可扩展性之-Partition">可扩展性之 Partition</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051033131.png" alt="image-20220605103348032"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051034085.png" alt="image-20220605103417975"></p><h2 id="持久度之-Replication">持久度之 Replication</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051036547.png" alt="image-20220605103621456"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051037307.png" alt="image-20220605103727202"></p><h2 id="成本之-EC">成本之 EC</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051038697.png" alt="image-20220605103852598"></p><p>（任何一块坏了，可以从其他块推导出这一块的内容）</p><h2 id="成本之温热转换">成本之温热转换</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051040019.png" alt="image-20220605104031936"></p><h2 id="架构细化">架构细化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051040965.png" alt="image-20220605104058824"></p><h2 id="存储需求量细化-2">存储需求量细化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051042887.png" alt="image-20220605104222802"></p><h2 id="高可用之拆分">高可用之拆分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051043706.png" alt="image-20220605104329597"></p><h2 id="高可用之粤核酸的启发">高可用之粤核酸的启发</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051044219.png" alt="image-20220605104416125"></p><h2 id="高可用之镜像灾备">高可用之镜像灾备</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051044046.png" alt="image-20220605104455961"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051045460.png" alt="image-20220605104515372"></p><h2 id="未来展望">未来展望</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051045513.png" alt="image-20220605104535427"></p><h1 id="课后总结">课后总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051047928.png" alt="image-20220605104704842"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206051048702.png" alt="image-20220605104815621"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L19：深入理解 RDBMS</title>
      <link href="/2022/06/04/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL19%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-RDBMS/"/>
      <url>/2022/06/04/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL19%EF%BC%9A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-RDBMS/</url>
      
        <content type="html"><![CDATA[<h1 id="经典案例-2">经典案例</h1><h2 id="从一场红包雨说起">从一场红包雨说起</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041013608.png" alt="image-20220604101302483"></p><h2 id="RDBMS-事务-ACID">RDBMS 事务 ACID</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041014766.png" alt="image-20220604101434666"></p><h2 id="红包雨-与-ACID">红包雨 与 ACID</h2><h3 id="原子性">原子性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041016581.png" alt="image-20220604101615515"></p><h3 id="一致性">一致性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041017763.png" alt="image-20220604101705696"></p><h3 id="隔离性">隔离性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041018519.png" alt="image-20220604101853441"></p><h3 id="持久性">持久性</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041019384.png" alt="image-20220604101958299"></p><h2 id="红包雨-与-高并发">红包雨 与 高并发</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041021593.png" alt="image-20220604102123522"></p><h2 id="红包雨-与-高可靠">红包雨 与 高可靠</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041022953.png" alt="image-20220604102254872"></p><h1 id="发展历史">发展历史</h1><h2 id="前DBMS时代">前DBMS时代</h2><h3 id="人工管理">人工管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041025656.png" alt="image-20220604102529481"></p><h3 id="文件系统">文件系统</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041026108.png" alt="image-20220604102629994"></p><p>（打开记事本记录）</p><h2 id="DMBS时代">DMBS时代</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041027278.png" alt="image-20220604102756210"></p><h3 id="网状模型">网状模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041030929.png" alt="image-20220604103015828"></p><h3 id="层次模型">层次模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041031272.png" alt="image-20220604103159182"></p><h3 id="关系模型">关系模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041034233.png" alt="image-20220604103428112"></p><h2 id="DBMS数据模型">DBMS数据模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041035307.png" alt="image-20220604103506234"></p><h2 id="SQL语言">SQL语言</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041041054.png" alt="image-20220604104124972"></p><h2 id="历史回顾">历史回顾</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041044549.png" alt="image-20220604104428469"></p><h1 id="关键技术">关键技术</h1><h2 id="一条SQL的一生">一条SQL的一生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041048790.png" alt="image-20220604104836717"></p><h2 id="SQL引擎">SQL引擎</h2><h3 id="Parser">Parser</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041051385.png" alt="image-20220604105105304"></p><h3 id="Optimizer">Optimizer</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041054098.png" alt="image-20220604105402009"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041055621.png" alt="image-20220604105538517"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041058106.png" alt="image-20220604105815022"></p><h3 id="Executor">Executor</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041102338.png" alt="image-20220604110219268"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041104488.png" alt="image-20220604110458405"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041105833.png" alt="image-20220604110554754"></p><h2 id="存储引擎">存储引擎</h2><h3 id="InnoDB">InnoDB</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041108751.png" alt="image-20220604110850659"></p><h3 id="Buffer-Pool">Buffer Pool</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041109465.png" alt="image-20220604110926376"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041111051.png" alt="image-20220604111114979"></p><h3 id="Page">Page</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041113210.png" alt="image-20220604111332140"></p><h3 id="B-Tree">B+ Tree</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041114060.png" alt="image-20220604111422982"></p><p>B+树是真的太妙了</p><h2 id="事务引擎">事务引擎</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041114345.png" alt="image-20220604111447278"></p><h3 id="Atomicity-与-Undo-Log">Atomicity 与 Undo Log</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041116155.png" alt="image-20220604111621071"></p><h3 id="Isolation-与-锁">Isolation 与 锁</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041117586.png" alt="image-20220604111738502"></p><h3 id="Isolation-与-MVCC">Isolation 与 MVCC</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041118679.png" alt="image-20220604111834607"></p><h3 id="Durability-与-Redo-Log">Durability 与 Redo Log</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041120236.png" alt="image-20220604112035159"></p><h1 id="企业实践-3">企业实践</h1><h2 id="红包雨挑战">红包雨挑战</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041122515.png" alt="image-20220604112249446"></p><h2 id="大流量">大流量</h2><h3 id="Sharding">Sharding</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041124009.png" alt="image-20220604112414932"></p><h2 id="流量突增">流量突增</h2><h3 id="扩容">扩容</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041127173.png" alt="image-20220604112729090"></p><h3 id="代理连接池">代理连接池</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041128367.png" alt="image-20220604112836297"></p><h2 id="高可用-高可靠">高可用&amp;高可靠</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041129357.png" alt="image-20220604112953267"></p><h3 id="3AZ高可用">3AZ高可用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041131245.png" alt="image-20220604113104168"></p><h3 id="HA管理">HA管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041131311.png" alt="image-20220604113149231"></p><h1 id="课程总结">课程总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206041132108.png" alt="image-20220604113201034"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L18：带你认识存储 &amp; 数据库</title>
      <link href="/2022/06/03/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL18%EF%BC%9A%E5%B8%A6%E4%BD%A0%E8%AE%A4%E8%AF%86%E5%AD%98%E5%82%A8-%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/06/03/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL18%EF%BC%9A%E5%B8%A6%E4%BD%A0%E8%AE%A4%E8%AF%86%E5%AD%98%E5%82%A8-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="经典案例">经典案例</h1><h2 id="数据的产生">数据的产生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031600504.png" alt="image-20220603160032422"></p><h2 id="数据的流动">数据的流动</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031602755.png" alt="image-20220603160231674"></p><h2 id="数据的持久化">数据的持久化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031604733.png" alt="image-20220603160416665"></p><h2 id="潜在的问题">潜在的问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031605581.png" alt="image-20220603160509513"></p><h1 id="存储-数据库简介">存储 &amp; 数据库简介</h1><h2 id="存储系统">存储系统</h2><h3 id="系统概览">系统概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031608150.png" alt="image-20220603160831080"></p><h3 id="系统特点">系统特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031609990.png" alt="image-20220603160942927"></p><ul><li>简单：业务逻辑</li><li>复杂：错误处理</li></ul><h3 id="存储器层级结构">存储器层级结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031613962.png" alt="image-20220603161316888"></p><p>越往上，容量越小，性能越好，越贵</p><h3 id="数据怎么从应用到存储介质">数据怎么从应用到存储介质</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031613484.png" alt="image-20220603161352410"></p><h3 id="RAID-技术">RAID 技术</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031619053.png" alt="image-20220603161934973"></p><h2 id="数据库-2">数据库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031620221.png" alt="image-20220603162053150"></p><h3 id="概览">概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031622181.png" alt="image-20220603162245107"></p><ul><li>DSL：领域专用语言（人说人话，狗说狗话）</li></ul><h3 id="关系型数据库特点">关系型数据库特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031624206.png" alt="image-20220603162402135"></p><h3 id="非关系型数据库特点">非关系型数据库特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031624569.png" alt="image-20220603162451483"></p><h2 id="数据库-VS-经典存储">数据库 VS 经典存储</h2><h3 id="结构化数据管理">结构化数据管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031627997.png" alt="image-20220603162700919"></p><h3 id="事务能力">事务能力</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031627475.png" alt="image-20220603162714397"></p><h3 id="复杂查询能力">复杂查询能力</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031630654.png" alt="image-20220603163054567"></p><h2 id="数据库的使用方式">数据库的使用方式</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031631053.png" alt="image-20220603163137985"></p><h1 id="主流产品刨析">主流产品刨析</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031638377.png" alt="image-20220603163807301"></p><h2 id="单机存储">单机存储</h2><h3 id="概览-2">概览</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031639054.png" alt="image-20220603163917984"></p><h4 id="本地文件系统">本地文件系统</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031639167.png" alt="image-20220603163930081"></p><h4 id="key-value-存储">key-value 存储</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031642626.png" alt="image-20220603164232540"></p><h2 id="分布式存储">分布式存储</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031709816.png" alt="image-20220603170913748"></p><h3 id="HDFS">HDFS</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031712998.png" alt="image-20220603171212917"></p><h3 id="Ceph">Ceph</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031714057.png" alt="image-20220603171400978"></p><h2 id="单机数据库">单机数据库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031714683.png" alt="image-20220603171421609"></p><h3 id="关系型数据库">关系型数据库</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031714595.png" alt="image-20220603171456511"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031717577.png" alt="image-20220603171741484"></p><h3 id="非关系型数据库">非关系型数据库</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031718186.png" alt="image-20220603171841095"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031722017.png" alt="image-20220603172255935"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031724154.png" alt="image-20220603172447067"></p><h2 id="分布式数据库">分布式数据库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031726906.png" alt="image-20220603172627835"></p><h3 id="解决容量问题">解决容量问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031728489.png" alt="image-20220603172806399"></p><h3 id="解决弹性问题">解决弹性问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031729398.png" alt="image-20220603172938290"></p><h3 id="解决性价比问题">解决性价比问题</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031731064.png" alt="image-20220603173118945"></p><h3 id="More-to-Do">More to Do</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031732843.png" alt="image-20220603173252780"></p><h1 id="新技术演进">新技术演进</h1><h2 id="概览-3">概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031733282.png" alt="image-20220603173336210"></p><h2 id="SPDK">SPDK</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031735894.png" alt="image-20220603173533815"></p><h2 id="AI-Storage">AI &amp; Storage</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031738947.png" alt="image-20220603173802860"></p><h2 id="高性能硬件">高性能硬件</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031738002.png" alt="image-20220603173858910"></p><h1 id="总结-4">总结</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031740364.png" alt="image-20220603174028277"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031741653.png" alt="image-20220603174105549"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L17：分布式定时任务那些事儿</title>
      <link href="/2022/06/02/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL17%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2022/06/02/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL17%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言-2">前言</h1><h2 id="春节集卡瓜分20亿">春节集卡瓜分20亿</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022013074.png" alt="image-20220602201318788"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022015215.png" alt="image-20220602201543064"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022017032.png" alt="image-20220602201702902"></p><h1 id="发展历程-2">发展历程</h1><h2 id="Windows-批处理">Windows 批处理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022020514.png" alt="image-20220602202047388"></p><h2 id="Windows-任务计划程序">Windows 任务计划程序</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022021938.png" alt="image-20220602202140771"></p><h2 id="Linux命令-CronJob">Linux命令-CronJob</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022024157.png" alt="image-20220602202407039"></p><h2 id="单机定时任务">单机定时任务</h2><h3 id="Timer、Ticker">Timer、Ticker</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022025947.png" alt="image-20220602202506801"></p><h3 id="ScheduledExecutorService">ScheduledExecutorService</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022028547.png" alt="image-20220602202846383"></p><h2 id="任务调度">任务调度</h2><h3 id="Quartz">Quartz</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022029786.png" alt="image-20220602202910677"></p><h2 id="分布式定时任务">分布式定时任务</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022031899.png" alt="image-20220602203124729"></p><h3 id="定义-8">定义</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022034361.png" alt="image-20220602203417216"></p><h3 id="特点">特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022034787.png" alt="image-20220602203442631"></p><h3 id="执行方式">执行方式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022034835.png" alt="image-20220602203453660"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022038969.png" alt="image-20220602203813834"></p><h2 id="业内定时任务框架">业内定时任务框架</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022038822.png" alt="image-20220602203839684"></p><h3 id="Xxl-job">Xxl-job</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022041794.png" alt="image-20220602204149632"></p><h3 id="SchedulerX">SchedulerX</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022042472.png" alt="image-20220602204217344"></p><h3 id="TCT">TCT</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022042730.png" alt="image-20220602204240534"></p><h2 id="知识面扩充">知识面扩充</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022043724.png" alt="image-20220602204352511"></p><h2 id="02小结-2">02小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022046061.png" alt="image-20220602204604824"></p><h1 id="实现原理">实现原理</h1><h2 id="核心架构（重要）">核心架构（重要）</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022048316.png" alt="image-20220602204821128"></p><h3 id="数据流">数据流</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206022051241.png" alt="image-20220602205106110"></p><h3 id="功能架构">功能架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031507589.png" alt="image-20220603150737504"></p><h2 id="控制台">控制台</h2><h3 id="基本概念-4">基本概念</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031511889.png" alt="image-20220603151139815"></p><ul><li><p>为什么 1 个任务对应 n 个任务实例：</p><p>因为一个任务可以执行多次</p></li><li><p>为什么 1 个任务结构对应 n 个任务结果：</p><p>因为每次调度都可能会失败，这时就要重试，每试一次都有结果</p></li></ul><h3 id="任务元数据">任务元数据</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031514019.png" alt="image-20220603151445933"></p><h3 id="任务实例">任务实例</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031518768.png" alt="image-20220603151828690"></p><h2 id="触发器">触发器</h2><h3 id="核心指责">核心指责</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031520798.png" alt="image-20220603152009718"></p><h3 id="方案1">方案1</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031521881.png" alt="image-20220603152122813"></p><h3 id="方案2">方案2</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031521405.png" alt="image-20220603152145312"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031522866.png" alt="image-20220603152202797"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031522883.png" alt="image-20220603152249803"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031524288.png" alt="image-20220603152401224"></p><p>（鄙人感觉是非常巧妙的操作）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031525061.png" alt="image-20220603152544991"></p><h3 id="高可用">高可用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031528306.png" alt="image-20220603152833219"></p><h4 id="问题引出">问题引出</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031529194.png" alt="image-20220603152951115"></p><h4 id="数据库行锁模式">数据库行锁模式</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031531787.png" alt="image-20220603153111702"></p><h4 id="分布式锁模式">分布式锁模式</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031532129.png" alt="image-20220603153200045"></p><h2 id="调度器">调度器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031532859.png" alt="image-20220603153237798"></p><h3 id="资源来源">资源来源</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031533601.png" alt="image-20220603153306509"></p><h3 id="资源调度">资源调度</h3><h4 id="节点选择">节点选择</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031536437.png" alt="image-20220603153600343"></p><h4 id="任务分片">任务分片</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031537631.png" alt="image-20220603153724556"></p><h3 id="高级特性-2">高级特性</h3><h4 id="任务编排">任务编排</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031538244.png" alt="image-20220603153802175"></p><h4 id="故障转移">故障转移</h4><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031540427.png" alt="image-20220603154032351"></p><h3 id="高可用-2">高可用</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031541328.png" alt="image-20220603154128253"></p><h2 id="执行器">执行器</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031541317.png" alt="image-20220603154142251"></p><h2 id="03小结-2">03小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031542805.png" alt="image-20220603154256722"></p><h1 id="业务应用">业务应用</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031543841.png" alt="image-20220603154358763"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031545670.png" alt="image-20220603154516588"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031545318.png" alt="image-20220603154559241"></p><h1 id="课程回顾">课程回顾</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206031548041.png" alt="image-20220603154834966"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』区分 GoLand 代理和 go proxy</title>
      <link href="/2022/06/01/%E3%80%8EGo%E3%80%8F%E5%8C%BA%E5%88%86-GoLand-%E4%BB%A3%E7%90%86%E5%92%8C-go-proxy/"/>
      <url>/2022/06/01/%E3%80%8EGo%E3%80%8F%E5%8C%BA%E5%88%86-GoLand-%E4%BB%A3%E7%90%86%E5%92%8C-go-proxy/</url>
      
        <content type="html"><![CDATA[<p>先说结论，这两个完全不是一个东西</p><h1 id="GoLand-代理">GoLand 代理</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011557416.png" alt="image-20220601155701323"></p><p>指的是在 GoLand 进行通信时的代理（如 copilot，更新，登录，集成的 Git 或其他操作）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011602676.png" alt="image-20220601160217567"></p><p>（如这种操作）</p><p>但请注意集成终端可能不使用这个代理，这时就需要通过重新指定代理</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011600988.png" alt="image-20220601160009922"></p><h1 id="Go-proxy">Go proxy</h1><p>这是 Go 在下载依赖时的优先顺序，可以使用 <code>go env</code> 来查看</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011607451.png" alt="image-20220601160708373"></p><p>详细内容可以看<a href="/2022/05/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL2%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/#%E4%BE%9D%E8%B5%96%E5%88%86%E5%8F%91-proxy">这篇</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L16：走进消息队列</title>
      <link href="/2022/05/31/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL16%EF%BC%9A%E8%B5%B0%E8%BF%9B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2022/05/31/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL16%EF%BC%9A%E8%B5%B0%E8%BF%9B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="引子">引子</h1><h2 id="四个案例">四个案例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312057193.png" alt="image-20220531205709120"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312057399.png" alt="image-20220531205729335"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058600.png" alt="image-20220531205805499"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058270.png" alt="image-20220531205819201"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058129.png" alt="image-20220531205849066"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312058013.png" alt="image-20220531205857947"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312059668.png" alt="image-20220531205931609"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312059902.png" alt="image-20220531205937836"></p><p>本地日志丢掉了，怎么办？</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312100131.png" alt="image-20220531210004058"></p><h2 id="解决方案">解决方案</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312100562.png" alt="image-20220531210054490"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312101607.png" alt="image-20220531210126547"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312101526.png" alt="image-20220531210156465"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312103088.png" alt="image-20220531210303031"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312103796.png" alt="image-20220531210335730"></p><h1 id="前世今生">前世今生</h1><h2 id="发展历程">发展历程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312104382.png" alt="image-20220531210434316"></p><h2 id="业界对比">业界对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312111940.png" alt="image-20220531211121850"></p><h1 id="消息队列-Kafka">消息队列-Kafka</h1><h2 id="使用场景">使用场景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311915918.png" alt="image-20220531191521763"></p><h2 id="如何使用-Kafka">如何使用 Kafka</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311916021.png" alt="image-20220531191607884"></p><h2 id="基本概念-3">基本概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311916553.png" alt="image-20220531191643396"></p><h3 id="Offset">Offset</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311917542.png" alt="image-20220531191740421"></p><p>每个消息都有编号</p><h3 id="Replica">Replica</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311918154.png" alt="image-20220531191804042"></p><p>复制多份副本，如果 Leader 所在的机器挂了，就在 ISR 中的副本重新选一个 Leader</p><h2 id="数据复制">数据复制</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311919733.png" alt="image-20220531191919615"></p><p>由 Controller 分配复制</p><h2 id="Kafka-架构">Kafka 架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311920337.png" alt="image-20220531192008229"></p><h2 id="一条消息的自述">一条消息的自述</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311920165.png" alt="image-20220531192027072"></p><h2 id="思考">思考</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311920544.png" alt="image-20220531192046420"></p><p>不能一个一个发，应该要一起发送</p><h2 id="Producer">Producer</h2><h3 id="批量发送">批量发送</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311921540.png" alt="image-20220531192119423"></p><h3 id="数据压缩">数据压缩</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311921359.png" alt="image-20220531192144266"></p><p>最好的是 ZSTD</p><h2 id="Broker">Broker</h2><h3 id="数据的存储">数据的存储</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311923189.png" alt="image-20220531192302105"></p><h3 id="消息文件结构">消息文件结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311923640.png" alt="image-20220531192315548"></p><h3 id="磁盘结构">磁盘结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311924170.png" alt="image-20220531192438022"></p><h3 id="顺序写">顺序写</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311925375.png" alt="image-20220531192520280"></p><h3 id="如何找到消息">如何找到消息</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311925891.png" alt="image-20220531192557784"></p><h3 id="偏移量索引文件">偏移量索引文件</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311926340.png" alt="image-20220531192627242"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311926423.png" alt="image-20220531192642328"></p><h3 id="时间戳索引文件">时间戳索引文件</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311927645.png" alt="image-20220531192735513"></p><h3 id="传统数据拷贝">传统数据拷贝</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311927473.png" alt="image-20220531192757345"></p><h3 id="零拷贝">零拷贝</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311928163.png" alt="image-20220531192838069"></p><h2 id="Consumer">Consumer</h2><h3 id="消息的接收端">消息的接收端</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311930593.png" alt="image-20220531193034477"></p><h3 id="Low-Level-手动分配">Low Level 手动分配</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311931704.png" alt="image-20220531193112562"></p><p>优点：方便快捷</p><p>问题：</p><ol><li>如果某个 Consumer 挂掉了，那它负责的那些 Partition 直接阻塞</li><li>如果某个 Consumer 能力不够，想其他 Consumer 来接替，必会出现机器的启停</li></ol><h3 id="High-Level-自动分配">High Level 自动分配</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311932621.png" alt="image-20220531193210526"></p><h2 id="Consumer-Rebalance">Consumer Rebalance</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311933066.png" alt="image-20220531193342965"></p><p>（这个流程有点复杂，可以去查找更多资料学习）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311939127.png" alt="image-20220531193958034"></p><hr><p>下面是一些缺点</p><h2 id="数据复制问题">数据复制问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311941215.png" alt="image-20220531194102108"></p><h2 id="重启操作">重启操作</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311941163.png" alt="image-20220531194124057"></p><p>（重启一个节点要很久，重启所有节点要数天甚是数周）</p><p>不能并发重启，可能一个片放在两个机器上</p><h2 id="替换、扩容、缩容">替换、扩容、缩容</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311943483.png" alt="image-20220531194313382"></p><p>（只要有节点的变动，就有复制的成本）</p><h2 id="负载不均衡">负载不均衡</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311943436.png" alt="image-20220531194352353"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311944899.png" alt="image-20220531194401807"></p><p>（想解决 IO 问题，引入了新的 IO 问题）</p><h2 id="问题总结">问题总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311944230.png" alt="image-20220531194442112"></p><h1 id="消息队列-BMQ">消息队列-BMQ</h1><h3 id="BMQ-简介">BMQ 简介</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312051280.png" alt="image-20220531205159212"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312052562.png" alt="image-20220531205206499"></p><p>读写分离</p><h2 id="运维操作对比">运维操作对比</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312054447.png" alt="image-20220531205428375"></p><h2 id="HDFS-写文件流程">HDFS 写文件流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312055642.png" alt="image-20220531205503584"></p><h2 id="BMQ-文件结构">BMQ 文件结构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312056517.png" alt="image-20220531205621450"></p><p>同一个节点会打散到很多机器当中</p><h2 id="Broker-2">Broker</h2><h3 id="Partition-状态机">Partition 状态机</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312220785.png" alt="image-20220531222013714"></p><p>（听得有点迷）</p><h3 id="写文件流程">写文件流程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312223252.png" alt="image-20220531222344184"></p><p>（有点迷）</p><h3 id="写文件-Failover">写文件 Failover</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312229448.png" alt="image-20220531222922382"></p><h2 id="Proxy">Proxy</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312230572.png" alt="image-20220531223012504"></p><h2 id="多机房部署">多机房部署</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312233186.png" alt="image-20220531223305121"></p><h2 id="BMQ-的高级特性">BMQ 的高级特性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312250600.png" alt="image-20220531224959648"></p><h3 id="泳道消息">泳道消息</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312251914.png" alt="image-20220531225108853"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312251434.png" alt="image-20220531225150367"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312252701.png" alt="image-20220531225221626"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312253815.png" alt="image-20220531225308731"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312254561.png" alt="image-20220531225418485"></p><h3 id="Databus">Databus</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312256709.png" alt="image-20220531225604630"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312257996.png" alt="image-20220531225710931"></p><h3 id="Mirror">Mirror</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312258253.png" alt="image-20220531225803184"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312258478.png" alt="image-20220531225857412"></p><h3 id="Index">Index</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312259891.png" alt="image-20220531225945829"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312300852.png" alt="image-20220531230010786"></p><h3 id="Parquet">Parquet</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312301268.png" alt="image-20220531230108198"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312301809.png" alt="image-20220531230146740"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312302985.png" alt="image-20220531230240919"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312302120.png" alt="image-20220531230248046"></p><h1 id="消息队列-RocketMQ">消息队列- RocketMQ</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312303257.png" alt="image-20220531230318188"></p><h2 id="RocketMQ-基本概念">RocketMQ 基本概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312303559.png" alt="image-20220531230342484"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312304850.png" alt="image-20220531230453785"></p><h2 id="RocketMQ-架构">RocketMQ 架构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312305001.png" alt="image-20220531230510936"></p><h2 id="存储模型">存储模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312305634.png" alt="image-20220531230555571"></p><h2 id="高级特性">高级特性</h2><h3 id="事务场景">事务场景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312306265.png" alt="image-20220531230647201"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312307420.png" alt="image-20220531230731353"></p><h3 id="延迟发送">延迟发送</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312308148.png" alt="image-20220531230843088"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312309476.png" alt="image-20220531230926414"></p><h3 id="重试和死信队列">重试和死信队列</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312310428.png" alt="image-20220531231016360"></p><p>（右下角的内容错了，应该是死信队列）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312311464.png" alt="image-20220531231113397"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205312311344.png" alt="image-20220531231125281"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『Redis』缓存与数据库的一致性问题</title>
      <link href="/2022/05/31/%E3%80%8ERedis%E3%80%8F%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/31/%E3%80%8ERedis%E3%80%8F%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天在 B 站上刷到了这个问题，但是没有时间总结，先把视频放这</p><ul><li><a href="https://www.bilibili.com/video/BV1R44y1u7rD?spm_id_from=333.851.header_right.fav_list.click">面试官：缓存和数据库如何保证一致性</a></li><li><a href="https://www.bilibili.com/video/BV1Pt4y1x727?spm_id_from=333.851.header_right.fav_list.click">你们项目中如何保证 Redis 与 MySQL 的数据一致性？</a></li><li><a href="https://www.bilibili.com/video/BV1CD4y1X75a/?spm_id_from=333.788.recommend_more_video.0&amp;vd_source=e2613baf768b2432fcb2b9edd79c0c68">MySQL和Redis的双写一致性</a></li></ul><hr><h1 id="结论">结论</h1><h2 id="先更新数据库，再删除缓存">先更新数据库，再删除缓存</h2><p>并且结合延时双删或者消息队列</p>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『总结』2022年5月30日阶段性总结</title>
      <link href="/2022/05/30/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F2022%E5%B9%B45%E6%9C%8830%E6%97%A5%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/"/>
      <url>/2022/05/30/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F2022%E5%B9%B45%E6%9C%8830%E6%97%A5%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>前几天比赛太累了，今天直接摆了一天<br>睡前又感觉过意不去，做了个简单的阶段性总结</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311538972.jpg" alt="屏幕截图 2022-05-31 005318"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L15：微服务架构原理与治理实践</title>
      <link href="/2022/05/29/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL15%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/29/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL15%EF%BC%9A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B2%BB%E7%90%86%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务架构介绍">微服务架构介绍</h1><h2 id="系统架构演进历史">系统架构演进历史</h2><p>为什么系统架构需要演进？</p><ul><li>互联网的爆炸性发展</li><li>硬件设施的快速发展</li><li>需求复杂性的多样化</li><li>开发人员的急剧增加</li><li>计算机理论及技术的发展</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056648.png" alt="image-20220609160002559"></p><h3 id="单体架构">单体架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056029.png" alt="img"></p><blockquote><p>All in one process</p></blockquote><p>优势：</p><ol><li>性能最高</li><li>冗余小</li></ol><p>劣势：</p><ol><li>debug 困难</li><li>模块相互影响</li><li>模块分工、开发流程</li></ol><h3 id="垂直应用架构">垂直应用架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056037.png" alt="img"></p><blockquote><p>按照业务线垂直划分</p></blockquote><p>优势：</p><ol><li>业务独立开发维护</li></ol><p>劣势：</p><ol><li>不同业务存在冗余</li><li>每个业务还是单体</li></ol><h3 id="分布式架构">分布式架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056029.png" alt="img"></p><blockquote><p>抽出业务无关的公共模块</p></blockquote><p>优势：</p><ol><li>业务无关的独立服务</li></ol><p>劣势：</p><ol><li>服务模块bug可导致全站瘫痪</li><li>调用关系复杂</li><li>不同服务冗余</li></ol><h3 id="SOA架构（Service-Oriented-Architecture）">SOA架构（Service Oriented  Architecture）</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056696.png" alt="img"></p><blockquote><p>面向服务</p></blockquote><p>优势：</p><ol><li>服务注册</li></ol><p>劣势：</p><ol><li>整个系统是中心化的</li><li>需要从上至下设计</li><li>重构困难</li></ol><h3 id="微服务架构-2">微服务架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056716.png" alt="img"></p><blockquote><p>彻底的服务化</p></blockquote><p>优势：</p><ol><li>开发效率</li><li>业务独立设计</li><li>自下而上</li><li>故障隔离</li></ol><p>劣势：</p><ol><li>治理、运维难度</li><li>观测挑战</li><li>安全性</li><li>分布式系统</li></ol><h2 id="微服务架构概览">微服务架构概览</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056690.png" alt="img"></p><h2 id="微服务架构核心要素">微服务架构核心要素</h2><h3 id="服务治理">服务治理</h3><ul><li>服务注册</li><li>服务发现</li><li>负载均衡</li><li>扩缩容</li><li>流量治理</li><li>稳定性治理</li><li>…</li></ul><h3 id="可观察性">可观察性</h3><ul><li>日志采集</li><li>日志分析</li><li>监控打点</li><li>监控大盘</li><li>异常报警</li><li>链路追踪</li><li>…</li></ul><h3 id="安全">安全</h3><ul><li>身份验证</li><li>认证授权</li><li>访问令牌</li><li>审计</li><li>传输加密</li><li>黑产攻击</li><li>…</li></ul><h1 id="微服务架构原理及特征">微服务架构原理及特征</h1><h2 id="基本概念-2">基本概念</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056172.png" alt="img"></p><ul><li><p>服务（Service）</p><p>一组具有相同逻辑的运行实体</p></li><li><p>实例（Instance）</p><p>一个服务中，每个运行实体即为一个实例</p></li><li><p>实例与进程的关系</p><p>实例与进程直接没有必然对应关系，一个实例可以对应一个或多个进程（反之不常见）</p></li><li><p>集群（Cluster）</p><p>通常指服务内部的逻辑划分，包含多个实例</p></li><li><p>常见的实例承载形式</p><p>进程、VM、k8s pod…</p></li><li><p>有状态/无状态服务</p><p>服务的实例是否存储了可持久化的数据（例如磁盘文件）</p></li><li><p>服务间通信</p><p>对于单体服务，不同模块通信只是简单的函数调用</p><p>对于微服务，服务间通信意味着网络传输</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056355.png" alt="img"></p></li></ul><hr><p>例：如果将 HDFS 看做一组微服务：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056772.png" alt="img"></p><hr><h2 id="服务注册与发现">服务注册与发现</h2><h3 id="服务注册">服务注册</h3><blockquote><p>问题：在代码层面，如何指定调用一个目标服务的地址（ip:port）？</p></blockquote><ul><li><p>hardcode?</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056068.png" alt="img"></p><p>问题：如果写死了，就只能使用一个实例</p></li><li><p>DNS?</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056572.png" alt="img"></p><p>问题：</p><ol><li><p>本地 DNS 存在缓存，导致延时</p></li><li><p>负载均衡问题</p></li><li><p>不支持服务实例的探活检查</p></li><li><p>域名无法配置接口</p></li></ol></li></ul><hr><p>解决思路：新增一个统一的服务注册中心，用于存储服务名到服务实例的映射</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056990.png" alt="img"></p><h3 id="服务发现">服务发现</h3><p>（服务上线及下线过程）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056798.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056437.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056946.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056141.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056986.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056210.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056190.png" alt="img"></p><h2 id="流量特征">流量特征</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056771.png" alt="img"></p><ul><li>统一网关入口</li><li>内网通信多采用PRC</li><li>网状调用链路</li></ul><h2 id="总结">总结</h2><ul><li>微服务架构中基本组件及术语</li><li>服务注册及发现</li><li>无损的服务示例上下线流程</li><li>微服务架构中的基本流量特征</li></ul><h1 id="核心服务治理功能">核心服务治理功能</h1><h2 id="服务发布">服务发布</h2><p>服务发布（Deployment），指让一个服务升级运行新的代码的过程</p><p>服务发布的难点</p><ul><li><p>服务不可用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056580.png" alt="img"></p></li><li><p>服务抖动</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056682.png" alt="img"></p></li><li><p>服务回滚</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056008.png" alt="img"></p></li></ul><h3 id="蓝绿部署">蓝绿部署</h3><p>先用另一个集群接替工作，原集群升级完毕后再切回来</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056209.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056223.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056367.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056690.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056065.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056215.png" alt="img"></p><p>简单、稳定，但是需要双倍资源</p><h3 id="灰度发布（金丝雀发布）">灰度发布（金丝雀发布）</h3><p>让一些流量先适用新版本，再逐步扩大比例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056430.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056212.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056116.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056384.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056428.png" alt="img"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206091928147.png" alt="img"></p><p>占用资源小，但是也有不足，如某些问题是达到一定规模之后才能发现的，如果更新了99%才发现重大bug，那么要回滚会非常麻烦</p><h2 id="流量治理-2">流量治理</h2><p>在微服务架构下，我们可以基于地区、集群、实例、请求等维度，对端到端流量的路由路径进行精确控制</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056170.png" alt="img"></p><h2 id="负载均衡-2">负载均衡</h2><p>负载均衡（Load Balance）负责分配请求在每个下游实例上的分布</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056214.png" alt="img"></p><p>常见的 LB 策略：</p><ul><li>Round Robin</li><li>Random</li><li>Ring Hash</li><li>Least Request</li><li>…</li></ul><h2 id="稳定性治理">稳定性治理</h2><p>线上服务总是会出问题的，这与程序的正确性无关</p><ul><li>网络攻击</li><li>流量突增</li><li>机房断电</li><li>光纤被挖</li><li>机器故障</li><li>网络故障</li><li>机房空调故障</li><li>…</li></ul><p>微服务架构中典型的稳定性治理功能：</p><h3 id="限流">限流</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056358.png" alt="img"></p><p>（根据流量限度，该拒绝的拒绝，不能让服务卡死宕机）</p><h3 id="熔断">熔断</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056401.png" alt="img"></p><p>（下游联系不到时，直接拒绝上游请求，不然上游会一直重试）</p><h3 id="过载保护">过载保护</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056368.png" alt="img"></p><p>（根据负载限度，该拒绝的拒绝，不能让服务卡死宕机）</p><h3 id="降级">降级</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056595.png" alt="img"></p><p>（对比服务的重要性，拒绝一些请求）</p><h2 id="总结-2">总结</h2><ul><li>服务发布：蓝绿发布、灰度发布</li><li>基于地区、集群、实例、请求等多维度的流量治理功能</li><li>几种常见的负载均衡策略</li><li>微服务架构中的稳定性治理功能</li></ul><h1 id="字节跳动服务治理实践">字节跳动服务治理实践</h1><h2 id="重试的意义">重试的意义</h2><p>本地函数调用如果出错，重试没有意义，远程函数调用才有意义</p><ul><li><p>降低错误率</p><p>假设单次请求的错误概率为0.01，那么连续两次错误的概率为0.0001</p></li><li><p>降低长尾延时</p><p>对于偶尔耗时较长的请求，重试请求有机会提前返回</p></li><li><p>容忍暂时性错误</p><p>可尽量规避网络抖动</p></li><li><p>避开下游故障实例</p><p>一个服务中可能会有少量实例故障，重试其他实例可以成功</p></li></ul><h2 id="重试的难点">重试的难点</h2><p>既然重试有这么多好处，为什么默认不用呢</p><ul><li><p>幂等性（多次执行的结果是否相同，如对数据库中添加记录，连续执行两次就添加了两条记录）</p></li><li><p>重试风暴</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056020.png" alt="img"></p><p>（如果每一次都无脑重试3次）</p></li><li><p>超时设置</p></li></ul><h2 id="重试策略">重试策略</h2><h3 id="限制重试比例">限制重试比例</h3><p>设定一个重试比例阈值（例如1%），重试次数占所有请求比例不超过该阈值</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056024.png" alt="img"></p><h3 id="防止链路重试">防止链路重试</h3><p>链路层面的防重试风暴的核心是限制每层都发生重试，理想情况下只有最下一层发生重试，可以返回特殊的 status 表面 “请求失败，但别重试”</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056243.png" alt="img"></p><h3 id="Hedged-Request">Hedged Request</h3><p>对于可能超时（或延时高）的请求，重新向另一个下游实例发送一个相同的请求，并等待先到的响应</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056457.png" alt="img"></p><h2 id="重试效果验证">重试效果验证</h2><p>实践验证经过上述重试策略后，在链路上发生的重试放大效应</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206092056396.jpeg" alt="img"></p><h2 id="总结-3">总结</h2><ul><li>重试的意义及难点</li><li>应对重试风暴的策略</li></ul><details class="toggle" ><summary class="toggle-button" style="">原视频截图</summary><div class="toggle-content"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032149338.png" alt="image-20220603214941247"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032150062.png" alt="image-20220603215003990"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032150228.png" alt="image-20220603215051155"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032154057.png" alt="image-20220603215406969"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032154026.png" alt="image-20220603215448935"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032156062.png" alt="image-20220603215629975"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032158669.png" alt="image-20220603215830585"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032202705.png" alt="image-20220603220222622"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032202966.png" alt="image-20220603220233888"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032206206.png" alt="image-20220603220638113"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032210260.png" alt="image-20220603221057175"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032212023.png" alt="image-20220603221226932"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032213819.png" alt="image-20220603221355737"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032214155.png" alt="image-20220603221414071"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032214361.png" alt="image-20220603221455281"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032217125.png" alt="image-20220603221734043"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032218088.png" alt="image-20220603221839011"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032220462.png" alt="image-20220603222006386"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032220765.png" alt="image-20220603222017689"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032220839.png" alt="image-20220603222032762"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032221670.png" alt="image-20220603222108577"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032221754.png" alt="image-20220603222120677"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032221726.png" alt="image-20220603222142652"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032223555.png" alt="image-20220603222358493"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032225686.png" alt="image-20220603222506593"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032226846.png" alt="image-20220603222649761"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229630.png" alt="image-20220603222913566"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229018.png" alt="image-20220603222942947"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229527.png" alt="image-20220603222947460"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032229614.png" alt="image-20220603222954548"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032231915.png" alt="image-20220603223116821"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032231469.png" alt="image-20220603223127375"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032237381.png" alt="image-20220603223719285"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032238608.png" alt="image-20220603223846532"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032239719.png" alt="image-20220603223935627"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032241250.png" alt="image-20220603224105179"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032241132.png" alt="image-20220603224126050"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032245235.png" alt="image-20220603224508158"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032245584.png" alt="image-20220603224558490"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032247525.png" alt="image-20220603224732443"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032248943.png" alt="image-20220603224826855"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032249852.png" alt="image-20220603224917767"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032251066.png" alt="image-20220603225102994"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032252611.png" alt="image-20220603225208540"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032253228.png" alt="image-20220603225336155"></p><p>（如果每一次都无脑重试3次）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032255064.png" alt="image-20220603225513996"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032257934.png" alt="image-20220603225716845"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032258002.png" alt="image-20220603225838931"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032300008.png" alt="image-20220603230039932"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032301850.png" alt="image-20220603230156787"></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L14：HTTP 框架修炼之道</title>
      <link href="/2022/05/28/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL14%EF%BC%9AHTTP-%E6%A1%86%E6%9E%B6%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/"/>
      <url>/2022/05/28/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL14%EF%BC%9AHTTP-%E6%A1%86%E6%9E%B6%E4%BF%AE%E7%82%BC%E4%B9%8B%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="再谈-HTTP-协议">再谈 HTTP 协议</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012034538.png" alt="image-20220601203428459"></p><h2 id="为什么要协议">为什么要协议</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012037561.png" alt="image-20220601203719489"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012037437.png" alt="image-20220601203726376"></p><h2 id="协议里有什么">协议里有什么</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012037724.png" alt="image-20220601203750653"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012043503.png" alt="image-20220601204348429"></p><ul><li>PUT：完整更新</li><li>PATCH：部分更新（不幂等）</li></ul><h3 id="一个-Demo">一个 Demo</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012043386.png" alt="image-20220601204359321"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012044658.png" alt="image-20220601204430588"></p><h2 id="请求流程">请求流程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012047843.png" alt="image-20220601204705765"></p><h2 id="不足和展望">不足和展望</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012047255.png" alt="image-20220601204717183"></p><h2 id="01总结">01总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012049642.png" alt="image-20220601204902585"></p><h1 id="HTTP-框架的设计与实现">HTTP 框架的设计与实现</h1><h2 id="分层设计-2">分层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012101731.png" alt="image-20220601210120651"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012102149.png" alt="image-20220601210249064"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012105756.png" alt="image-20220601210506658"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012105243.png" alt="image-20220601210519164"></p><h2 id="应用层设计">应用层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012106041.png" alt="image-20220601210641965"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012110576.png" alt="image-20220601211051502"></p><h2 id="中间件设计">中间件设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012111700.png" alt="image-20220601211129618"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012111360.png" alt="image-20220601211141289"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012112347.png" alt="image-20220601211207278"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012112598.png" alt="image-20220601211248520"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012113995.png" alt="image-20220601211311919"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012113301.png" alt="image-20220601211352216"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012114597.png" alt="image-20220601211459526"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012115569.png" alt="image-20220601211507507"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012116000.png" alt="image-20220601211633929"></p><h2 id="路由设计">路由设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012117658.png" alt="image-20220601211724581"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012117083.png" alt="image-20220601211729008"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012119568.png" alt="image-20220601211902487"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012119433.png" alt="image-20220601211910341"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012120538.png" alt="image-20220601212045469"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012121278.png" alt="image-20220601212104218"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012121395.png" alt="image-20220601212141330"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012122560.png" alt="image-20220601212215491"></p><h2 id="如何做设计">如何做设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012122739.png" alt="image-20220601212240665"></p><h2 id="协议层设计">协议层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012124597.png" alt="image-20220601212436520"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012125895.png" alt="image-20220601212534823"></p><h2 id="网络层设计">网络层设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012126180.png" alt="image-20220601212600105"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012128836.png" alt="image-20220601212820763"></p><p>（避免阻塞）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012128192.png" alt="image-20220601212851128"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012129899.png" alt="image-20220601212939827"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012130686.png" alt="image-20220601213034628"></p><h2 id="02总结">02总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012131927.png" alt="image-20220601213101854"></p><h1 id="性能修炼之道">性能修炼之道</h1><h2 id="针对网络库的优化">针对网络库的优化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012141397.png" alt="image-20220601214101333"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012141262.png" alt="image-20220601214107186"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012142422.png" alt="image-20220601214226356"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012143969.png" alt="image-20220601214310900"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012144239.png" alt="image-20220601214425171"></p><h2 id="针对协议的优化">针对协议的优化</h2><h3 id="Headers-解析">Headers 解析</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012147586.png" alt="image-20220601214757504"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012148252.png" alt="image-20220601214828179"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012148950.png" alt="image-20220601214859855"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012150015.png" alt="image-20220601215054947"></p><h3 id="Header-key-规范化">Header key 规范化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012153186.png" alt="image-20220601215352073"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012154276.png" alt="image-20220601215456206"></p><h2 id="热点资源池化">热点资源池化</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012156036.png" alt="image-20220601215600974"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012156834.png" alt="image-20220601215650776"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012156123.png" alt="image-20220601215655058"></p><h2 id="03总结">03总结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012201188.png" alt="image-20220601220125124"></p><h1 id="企业实践-2">企业实践</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012233840.png" alt="image-20220601223327779"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L13：深入浅出 RPC 框架</title>
      <link href="/2022/05/27/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL13%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-RPC-%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/05/27/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL13%EF%BC%9A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-RPC-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>学员手册：<a href="https://juejin.cn/post/7099665398655615006/#heading-0">第十三节：深入浅出 RPC 框架</a></p></div></details><h1 id="基本概念">基本概念</h1><h2 id="本地函数调用">本地函数调用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011853935.png" alt="image-20220601185342832"></p><h2 id="远程函数调用">远程函数调用</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011854202.png" alt="image-20220601185428128"></p><h2 id="RPC-概念模型">RPC 概念模型</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011856156.png" alt="image-20220601185659044"></p><h2 id="一次-RPC-的完整过程">一次 RPC 的完整过程</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011858511.png" alt="image-20220601185832411"></p><h2 id="RPC-的好处">RPC 的好处</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011901402.png" alt="image-20220601190107309"></p><h2 id="RPC-的问题">RPC 的问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011903899.png" alt="image-20220601190311810"></p><h2 id="01小结">01小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011904776.png" alt="image-20220601190421701"></p><h1 id="分层设计">分层设计</h1><h2 id="以-Apache-Thrift-为例">以 Apache Thrift 为例</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011905574.png" alt="image-20220601190538495"></p><h2 id="编解码层">编解码层</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011906952.png" alt="image-20220601190632867"></p><h3 id="生成代码">生成代码</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011906854.png" alt="image-20220601190645772"></p><h3 id="数据格式">数据格式</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011907826.png" alt="image-20220601190718753"></p><h3 id="二进制编码">二进制编码</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011909151.png" alt="image-20220601190915065"></p><h3 id="选型">选型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011914693.png" alt="image-20220601191422623"></p><h2 id="协议层">协议层</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011916254.png" alt="image-20220601191636168"></p><h3 id="概念">概念</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011917811.png" alt="image-20220601191707742"></p><h3 id="协议构造">协议构造</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011918890.png" alt="image-20220601191836792"></p><p>多路复用：一个连接内有多个请求流</p><h3 id="协议解析">协议解析</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011920344.png" alt="image-20220601192057283"></p><h2 id="网络通信层">网络通信层</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011921444.png" alt="image-20220601192155370"></p><h3 id="Sockets-API">Sockets API</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011922965.png" alt="image-20220601192218879"></p><h2 id="网络库">网络库</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011925684.png" alt="image-20220601192514608"></p><h2 id="02小结">02小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011926143.png" alt="image-20220601192641077"></p><h1 id="关键指标">关键指标</h1><h2 id="稳定性">稳定性</h2><h3 id="保障策略">保障策略</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011927685.png" alt="image-20220601192751598"></p><h3 id="请求成功率">请求成功率</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011930415.png" alt="image-20220601193035335"></p><h3 id="长尾请求">长尾请求</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011932851.png" alt="image-20220601193218785"></p><h3 id="注册中间件">注册中间件</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011935102.png" alt="image-20220601193539010"></p><h2 id="易用性">易用性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011936929.png" alt="image-20220601193630834"></p><h2 id="扩展性">扩展性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011938175.png" alt="image-20220601193838093"></p><h2 id="观察性">观察性</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011940936.png" alt="image-20220601194028853"></p><h2 id="高性能">高性能</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011943452.png" alt="image-20220601194319380"></p><h2 id="03小结">03小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011945472.png" alt="image-20220601194557393"></p><h1 id="企业实践">企业实践</h1><h2 id="Kitex">Kitex</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011949416.png" alt="image-20220601194935339"></p><h2 id="自研网络库">自研网络库</h2><h3 id="背景-2">背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011952331.png" alt="image-20220601195218257"></p><h3 id="Netpoll">Netpoll</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011953211.png" alt="image-20220601195315141"></p><h2 id="扩展性设计">扩展性设计</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011954663.png" alt="image-20220601195410592"></p><h2 id="性能优化">性能优化</h2><h3 id="网络库优化">网络库优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011956078.png" alt="image-20220601195603008"></p><h3 id="编解码优化">编解码优化</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011957321.png" alt="image-20220601195736225"></p><h2 id="合并部署">合并部署</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012002109.png" alt="image-20220601200231030"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012005672.png" alt="image-20220601200546571"></p><h2 id="04小结">04小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206012007922.png" alt="image-20220601200715858"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Git』如何使用 Git 参与杭助的项目</title>
      <link href="/2022/05/26/%E3%80%8EGit%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Git-%E5%8F%82%E4%B8%8E%E6%9D%AD%E5%8A%A9%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/05/26/%E3%80%8EGit%E3%80%8F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Git-%E5%8F%82%E4%B8%8E%E6%9D%AD%E5%8A%A9%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><p>​这几天开始参与字节跳动青训营的小组项目，沿用的是助手的团队开发模式，鄙人因为不熟悉 Git 的而吃了亏（基本上是学一次忘一次，下次一定好好做笔记），特写本文总结一套正确的操作逻辑，也同时为后来人指路</p><p>首先，你可以根据个人喜欢使用 GoLand 的图形界面或者纯命令行，二者的效果是相同的</p><p>PS：下图中我的 GoLand 是换过主题的，但是按钮的位置没有变，大差不差</p><hr><h1 id="怎么将项目克隆到本地？">怎么将项目克隆到本地？</h1><div class="tabs" id="怎么将项目克隆到本地"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#怎么将项目克隆到本地-1">使用图形界面</button></li><li class="tab"><button type="button" data-href="#怎么将项目克隆到本地-2">使用命令行</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="怎么将项目克隆到本地-1"><p>打开 GoLand ，点击『从 VCS 获取』</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272005022.png" alt="image-20220527200548932"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272008986.png" alt="image-20220527200727648"></p><p>然后输入仓库 URL ，建议是 SSH 格式的，可以从 GitHub 找到</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272008541.png" alt="image-20220527200834430"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="怎么将项目克隆到本地-2"><p>本步对应的命令行是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:h68u/h68u-tiktok-app.git</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>这里还牵扯到创建并把 SSH 密钥添加到 GitHub 之类的，在此不赘述</p><hr><h1 id="怎么为项目贡献我的代码？">怎么为项目贡献我的代码？</h1><p>助手的标准规范是：</p><ol><li>从主分支新建 dev 分支，并以你的名字命名（如 <code>NX-dev</code>）</li><li>在这个分支上修改项目</li><li>提交本地分支到本地 git 储存库，再推送至 GitHub</li><li>在 GitHub 上合并到主分支，完成对主分支的更改</li></ol><p>接下来详细说明</p><h2 id="新建你的个人分支（git-checkout）">新建你的个人分支（<code>git checkout</code>）</h2><p>点击右下角的「Git 分支」 按钮，从主分支新建分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272019142.png" alt="image-20220526085736913"></p><p>本步对应的命令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b NX-dev</span><br></pre></td></tr></table></figure><h2 id="将更新提交到本地储存库（git-commit）">将更新提交到本地储存库（<code>git commit</code>）</h2><p>在工具栏中找到 「Git」-&gt;「提交」，或者从右上角的按钮中找到提交</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272039618.png" alt="image-20220526194917134"></p><p>核对一下本次的变更内容，并且在左下角标注本次提交的信息，然后提交</p><details class="toggle" ><summary class="toggle-button" style="">注意：可能的 Git Add</summary><div class="toggle-content"><p>如果你在项目中新建了文件，照理应当手动使用 <code>git add</code> 命令把新文件纳入 git</p><p>但实际上，靠谱的 IDE 在你建文件的时候就会跳出来问你要不要添加</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272045323.png" alt="image-20220527202726303"></p></div></details><h2 id="将本地的变动推送至云端（git-push）">将本地的变动推送至云端（<code>git push</code>）</h2><p>和上面一样在菜单栏或者工具栏中找到推送</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205272051457.png" alt="image-20220526194959034"></p><p>核对好要推送的内容就可以推送了</p><h2 id="合并至主分支（PR）">合并至主分支（PR）</h2><p>在浏览器中打开项目地址，可以看见提 PR 的提示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011636713.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011637373.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011637942.png" alt=""></p><h1 id="别人提交了更新，我要怎么更新本地代码？">别人提交了更新，我要怎么更新本地代码？</h1><p>先更新主分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011638138.png" alt=""></p><p>然后合并到自己的分支上</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206011639562.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L12：数据结构与算法</title>
      <link href="/2022/05/25/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL12%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2022/05/25/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL12%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L11：Git 的正确使用姿势与最佳实践</title>
      <link href="/2022/05/24/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL11%EF%BC%9AGit-%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/24/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL11%EF%BC%9AGit-%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-是什么">Git 是什么</h1><h2 id="版本控制">版本控制</h2><p>版本控制是什么？</p><p>一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统</p><h3 id="本地版本控制">本地版本控制</h3><ul><li>代表：RCS</li><li>依托于本地磁盘进行版本控制</li></ul><h3 id="集中式版本控制">集中式版本控制</h3><ul><li>代表：SVN</li><li>存在一个统一的远端服务器，用于版本控制，本地不存储版本控制</li></ul><h3 id="分布式版本控制">分布式版本控制</h3><ul><li>代表：Git</li><li>每个库都拥有所有的版本控制信息，远端服务器用于不同库之间进行版本信息同步</li></ul><h2 id="Git-发展历史">Git 发展历史</h2><p>最初版由 Liunx 创始人 Linus Torvalds 花两周时间开发而成，主要是为了用于 Linux 项目的维护</p><h1 id="Git-基本使用方式">Git 基本使用方式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251548072.png" alt="image-20220525154853031"></p><h2 id="Git-目录介绍">Git 目录介绍</h2><p>项目初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><p>其他参数</p><ul><li><code>--initial-branch</code>  初始化的分支</li><li><code>--bare</code> 创建裸仓库（纯 Git 目录，没用工作目录）</li><li><code>--template</code> 通过模板构建自定义 git 目录</li></ul><hr><p>观察 <code>.git</code> 目录</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251558910.png" alt="image-20220525155845823"></p><ul><li><p>HEAD：当前的分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251602059.png" alt="image-20220525160214027"></p></li><li><p>config：配置</p></li><li><p>objects：文件信息</p></li><li><p>refs：分支信息</p></li></ul><p>hooks 里面的一堆 <code>.sample</code> 文件是例子，不会执行</p><hr><p>工作区和暂存区</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251603860.png" alt="image-20220525160351818"></p><h3 id="Git-Config">Git Config</h3><p>不同级别的 Git 配置：全局、系统、当前</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251605871.png" alt="image-20220525160529835"></p><p>低级别可以覆盖高级别</p><h3 id="常见的-Git-配置">常见的 Git 配置</h3><ul><li><p>用户名配置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git config --global user.email xxx@xxx.com</span><br></pre></td></tr></table></figure></li><li><p>Instead of 配置</p><p>相当于替换</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global url git@github.com:.insseadOf https://github.com/</span><br></pre></td></tr></table></figure></li><li><p>Git 命令别名配置</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.cin <span class="string">&quot;commit --amend --no-edit&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Git-Remote">Git Remote</h2><ul><li><p>查看</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li><li><p>添加</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin_ssh git@github.com:git/git.git</span><br><span class="line">git remote add origin_http https://github.com/git/git.git</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251616811.png" alt="image-20220525161645758"></p><p>这时再看 config，就会发现多了两个配置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251618627.png" alt="image-20220525161800582"></p><hr><p>可以同一个 Origin 设置不同的 Push 和 Fetch URL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:git/git.git</span><br><span class="line">git remote set-url --add --push origin git@github.com:my_repo/git.git</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251622116.png" alt="image-20220525162258054"></p><hr><h3 id="HTTP-Remote">HTTP Remote</h3><p>出于安全性，一般不使用这种方式</p><p>URL： <code>https://github.com/git/git.git</code></p><p>免密配置：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251632770.png" alt="image-20220525163200720"></p><h3 id="SSH-Remote">SSH Remote</h3><p>URL： <code>git@github.com:git/git.git</code></p><p>免密配置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251633814.png" alt="image-20220525163338738"></p><hr><p>生成并查看公钥，之后存到 GitHub 上即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251634946.png" alt="image-20220525163444895"></p><p>可以创建多对公私钥</p><h2 id="Git-Add">Git Add</h2><p>将文件添加至暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> readme.md</span><br><span class="line">nano readme.md // 写入 <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>之后查看 <code>.git</code> 目录，可以看见多两个文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251642748.png" alt="image-20220525164201687"></p><p>这个文件的内容实际上就是我们修改的内容</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251642716.png" alt="image-20220525164255689"></p><h2 id="Git-Commit">Git Commit</h2><p>把修改从暂存区提交到储存库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;add readme&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251645234.png" alt="image-20220525164501205"></p><p>检查 <code>.git</code> 目录，发现多了两个文件，分别存储 blob 类型和 tree 类型</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251645955.png" alt="image-20220525164541833"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251648345.png" alt="image-20220525164813305"></p><h2 id="Objects">Objects</h2><p>commit、tree 和 blob 在 git 里统一称为 Object，除此之外还有一个 Object，在下文会提到</p><h3 id="Blob">Blob</h3><p>存储文件的内容</p><h3 id="Tree">Tree</h3><p>存储文件目录信息</p><h3 id="Commit">Commit</h3><p>存储提交信息，一个 Commit 可以对应唯一版本的代码</p><hr><p>如何把这三个信息串联在一起？</p><ol><li>通过 Commit 寻找 Tree</li><li>通过 Tree 寻找若干 Blob</li><li>通过若干 Blob 获取对应文件内容</li></ol><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251657343.png" alt="image-20220525165743302"></p><h2 id="Refs">Refs</h2><h3 id="Refs-中存储的内容">Refs 中存储的内容</h3><p>refs 的内容就是对应的 Commit ID</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251659760.png" alt="image-20220525165957720"></p><p>因此把 ref 当作指针，指向对应的 Commit 来表示当前对应的版本</p><hr><h3 id="Branch-和-Tag">Branch 和 Tag</h3><ul><li><p>Branch</p><p>分支一般用于开发阶段，可以不断添加 Commit 来迭代</p></li><li><p>Tag</p><p>标签一般表示一个稳定版本，指向的 Commit 一般不会变更</p></li></ul><hr><p>新建分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>创建好后，可以在 refs 中看见</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251701110.png" alt="image-20220525170140076"></p><p>新建标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v0.0.1</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251708697.png" alt="image-20220525170835658"></p><h2 id="Annotation-Tag">Annotation Tag</h2><p>附注标签：一种特殊的 Tag，可以提供一些额外的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0.0.2 -m <span class="string">&quot;add feature 1&quot;</span></span><br></pre></td></tr></table></figure><p>创建之后，发现 objects 中也新建了一个文件，而这个附注标签就是指向这个文件的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251713847.png" alt="image-20220525171336802"></p><p>这个文件就属于上文中的第四种 object —— Tag Object，指向的是一个 commit，内容是一些附加信息</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205251715516.png" alt="image-20220525171522477"></p><h2 id="追溯历史版本">追溯历史版本</h2><ul><li><p>获取当前版本代码</p><p>通过 Ref 指向的 Commit 可以获取唯一的代码版本</p></li><li><p>获取历史版本代码</p><p>现在修改一下 <a href="http://readme.md">readme.md</a> ，在开头加一个井号，之后提交</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252108582.png" alt="image-20220525210827540"></p><p>查看 <code>object </code>文件夹，又多了三个文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252109295.png" alt="image-20220525210911251"></p><p>通过 <code>git log</code> ，找到这次提交的编号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252110664.png" alt="image-20220525211021615"></p><p>检查这次提交，发现多了一个 parent 值，这就关联到了历史版本</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252112378.png" alt="image-20220525211207339"></p></li></ul><h2 id="修改历史版本">修改历史版本</h2><ol><li><p>commit --amend</p><p>修改最近的一次 commit 信息，修改后 commit id 会变</p></li><li><p>rebase</p><p>通过 <code>git rebase -i HEAD~3</code>  可以实现对最近三个 commit 的修改</p><ul><li>合并 commit</li><li>修改具体的 commit message</li><li>删除某个 commit</li></ul></li><li><p>filter --branch</p><p>可以指定删除所有提交中的某个文件或者全局修改邮件地址等操作</p></li></ol><p>这里尝试一下第一个命令，执行后会打开文本编辑窗口让你修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252116646.png" alt="image-20220525211603557"></p><p>可以看见 commit id 已经改变了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252117252.png" alt="image-20220525211742208"></p><p>而老的 commit 其实就已经没有 ref 去指向了，这时就变成了一个悬空的 object，可以使用下面的命令来查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fsck --lost-found</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252120073.png" alt="image-20220525212035044"></p><h2 id="Git-GC">Git GC</h2><h3 id="GC">GC</h3><p>删除一些不需要的 object，已经会对 object 进行一些打包压缩来减少仓库体积</p><p>使用 <code>--prune</code> 参数指定修剪多久之前的对象，默认是两周</p><h3 id="Reflog">Reflog</h3><p>记录操作日志，防止误操作后数据丢失，</p><hr><p>尝试以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure><p>然后观察目录变化，发现变化很大</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252125168.png" alt="image-20220525212536083"></p><h2 id="完整的-Git-视图">完整的 Git 视图</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252126370.png" alt="image-20220525212629318"></p><h2 id="Git-Clone-Pull-Fetch">Git Clone &amp; Pull &amp; Fetch</h2><h3 id="Clone">Clone</h3><p>拉取完整的仓库到本地，可以指定分支、深度</p><h3 id="Fetch">Fetch</h3><p>将远程某些分支最新代码拉取到本地，不会 merge</p><p>会修改 refs/remote 内的分支信息，如果需要和本地代码合并需要手动操作</p><h3 id="Pull">Pull</h3><p>拉取并合并，相当于 <code>git fetch</code> + <code>git merge</code></p><p>也可以通过 <code>git pull --rebase</code> 完成 <code>git fetch +get rebase</code> 操作</p><h2 id="Git-Push">Git Push</h2><h3 id="常用命令">常用命令</h3><p>一般使用 <code>git push orgin master</code> 即可</p><h3 id="冲突问题">冲突问题</h3><ol><li>如果本地的 commit 记录和远端的 commit 记录历史不一致，则会产生冲突</li><li>如果该分支就自己一个人使用，或团队内确认可以修改历史则可以通过 <code>-f</code> 参数强制推送</li></ol><h3 id="推送限制规则">推送限制规则</h3><p>可以通过保护分支，来配置一些保护规则</p><h1 id="Git-研发流程">Git 研发流程</h1><h2 id="不同的工作流">不同的工作流</h2><ul><li><p>集中式工作流</p><p>代表：SVN，Gerrit</p><p>只依托于主干分支进行开发，不存在其他分支</p></li><li><p>分支管理工作流</p><p>代表GitHub，Gitlab</p><p>可以定义不同特性的开发分支，上线分支，在分支开发完成后在通过 MR/PR 合入主分支</p></li></ul><h2 id="集中式工作流">集中式工作流</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252140227.png" alt="image-20220525214004158"></p><h3 id="Gerrit">Gerrit</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252141123.png" alt="image-20220525214128038"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252142812.png" alt="image-20220525214214758"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252142980.png" alt="image-20220525214222928"></p><h2 id="分支管理工作流">分支管理工作流</h2><table><thead><tr><th>工作流</th><th>特点</th></tr></thead><tbody><tr><td>Git Flow</td><td>分支类型丰富，规范严格</td></tr><tr><td>GitHub Flow</td><td>只有主干和分发分支，规则简单</td></tr><tr><td>GitLab Flow</td><td>在主干分支和开发分支之上构建环境分支，版本分支，满足不同发布和环境的需要</td></tr></tbody></table><h3 id="Git-Flow">Git Flow</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252146125.png" alt="17cda4db-cc5d-46d0-adeb-7cdd32f3a05f"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252147398.png" alt="image-20220525214528516"></p><h3 id="GitHub-Flow">GitHub Flow</h3><p>只有一个主干，基于 Pull Request 往主干分支提交代码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252148636.png" alt="image-20220525214814587"></p><h3 id="GitLab-Flow">GitLab Flow</h3><p>GitLab 推荐的工作流是上面两者的优化</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252157590.png" alt="image-20220525215728533"></p><h2 id="代码合并">代码合并</h2><h3 id="Fast-Forward">Fast-Forward</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge <span class="built_in">test</span> --ff-only</span><br></pre></td></tr></table></figure><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252158965.png" style="zoom:50%;" /><h3 id="Tree-Way-Merge">Tree-Way Merge</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git marge <span class="built_in">test</span> --no-ff</span><br></pre></td></tr></table></figure><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252200980.png" alt="913d1ef3-be50-4d89-9306-9fdc17756cac" style="zoom:50%;" /><h2 id="如何选择合适的工作流">如何选择合适的工作流</h2><p>没有最好的，只有最合适的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205252203988.png" alt="image-20220525220355920"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：谓词逻辑</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E8%B0%93%E8%AF%8D%E9%80%BB%E8%BE%91/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E8%B0%93%E8%AF%8D%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231129706.png" alt="image-20220523112908319"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231130568.png" alt="image-20220523113015113"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231131624.png" alt="image-20220523113114288"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231132201.png" alt="image-20220523113248663"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231134250.png" alt="image-20220523113419823"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231150718.png" alt="image-20220523115046363"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231151126.png" alt="image-20220523115135907"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231153211.png" alt="image-20220523115349740"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231522623.png" alt="image-20220523152250464"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231524984.png" alt="image-20220523152435920"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231524284.png" alt="image-20220523152450104"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231526165.png" alt="image-20220523152608081"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231526671.png" alt="image-20220523152622577"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231527583.png" alt="image-20220523152750487"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231529494.png" alt="image-20220523152930360"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231531462.png" alt="image-20220523153104241"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231533419.png" alt="image-20220523153340169"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231534309.png" alt="image-20220523153455226"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231535504.png" alt="image-20220523153544403"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231536376.png" alt="image-20220523153646182"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：命题逻辑推理理论</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E6%8E%A8%E7%90%86%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231110981.png" alt="image-20220523111022566"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231112865.png" alt="image-20220523111200554"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231113802.png" alt="image-20220523111312489"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231115052.png" alt="image-20220523111557416"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231117707.png" alt="image-20220523111724508"></p><p>​<img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231120189.png" alt="image-20220523112053612"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231122132.png" alt="image-20220523112203807"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231124842.png" alt="image-20220523112408143"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：命题逻辑等值演算</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%AD%89%E5%80%BC%E6%BC%94%E7%AE%97/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%AD%89%E5%80%BC%E6%BC%94%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h1 id="等值式">等值式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231043609.png" alt="image-20220523104347434"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231045064.png" alt="image-20220523104507955"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231046311.png" alt="image-20220523104621950"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231047237.png" alt="image-20220523104735044"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231048958.png" alt="image-20220523104854777"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231049280.png" alt="image-20220523104935117"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231050458.png" alt="image-20220523105039173"></p><h1 id="析取范式和合取范式">析取范式和合取范式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231052320.png" alt="image-20220523105210074"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231055728.png" alt="image-20220523105528444"></p><h1 id="主析取范式和主合取范式">主析取范式和主合取范式</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231056977.png" alt="image-20220523105650810"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231058103.png" alt="image-20220523105810948"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231059349.png" alt="image-20220523105917111"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231059867.png" alt="image-20220523105947759"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231100242.png" alt="image-20220523110043016"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231101179.png" alt="image-20220523110140952"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231102968.png" alt="image-20220523110209834"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231104423.png" alt="image-20220523110425797"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231105189.png" alt="image-20220523110540454"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231107301.png" alt="image-20220523110732617"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』数理逻辑：命题的基本概念</title>
      <link href="/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/05/23/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91%EF%BC%9A%E5%91%BD%E9%A2%98%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="命题的概念">命题的概念</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231028142.png" alt="image-20220523102845721"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231029909.png" alt="image-20220523102936685"></p><h1 id="命题联结词">命题联结词</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231032968.png" alt="image-20220523103204640"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231033792.png" alt="image-20220523103311453"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231034369.png" alt="image-20220523103414086"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231035929.png" alt="image-20220523103517653"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231036559.png" alt="image-20220523103605290"></p><h1 id="公式的类型">公式的类型</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231038427.png" alt="image-20220523103806152"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231040232.png" alt="image-20220523104023054"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205231041261.png" alt="image-20220523104112871"></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L10：架构初探-谁动了我的蛋糕</title>
      <link href="/2022/05/22/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL10%EF%BC%9A%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2-%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E8%9B%8B%E7%B3%95/"/>
      <url>/2022/05/22/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL10%EF%BC%9A%E6%9E%B6%E6%9E%84%E5%88%9D%E6%8E%A2-%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%E8%9B%8B%E7%B3%95/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>学员笔记：<a href="https://juejin.cn/post/7098182433941651492#heading-0">第十节：架构初探 - 谁动了我的蛋糕</a></p></div></details><h1 id="什么是架构">什么是架构</h1><h2 id="架构定义">架构定义</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221526713.png" alt="image-20220522152651578"></p><h2 id="问题">问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221517706.jpg" alt=""></p><h2 id="单机">单机</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221522253.png" alt="image-20220522152257154"></p><h2 id="单体、垂直应用-垂直切分">单体、垂直应用 | 垂直切分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221527118.png" alt="image-20220522152713026"></p><h2 id="SOA、微服务-水平切分">SOA、微服务 | 水平切分</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221529008.png" alt="image-20220522152919895"></p><h2 id="小结">小结</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221534315.png" alt="image-20220522153402247"></p><ul><li>竖着切：分不同种类事情</li><li>横着切：同一件事分几步</li></ul><h1 id="企业级后端架构剖析">企业级后端架构剖析</h1><h2 id="背景">背景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221536741.png" alt="image-20220522153601666"></p><h2 id="云计算">云计算</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221536712.png" alt="image-20220522153610572"></p><h2 id="云原生">云原生</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221557529.png" alt="image-20220522155712434"></p><h3 id="弹性资源">弹性资源</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221557984.png" alt="image-20220522155727877"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221559563.png" alt="image-20220522155929469"></p><h3 id="DevOps">DevOps</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221603017.png" alt="image-20220522160259916"></p><h3 id="微服务架构">微服务架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221606533.png" alt="image-20220522160610445"></p><h3 id="服务网格">服务网格</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221608264.png" alt="image-20220522160805171"></p><h2 id="云原生蛋糕店">云原生蛋糕店</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221610880.png" alt="image-20220522161043804"></p><h1 id="企业级后端架构的挑战">企业级后端架构的挑战</h1><h2 id="问题-2">问题</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221611421.png" alt="image-20220522161101352"></p><h2 id="离在线资源并池">离在线资源并池</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221616925.png" alt="image-20220522161618837"></p><h2 id="自动扩缩容">自动扩缩容</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221620848.png" alt="image-20220522162016762"></p><h2 id="微服务亲合性部署">微服务亲合性部署</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221622519.png" alt="image-20220522162225432"></p><h2 id="流量治理">流量治理</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221623040.png" alt="image-20220522162320964"></p><h2 id="CPU-水位负载均衡">CPU 水位负载均衡</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221625590.png" alt="image-20220522162520509"></p><h1 id="后端架构实践">后端架构实践</h1><h2 id="问题背景">问题背景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221626620.png" alt="image-20220522162659546"></p><h2 id="问题提炼">问题提炼</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221627389.png" alt="image-20220522162747311"></p><h2 id="自适应静态权重">自适应静态权重</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221629879.png" alt="image-20220522162902794"></p><h2 id="自适应动态权重-Alpha">自适应动态权重 Alpha</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221629038.png" alt="image-20220522162952950"></p><h2 id="自适应动态权重-Beta">自适应动态权重 Beta</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221631396.png" alt="image-20220522163130300"></p><h2 id="自适应动态权重-Release">自适应动态权重 Release</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221635074.png" alt="image-20220522163523977"></p><h2 id="尾声">尾声</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205221636580.png" alt="image-20220522163651513"></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』苏系坦克 T-64/72/80/90 型号辨别</title>
      <link href="/2022/05/22/%E3%80%8EOthers%E3%80%8F%E8%8B%8F%E7%B3%BB%E5%9D%A6%E5%85%8B-T-64-72-80-90-%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/"/>
      <url>/2022/05/22/%E3%80%8EOthers%E3%80%8F%E8%8B%8F%E7%B3%BB%E5%9D%A6%E5%85%8B-T-64-72-80-90-%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>❤️本期内容整理自B站视频<a href="https://www.bilibili.com/video/BV1Ls411e7Ta?spm_id_from=333.999.0.0">【军事科普】如何识别T-64/72/80和T-90</a></p></blockquote><p>一般来说，战雷里遇到这些苏系锅盖头都是直接打驾驶员观察口，都怎么区分具体型号</p><p>今天逛 B 站看见了这个视频，感觉有必要记一下笔记</p><p>但是太忙了，简单地说就是炮塔，屁股，首上，负重轮，红外大眼的区别</p><p>等有空去战雷里截点图来展示一下</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『WSL』在 WSL 中使用主机的代理（以 Clash 为例）</title>
      <link href="/2022/05/21/%E3%80%8EWSL%E3%80%8F%E5%9C%A8WSL%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BB%A3%E7%90%86/"/>
      <url>/2022/05/21/%E3%80%8EWSL%E3%80%8F%E5%9C%A8WSL%E4%B8%AD%E4%BD%BF%E7%94%A8%E4%B8%BB%E6%9C%BA%E7%9A%84%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>困惑了我很久的问题今天终于被我解决惹~让我赶紧把它记录下来</p><h1 id="确保-Windows-上的代理可用">确保 Windows 上的代理可用</h1><p>运行 Clash，打开 <code>Allow LAN</code> 和 <code>System Proxy</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211501993.jpg" alt=""></p><p>然而我发现 Profiles 里 <code>allow-lan</code> 还是 <code>false</code>，安全起见还是手动给它编辑一下</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211516260.jpg" alt=""></p><p>在终端中试一下有没有代理</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211524645.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211525355.jpg" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://www.google.com</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211526777.jpg" alt=""></p><h1 id="在-WSL-中连接主机的代理">在 WSL 中连接主机的代理</h1><p>将下面函数加入到<code>~/.profile</code>中，记得编辑端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> hostip=$(<span class="built_in">cat</span> /etc/resolv.conf |grep -oP <span class="string">&#x27;(?&lt;=nameserver\ ).*&#x27;</span>) <span class="comment">#获得网关地址</span></span><br><span class="line"><span class="built_in">export</span> proxyPort=1080 <span class="comment">#端口</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    export https_proxy=&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;&quot;;</span></span><br><span class="line"><span class="string">    export http_proxy=&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;&quot;;</span></span><br><span class="line"><span class="string">    export all_proxy=&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;&quot;;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::http::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;\&quot;;&quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf &gt; /dev/null;</span></span><br><span class="line"><span class="string">    echo -e &quot;Acquire::https::Proxy \&quot;http://$&#123;hostip&#125;:$&#123;proxyPort&#125;\&quot;;&quot; | sudo tee -a /etc/apt/apt.conf.d/proxy.conf &gt; /dev/null;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    unset https_proxy;</span></span><br><span class="line"><span class="string">    unset http_proxy;</span></span><br><span class="line"><span class="string">    unset all_proxy;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &quot;/Acquire::http::Proxy/d&quot; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">    sudo sed -i -e &quot;/Acquire::https::Proxy/d&quot; /etc/apt/apt.conf.d/proxy.conf;</span></span><br><span class="line"><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>测试可用性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile <span class="comment">#加载环境</span></span><br><span class="line">proxy <span class="comment">#执行函数 代理生效</span></span><br><span class="line">curl https://www.google.com <span class="comment">#请求Google 网址</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211534896.jpg" alt=""></p><p>如果你一路顺风的话，那么恭喜你已经完成了</p><p>但是如果你和我之前一样一直卡住的话，可以尝试关闭 Windows 防火墙</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211537909.jpg" alt=""></p><p>我就是在关了防火墙之后就好了</p><p>但是也不能一直关着防火墙是吧，我选择恢复防火墙的默认设置，然后用管理员重新打开 Clash，之后批准权限即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211541217.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L9：将我的服务开放给用户</title>
      <link href="/2022/05/21/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL9%EF%BC%9A%E5%B0%86%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%94%BE%E7%BB%99%E7%94%A8%E6%88%B7/"/>
      <url>/2022/05/21/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL9%EF%BC%9A%E5%B0%86%E6%88%91%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%BC%80%E6%94%BE%E7%BB%99%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>学员笔记：<a href="https://juejin.cn/post/7097126973163454494#heading-39">第九节：将我的服务开放给用户</a></p></div></details><details class="toggle" ><summary class="toggle-button" style="">课前准备 （摘自学员笔记）</summary><div class="toggle-content"><blockquote><p>专有名词</p></blockquote><ul><li><p>权威DNS：保存了相应域名的权威信息。权威DNS即通俗上“这个域名我说了算”的服务器</p></li><li><p>LocalDNS：缓存+递归查询，运营商（集团网）部署的本地DNS服务器，直接接受网内客户端请求</p></li><li><p>根DNS服务器：全球有13台，LocalDNS未命中缓存查询的起点服务器，其公网地址具体可参考<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.iana.org%2Fdomains%2Froot%2Fservers">www.iana.org/domains/roo…</a></p></li><li><p>DNS Update：DNS主服务器master接受外部的变更指令</p></li><li><p>DNS Notify：DNS主服务器master接受变更命令后，会自增自身的serial号，同时将变更的serial号告知从服务器slave</p></li><li><p>DNS IXFR：DNS从服务器slave以增量的形式向master要求获取本次变更的内容</p></li><li><p>DNS AXFR：DNS从服务器slave以全量的形式向master要求获取当前的全量数据</p></li><li><p>对称加密：使用相同的秘钥来加密传输内容，一端加密后，对端收到数据会用相同的秘钥来解密</p></li><li><p>非对称加密：如果用公钥对数据进行加密，只有用对应的私钥才能解密；如果用私钥对数据进行加密，那么只有用对应的公钥才能解密。</p></li><li><p>静态加速：针对视频、图片等不变的内容，将其缓存在靠近用户的边缘节点，缓存预热后用户直接从边缘获取，从而加速访问速度；</p></li><li><p>动态加速DCDN：针对API类返回值不同的请求，通过特殊的网络优化方式（路由优化、传输优化）等技术加速其达到源站的速度。</p></li><li><p>VIP：虚拟IP，一般作为四层反向代理的入口，client看起来一直在与VIP交互</p></li><li><p>RS：Real Server，VIP后实际承受client请求的服务，可能是物理机/虚拟机/容器POD</p></li><li><p>DPDK：Data Plane Development Kit，主要用户4层负载均衡，用于转发的网络加速领域比较多；以极大提高网卡报文的处理性能和吞吐量，提高数据平面应用程序的工作效率</p></li><li><p>SSL/TLS：(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议</p></li><li><p>DPDK：Data Plane Development Kit，一种从数据面去加速网络报文处理的工具，可以极大提高数据处理性能和吞吐量，提高数据平面应用程序的工作效率</p></li></ul><blockquote><p>实验工具准备</p></blockquote><p>基础条件：使用Linux/MacOS操作系统，windows可以安装虚拟机，Ubuntu或者Centos都行</p><p>开源软件：bind9、nginx、ngrok(<a href="https://link.juejin.cn?target=https%3A%2F%2Fngrok.com%2Fdownload">ngrok.com/download</a>)</p><p>备注：bind9和nginx使用apt-get或者yum命令安装即可</p></div></details><hr><h1 id="企业接入升级打怪之路">企业接入升级打怪之路</h1><h2 id="域名系统">域名系统</h2><h3 id="Host-管理">Host 管理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211617436.jpg" alt=""></p><p>example 公司在建立之初建立了一些内部站点，如办公、文档等</p><p>他们的网络运维人员靠一张 Host 表来管理从 host 到 IP 的映射</p><p>也就是说，运维编辑表，然后员工使用 FTP 协议拉取这个表</p><p>但是随着 example 公司越来越多，这一方法出现了越来越多的问题</p><ul><li>流量和负载大</li><li>靠人工避免域名冲突</li><li>时效性差</li></ul><h3 id="使用域名系统">使用域名系统</h3><p>所以 example 公司的运维打算使用域名系统替换 hosts 文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211624159.jpg" alt=""></p><h3 id="域名购买和配置迁移">域名购买和配置迁移</h3><p>之后， example 公司去购买了域名，解决了 Host 方案的一系列问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211625322.jpg" alt=""></p><h3 id="如何开发外部用户访问">如何开发外部用户访问</h3><p>随着公司的增长，example 公司打算开发一个外部网站，具体方案如下图</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211627888.jpg" alt=""></p><h2 id="自建-DNS-服务器">自建 DNS 服务器</h2><h3 id="问题背景-2">问题背景</h3><p>前面说到，example 公司使用域名系统替换了 Host 文件解决方案，解决了一系列问题，最终把外部网站开发给了用户，但是也出现了一些问题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211632251.jpg" alt=""></p><p>所以公司的运维开始研究 DNS 系统的工作模型</p><h3 id="DNS-查询过程">DNS 查询过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211636734.jpg" alt=""></p><p>本地 DNS -&gt; 权威 DNS</p><h3 id="DNS-记录类型">DNS 记录类型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211638479.jpg" alt=""></p><h3 id="权威-DNS-系统架构">权威 DNS 系统架构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211644531.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211646310.jpg" alt=""></p><h2 id="HTTPS-协议">HTTPS 协议</h2><h3 id="问题背景-3">问题背景</h3><p>随着 example 公司的不断壮大和发展，最近收到了很多用户的投诉，最后发现是由 HTTP 协议造成的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211648900.jpg" alt=""></p><h3 id="对称加密和非对称加密">对称加密和非对称加密</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211652658.jpg" alt=""></p><h3 id="SSL-的通信过程">SSL 的通信过程</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211653438.jpg" alt=""></p><h3 id="证书链">证书链</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211656027.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211657192.jpg" alt=""></p><h3 id="使用-https">使用 https</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211659103.jpg" alt=""></p><p>example 公司在使用了 https 协议之后，就不用担心明文公网传输的问题了</p><h2 id="接入全站加速">接入全站加速</h2><h3 id="问题背景-4">问题背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211704114.jpg" alt=""></p><h3 id="解决方案-2">解决方案</h3><ul><li>源站容量问题：增加后端机器扩容，使用静态加速缓存</li><li>网络传输问题：动态加速 DCDN</li><li>全站加速：静态加速+动态加速</li></ul><h3 id="静态加速-CDN">静态加速 CDN</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211712326.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211714627.jpg" alt=""></p><h3 id="动态加速-DCDN">动态加速 DCDN</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211716461.jpg" alt=""></p><h3 id="DCDN-原理">DCDN 原理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211720742.jpg" alt=""></p><h3 id="使用全站加速">使用全站加速</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211721566.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211722571.jpg" alt=""></p><h2 id="四层负载均衡">四层负载均衡</h2><h3 id="问题背景-5">问题背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211723275.jpg" alt=""></p><h3 id="什么是四层负载均衡？">什么是四层负载均衡？</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211726280.jpg" alt=""></p><h3 id="常见的调度算法原理">常见的调度算法原理</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211727629.jpg" alt=""></p><h3 id="常见的实现方式-FULLNAT">常见的实现方式 FULLNAT</h3><p>在内部做一次 IP 端口的转换</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211730553.jpg" alt=""></p><h3 id="四层负载均衡特点">四层负载均衡特点</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211730231.jpg" alt=""></p><h3 id="使用四层负载均衡">使用四层负载均衡</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211732527.jpg" alt=""></p><h2 id="七层负载均衡">七层负载均衡</h2><h3 id="问题背景-6">问题背景</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211733791.jpg" alt=""></p><h3 id="Nginx-简介">Nginx 简介</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211735192.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211736196.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211737341.jpg" alt=""></p><h3 id="Nginx-反向代理示意图">Nginx 反向代理示意图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211738334.jpg" alt=""></p><h3 id="Nginx-内部结构">Nginx 内部结构</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211738677.jpg" alt=""></p><h3 id="事件驱动模型">事件驱动模型</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211742097.jpg" alt=""></p><h3 id="异步非阻塞">异步非阻塞</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211744108.jpg" alt=""></p><h3 id="Nginx-简单调优">Nginx 简单调优</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211744374.jpg" alt=""></p><h3 id="别让-OS-限制了-Nginx-的性能">别让 OS 限制了 Nginx 的性能</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211746308.jpg" alt=""></p><h3 id="提升-CPU-使用效率">提升 CPU 使用效率</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211747538.jpg" alt=""></p><h3 id="提升网络效率">提升网络效率</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211751870.jpg" alt=""></p><h3 id="使用七层负载均衡">使用七层负载均衡</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205211752214.jpg" alt=""></p><h1 id="动手实践">动手实践</h1><p>（以下内容鄙人全程在 WSL 中操作）</p><h2 id="准备一个-Http-服务">准备一个 Http 服务</h2><p>我使用 gin 框架写了个 hello world，来提供 http 服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动 web 服务</span></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212110151.jpg" alt=""></p><p>可以看见正常运行</p><h2 id="host-劫持实验">host 劫持实验</h2><p>众所周知，hosts 文件的优先级高于 DNS 服务器，所以可以在本地将域名劫持到特定的 ip 上，以用来调试目的，下面来验证这个原理</p><p>编辑 <code>/etc/hosts</code> ，加入下面这一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">172.23.245.154  www.toutiao.com</span><br></pre></td></tr></table></figure><p>然后就能看到效果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212115684.jpg" alt=""></p><p>测试完成后记得把这一行删掉</p><h2 id="搭建-DNS-服务器">搭建 DNS 服务器</h2><h3 id="权威侧-zone-文件准备">权威侧 zone 文件准备</h3><p>新建 zone 文件 <code>/etc/bind/example.com.zone</code>，并编辑为以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$TTL 10M</span><br><span class="line">@   IN    SOA    ns1.example.com    admin.example.com. (</span><br><span class="line">        0       ; serial</span><br><span class="line">        1D      ; refresh</span><br><span class="line">        1H      ; retry</span><br><span class="line">        1W      ; expire</span><br><span class="line">        3H )    ; minimum</span><br><span class="line"></span><br><span class="line">@    IN    NS   ns1.example.com.</span><br><span class="line">; 这里ns1主机的ip地址可以换成本机地址</span><br><span class="line">ns1        A    172.23.245.154</span><br><span class="line">; 这里www主机的ip地址可以换成本机地址</span><br><span class="line">www        A    172.23.245.154     </span><br></pre></td></tr></table></figure><h3 id="bind9-配置准备">bind9 配置准备</h3><p>直接编辑 <code>/etc/bind/named.conf</code> 即可，配置参考如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">logging &#123;</span><br><span class="line"> channel default_log &#123;</span><br><span class="line">        #这里注意提前创建log目录</span><br><span class="line">        file &quot;/var/log/named/named.log&quot; versions 10 size 200m;</span><br><span class="line">        severity dynamic;</span><br><span class="line">        print-category yes;</span><br><span class="line">        print-severity yes;</span><br><span class="line">        print-time yes;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel query_log &#123;</span><br><span class="line">        file &quot;/var/log/named/query.log&quot; versions 10 size 200m;</span><br><span class="line">        severity dynamic;</span><br><span class="line">        print-category yes;</span><br><span class="line">        print-severity yes;</span><br><span class="line">        print-time yes;</span><br><span class="line">    &#125;;</span><br><span class="line">    channel resolver_log &#123;</span><br><span class="line">        file &quot;/var/log/named/resolver.log&quot; versions 10 size 200m;</span><br><span class="line">        severity dynamic;</span><br><span class="line">        print-category yes;</span><br><span class="line">        print-severity yes;</span><br><span class="line">        print-time yes;</span><br><span class="line">    &#125;;</span><br><span class="line">    category default &#123;default_log;&#125;;</span><br><span class="line">    category queries &#123;query_log;&#125;;</span><br><span class="line">    category query-errors &#123;query_log;&#125;;</span><br><span class="line">    category resolver &#123;resolver_log;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">    #这里的ip地址可以换成本机地址</span><br><span class="line">    listen-on port 8053 &#123; 127.0.0.1; &#125;; // 鄙人按：这个服务的端口要记着</span><br><span class="line">    directory &quot;/etc/bind&quot;;</span><br><span class="line">    dnssec-validation no;</span><br><span class="line">    #支持递归查询</span><br><span class="line">    recursion yes;</span><br><span class="line">    #转发到公共DNS优先，而不是自己去迭代查询，节省网络IO资源消耗</span><br><span class="line">    forward first;</span><br><span class="line">    forwarders &#123;</span><br><span class="line">        223.5.5.5;</span><br><span class="line">        223.6.6.6;</span><br><span class="line">    &#125;;</span><br><span class="line">    allow-query &#123; any; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone &quot;example.com&quot; &#123;  // 权威 DNS</span><br><span class="line">    type master;</span><br><span class="line">    file &quot;example.com.zone&quot;; // 匹配上这个域名就去找上面编辑的 example.com.zone 文件</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>前车之鉴：一定要把默认有的三行 include 给注释掉</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212158124.jpg" alt=""></p><h3 id="运行-bind6">运行 bind6</h3><p>用下面这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo named -g</span><br></pre></td></tr></table></figure><p>如果有报错的话，自己排查一下</p><h3 id="使用-dig-命令验证">使用 dig 命令验证</h3><ul><li><p>验证权威 DNS 服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 -p 8053 www.example.com <span class="comment"># 从本机的 8053 端口找域名</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212208235.jpg" alt=""></p></li><li><p>验证 LocalDNS 服务</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @127.0.0.1 -p 8053 www.toutiao.com </span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212212931.jpg" alt=""></p><p>未命中本地托管的 zone 数据，直接向任一 forwarders（公共DNS）请求，获取结果后缓存到本地</p></li></ul><h2 id="四层负载均衡实验">四层负载均衡实验</h2><p>正经的四层负载均衡要使用 LVS+keepalived ，但是配置专业的东西过于麻烦，这里就使用 nginx 来演示一下</p><p>四层的负载均衡就是一个网关的机子转发流量到内部的机子里，但是我们现在只有一台机子，也就只能将就着玩一下</p><p>目前我们一个有了两个服务：</p><ul><li>8053 端口的 DNS 服务</li><li>8080 端口的 http 服务</li></ul><p>现在我们把 53 端口的 udp 报文转发到 8053 去，80 端口的 tcp 报文转发到 8080 去</p><p>编辑 <code>/etc/nginx/nginx.conf</code> ，新增stream模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#四层转发，tcp/udp协议转发</span><br><span class="line">stream &#123;</span><br><span class="line">    log_format proxy &#x27;$remote_addr [$time_local] &#x27;</span><br><span class="line">                 &#x27;$protocol $status $bytes_sent $bytes_received &#x27;</span><br><span class="line">                 &#x27;$session_time &quot;$upstream_addr&quot; &#x27;</span><br><span class="line">                 &#x27;&quot;$upstream_bytes_sent&quot; &quot;$upstream_bytes_received&quot; &quot;$upstream_connect_time&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  proxy;</span><br><span class="line">    open_log_file_cache off;</span><br><span class="line"></span><br><span class="line">    upstream dns_proxy &#123;</span><br><span class="line">        server 127.0.0.1:8053; # 发送到本地的 8053</span><br><span class="line">    &#125;</span><br><span class="line">    upstream hello_proxy &#123;</span><br><span class="line">        server 127.0.0.1:8080; # 发到本地的 1080</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 53 udp reuseport;  # 监听 53 端口</span><br><span class="line">        proxy_pass dns_proxy;     # 发送到 dns_proxy</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 81;# 监听 81 端口</span><br><span class="line">        proxy_connect_timeout 1s;</span><br><span class="line">        proxy_timeout 300s;</span><br><span class="line">        proxy_pass hello_proxy;  # 发到 hello_proxy</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流量转发验证">流量转发验证</h3><ul><li><p>UDP 流量</p><p>看，请求 53 端口照样可以找到 DNS 服务</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212228439.jpg" alt=""></p></li><li><p>TCP 流量</p><p>可以看见 81 端口也正常地转发了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212233599.jpg" alt=""></p></li></ul><h2 id="七层负载均衡实验">七层负载均衡实验</h2><p>也是转发，但是是在第七层</p><p>继续编辑 nginx 的配置文件，把 880 端口的 http 请求转发到 8080 去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">       server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       880;</span><br><span class="line">        server_name  www.example.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">             proxy_set_header HOST $host;</span><br><span class="line">             proxy_connect_timeout 60;</span><br><span class="line">             proxy_send_timeout 60;</span><br><span class="line">             proxy_read_timeout 60;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下面的命令重载 nginx 的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>然后检查，可以看见能够成功转发</p><p>而且是真的在第 7 层转发的，有日志记录</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205212251910.jpg" alt=""></p><h2 id="SSL-自签证书实验">SSL 自签证书实验</h2><p>（略，感觉平时会怎么配 SSL 证书就够了）</p><p>但是这个是在七层负载的同时上 SSL 证书，感兴趣的也可以去试一下</p><h2 id="将本地服务开放外网访问">将本地服务开放外网访问</h2><p>（略，感觉会 frp，nps之类的也够了）</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』青训营 x 掘金技术社区专场班会</title>
      <link href="/2022/05/20/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E9%9D%92%E8%AE%AD%E8%90%A5-x-%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%E4%B8%93%E5%9C%BA%E7%8F%AD%E4%BC%9A/"/>
      <url>/2022/05/20/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8F%E9%9D%92%E8%AE%AD%E8%90%A5-x-%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%E4%B8%93%E5%9C%BA%E7%8F%AD%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在掘金高效学习">如何在掘金高效学习</h1><p>一个帮助开发者成长的社区</p><ol><li>学习的价值：编程技术处于高速更新换代中</li><li>分享的价值：在分享中成长，鼓励开源精神</li><li>掘金社区要解决的问题：<ul><li>定位：面向全球中文开发者提供优质技术内容</li><li>文化：坚信善于分享和学习优质内容的开发者会成长得越来越好</li><li>规则：激励持续输出原创优质内容的用户</li></ul></li></ol><h2 id="高效获取内容">高效获取内容</h2><ul><li>多平台</li><li>标签体系</li><li>优秀技术团队/创作者</li><li>干货直播</li><li>学习课程</li></ul><h2 id="高效笔记">高效笔记</h2><ul><li>使用掘金插件写笔记</li><li>持续写文章</li></ul><h2 id="休闲交流">休闲交流</h2><ul><li>JYM，欢迎来沸点摸鱼</li><li>各种活动</li></ul><h1 id="从-Go-菜鸟到-Go-专家">从 Go 菜鸟到 Go 专家</h1><h2 id="技术深入">技术深入</h2><h3 id="成为专家的路线">成为专家的路线</h3><ol><li>学习基础语法与使用</li><li>学习问题与解决方法</li><li>学习原理和底层设计</li></ol><h3 id="必须掌握的工具">必须掌握的工具</h3><ol><li>各种 IDE</li><li>GitHub</li><li>Go 的调试器 DELVE</li><li>性能分析工具</li></ol><h2 id="邻域拓展">邻域拓展</h2><ul><li><p>一手的消息源</p></li><li><p>理性看待技术文章</p></li></ul><h2 id="社区参与">社区参与</h2><h3 id="了解开源技术组织和社区">了解开源技术组织和社区</h3><ul><li>工业界广为接受的开源技术组织<ul><li>Apache</li><li>CNCF</li><li>etc</li></ul></li><li>Go 语言本身的技术社区<ul><li>golang-nuts</li><li>golang-dev</li></ul></li></ul><h3 id="为什么要参与开源社区">为什么要参与开源社区</h3><h3 id="哪些社区项目值得参与">哪些社区项目值得参与</h3><ul><li>我喜欢的</li><li>星星多的</li><li>名气大的</li><li>我想去的公司的项目</li></ul><h2 id="思考总结">思考总结</h2><h3 id="为什么要总结">为什么要总结</h3><h3 id="科学的总结方法">科学的总结方法</h3><ul><li>卡片笔记</li><li>个人代码库</li><li>体系化总结</li></ul><h2 id="多做技术方面的输出">多做技术方面的输出</h2><ul><li>将笔记内容组织为文章输出</li><li>打造个人品牌</li><li>著书立说</li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L8：打开抖音互联网会发生什么</title>
      <link href="/2022/05/19/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL8%EF%BC%9A%E6%89%93%E5%BC%80%E6%8A%96%E9%9F%B3%E4%BA%92%E8%81%94%E7%BD%91%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/"/>
      <url>/2022/05/19/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL8%EF%BC%9A%E6%89%93%E5%BC%80%E6%8A%96%E9%9F%B3%E4%BA%92%E8%81%94%E7%BD%91%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="刷抖音网络是怎么交互的">刷抖音网络是怎么交互的</h1><h2 id="网络接入">网络接入</h2><h3 id="互联网">互联网</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0f09630e48e496a8dac275d49f46ffe~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="路由">路由</h3><p>路由发包原理</p><ul><li><p>同网段：配置网段即可默认添加静态路由。获取对端MAC直接发包</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8ff9962042d40af90b44043769a4d35~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li><li><p>跨网段：配置网关路由。获取网关MAC地址发包</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1d492dc8ef42058763844ced47dfdd~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li><li><p>动态路由：BGP/OSPF等，路由表在动态变化</p></li><li><p>路由是网状的，不一定是对称的</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/424335633234423fa5e2cc28a24848bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li></ul><p>路由传递时，始末 IP 是不变的， 始末 MAC 地址是一直改变的</p><h3 id="ARP协议">ARP协议</h3><ul><li>ARP广播/应答：协议原理</li><li>免费ARP：主动广播告知MAC地址</li><li>ARP代理：虚拟网络/伪造MAC地址</li></ul><p>ARP 的本质是查找下一跳的 MAC ，不是请求目标地址</p><h3 id="IP-协议">IP 协议</h3><p>Q：为什么不能用 MAC 代替 IP 地址？</p><p>MAC 协议是在第二层的，但是第二层还有很多其他的协议，为了兼容其他二层的协议就又封装了一层 IP</p><p>Q：IPv4不够用，除了IPv6还有什么方法</p><p>使用 NAT</p><h3 id="NAT">NAT</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/692cef58a45d4985853cc2e6a8518b19~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>NAT 是不是就改了改 IP 地址呢？</p><p>NAT 同时改了 IP + 端口</p><h2 id="网络传输">网络传输</h2><h3 id="数据包">数据包</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/013082ead9da4eb690f53f8f507e868f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>本质上是一段内存，里面存储的内存是有序的，一般是按照TCP/IP的多层协议去封装。拆包/封包都是按照协议去写内存/读内存。</p><h3 id="数据包发送">数据包发送</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a46805c16bf94698bdd85f331ca3066e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="先请求-DNS">先请求 DNS</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7993e66dbda7423a839bcb3440202e4e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>递归迭代解析</p><h3 id="DNS-的传输协议-UDP">DNS 的传输协议 UDP</h3><ul><li><p>协议简单</p><p>想发什么包，就分配一个 UDP 的头，把 payload 里面塞数据发出去就好</p></li><li><p>需要考虑可靠性的场景使用复杂</p><p>每次发多少？怎么避免分片？</p><p>怎么知道没丢包？</p><p>怎么权衡传输效率和质量？</p></li></ul><h3 id="TCP-三次握手">TCP 三次握手</h3><p>什么是 TCP 连接？</p><p>拔了网线，连接会断吗？（靠心跳包探活）</p><p>你真的了解 TCP 三次握手吗？</p><p>三次握手：确认传输的序列号/MSS/Option字段，建立连接</p><p>TCP连接：是一个虚拟的概念，本质上两倍维持一段内存，记录连接状态，就是session</p><h3 id="TCP-传输">TCP 传输</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205191937376.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205191944421.jpg" alt=""></p><p>TCP传输：理解sequence number/acknowledge number</p><p>丢包重传：理解丢包怎么感知并重传，理解快速重传发生在什么时候</p><p>滑动窗口：课后自学</p><p>流量控制：课后自学</p><h3 id="HTTP-HTTP1-1">HTTP/HTTP1.1</h3><ul><li>HTTP比TCP好在哪里：方便</li><li>HTTP1.1的优化：长连接是重点</li></ul><p>HTTP 只是多加了一层规程，HTTP 依然是 TCP ，只是这个规则让用户更清晰</p><p>HTPP 和 TCP 的关系就和中文和军事专业语类似</p><h3 id="HTTPS">HTTPS</h3><p>加密/可靠/防劫持</p><h3 id="SSL-TLS-握手">SSL/TLS 握手</h3><p>非对称加密/对称加密</p><h1 id="刷抖音为什么又快又稳">刷抖音为什么又快又稳</h1><p>（网络架构怎么给抖音提质）</p><h2 id="网络提速">网络提速</h2><h3 id="HTTP2-0">HTTP2.0</h3><p>多路复用</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66acfabaa6c2440abbed06fa6eb1b791~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="怎么理解多路复用-stream？">怎么理解多路复用/stream？</h3><p>麻烦的对头阻塞问题</p><h3 id="QUIC-HTTP3-0">QUIC/HTTP3.0</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a4a8209ed3447cfa0bb1d3dd2d64e8b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li>为什么在用户态实现？内核的更新迭代频率较低，不好推广</li><li>为什么用UDP？TCP的队头阻塞问题不好解决，推倒重来&amp;复用所有操作系统基本都支持的底层协议</li></ul><p>除了协议优化，还能不能做路径优化呢？</p><h3 id="数据中心分布">数据中心分布</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07ff0064ed4641f78b996236c748f052~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="同运营商访问">同运营商访问</h3><p>针对中国互联网现状，通过 IP 智能解析</p><h3 id="静态资源（图片等）路径优化（CDN）">静态资源（图片等）路径优化（CDN）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b4a0cd9558f4a56b50ef233aafedd7d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>CDN静态缓存系统：边缘机房的建设，优先访问边缘机房，缓存命中视频/图片等静态内容</p><h3 id="动态API（播放-评论接口）路径优化（DSA）">动态API（播放/评论接口）路径优化（DSA）</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4967033dde7341c889f5f0f5bc7a616e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>DSA动态加速系统：分四层/七层动态加速。核心在于利用可控节点做路径探测和规划。</p><h2 id="网络稳定">网络稳定</h2><h3 id="容灾概念">容灾概念</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6233cb626a134485a28cae32397732a5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h4 id="网络容灾的具体案例一">网络容灾的具体案例一</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f4297370dee4b7bb748dedc9423d94b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>机房专线故障：环路容灾，避免某条专线故障导致机房孤岛问题（专线是连接各个机房的网络物理路径）</p><h4 id="网络容灾的具体案例二">网络容灾的具体案例二</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c7f5c495bb74964814f2929ea5a19e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>单机房接入节点故障：DNS容灾，摘除故障的节点-字节GTM系统</p><h4 id="网络容灾的具体案例三">网络容灾的具体案例三</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/704b49bdb93140f9955431f1aed225e7~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>云控容灾：云端交互，服务器/云上下发命令到终端-字节TNC系统</p><p>假如有一个机房不可用，指挥下游服务不使用该机房</p><h4 id="网络容灾的具体案例四">网络容灾的具体案例四</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db7ecf3d1f8649608fb6ff34f9a0d7db~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>cache 容灾：源站不可用，降级到之前的缓存内容-字节TLB/ByteCDN等系统的容灾建设</p><p>当发现后面不通的时候，先返回缓存的数据</p><h3 id="故障明确">故障明确</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3e5d7e5dfc64520be005d881c0e1843~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li>什么业务？什么接口故障？</li><li>故障提醒在哪里？</li><li>访问其他目标是否正常？</li><li>是否是修改导致的异常？</li></ul><h3 id="故障止损">故障止损</h3><p>先止损再排查</p><ul><li>用户体验第一</li><li>对公司收入的影响是按分钟甚至秒来算的</li></ul><p>如何止损</p><ul><li>组件没有容灾，但是系统有没有？</li><li>降级（如抖音推荐接口坏了，改为随机推送视频）</li></ul><h3 id="分段排查">分段排查</h3><p>客户端排查</p><ul><li>客户端访问其他服务没问题吗？</li><li>其他客户端访问目标服务没问题吗？</li></ul><p>服务端排查</p><ul><li>服务端监控/指标都正常吗？</li><li>手动访问一下正常吗？</li><li>分组件排查</li></ul><p>中间链路排查</p><ul><li>服务端跟客户端确保都没问题</li><li>中间网络设备有没有问题？（交换机/路由器/网关LB）</li><li>旁路的 DNS 有没有问题？</li></ul><h3 id="网络故障排查常用指令">网络故障排查常用指令</h3><ul><li>dig 查询 DNS 问题</li><li>ping/telnet/nmap 查询三层/四层连通性</li><li>Traceroute 排查中间链路</li><li>iptabels</li><li>tcpdump</li></ul><h4 id="网络故障排查案例一">网络故障排查案例一</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3e3472cb75747d792ea028c0dfd1c06~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>服务端配置异常（健康检查异常，即误摘掉了正常的服务器）</p><p>客户端异常-&gt;服务端自测正常-&gt;网关转发异常-&gt;健康检查异常</p><h4 id="网络故障排查案例二">网络故障排查案例二</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8943233b5124102890da70b553e9783~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>客户端某个例异常（客户端自己配置错误）</p><h4 id="网络故障排查案例三">网络故障排查案例三</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0027176e5204873878ecd683509fb7f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>外部运营商故障</p><p>安徽电信报障 APP 无法使用-&gt;检测后端服务正常</p><p>安徽电信流量突降-&gt;安徽电信客户端 ping  不通目标服务-&gt;电缆被挖断</p><h4 id="网络故障排查案例四">网络故障排查案例四</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8fd9767c0a2644eea2d4b9bef0f960ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>复杂故障的排查：需要抓包，具体问题具体分析</p><p>某 APP 故障-&gt;后端服务器反馈服务正常-&gt;网络转发设备异常-&gt;抓包-&gt;路由不对称</p><h3 id="故障预防很重要">故障预防很重要</h3><ul><li>监控警报</li><li>故障演练/预案</li><li>故障降级/止损</li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』集合论：二元关系</title>
      <link href="/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/"/>
      <url>/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E4%BA%8C%E5%85%83%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>本篇源于 B 站的<a href="https://www.bilibili.com/video/BV1Ma411e73u?p=6">【离散数学】3.5h让你离散数学不挂科</a>，感谢老师！</p><hr><h1 id="概念">概念</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182237549.jpg" alt=""></p><p>补充：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">L_{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 小于等于关系</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">D_{A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 整除关系</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mo lspace="0em" rspace="0em">⊆</mo></msub></mrow><annotation encoding="application/x-tex">R_{\subseteq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9285em;vertical-align:-0.2452em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2952em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mrel mtight">⊆</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2452em;"><span></span></span></span></span></span></span></span></span></span> 包含关系</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182240833.jpg" alt=""></p><p>补充：关系的运算</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>o</mi><mi>m</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">domR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>：定义域</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">ranR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">an</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>：值域</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>d</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">fldR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>：域，等于定义域并上值域</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">R^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>：R 的逆</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>∘</mo><mi>G</mi></mrow><annotation encoding="application/x-tex">F\circ G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>：复合关系</p></li></ul><p>例：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>6</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>G</mi><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F = \{&lt;3,3&gt;,&lt;6,2&gt;\},G = \{&lt;2,3&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>F</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>6</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">F^{-1} = \{&lt;3,3&gt;,&lt;2,6&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>∘</mo><mi>G</mi><mo>=</mo><mrow><mo>&lt;</mo><mn>6</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo></mrow></mrow><annotation encoding="application/x-tex">F\circ G = {&lt;6,3&gt;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span></span></span></span>（6-&gt;2-&gt;3)</li></ol><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>↾</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">R↾A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">↾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>：R 在 A 上的限制</p><p>R 中满足第一个元素，都是来源于 A 集合的有序对</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">[</mo><mi>A</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">R[A]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose">]</span></span></span></span>：A 在 R 上的像</p><p>R 中满足第一个元素，都是来源于 A 集合的有序对的第二个元素</p></li></ul><p>例：设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>2</mn><mo separator="true">,</mo><mn>4</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">R = \{&lt;1,2&gt;,&lt;1,3&gt;,&lt;2,2&gt;,&lt;2,4&gt;,&lt;3,2&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span></p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>↾</mo><mo stretchy="false">{</mo><mn>1</mn><mo stretchy="false">}</mo><mo>=</mo><mo stretchy="false">{</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo>&gt;</mo><mo separator="true">,</mo><mo>&lt;</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo>&gt;</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">R↾\{1\}=\{&lt;1,2&gt;,&lt;1,3&gt;\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">↾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">}</span></span></span></span>（第一个元素为 1 的只有这两个）</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>↾</mo><mi mathvariant="normal">∅</mi><mo>=</mo><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">R↾\emptyset =\emptyset</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8867em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">↾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">∅</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo stretchy="false">[</mo><mo stretchy="false">{</mo><mn>1</mn><mo stretchy="false">}</mo><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">{</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">R[\{1\}]= \{2,3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">[{</span><span class="mord">1</span><span class="mclose">}]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">}</span></span></span></span>（找出那两个对之后，只取第二个元素）</li></ol><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182257846.jpg" alt=""></p><p>补充：关系的性质</p><ul><li><p>自反性（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">∀x,x∈A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,x&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>）</p><p>关系图每个顶点都自成环，关系矩阵主对角元素都为 1</p></li><li><p>反自反性（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>∈</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">∀x,x∈A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">∀</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mo mathvariant="normal">∉</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,x&gt;∉R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.0556em;"></span></span></span><span class="fix"></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>）</p><p>关系图每个顶点都不自成环，关系矩阵主对角元素都为 0</p></li><li><p>对称性 symmetric <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>R</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">R^{-1} = R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p><p>关于主对角线对称，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,y&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>  -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,y&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，</p></li><li><p>反对称性 antisymmetric</p><p>关于主对角线对称的任意两对元素至多有一个 1，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi><mo>⋀</mo><mo>&lt;</mo><mi>y</mi><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mo>∈</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">&lt;x,y&gt;∈R ⋀ &lt;y,x&gt;∈R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol small-op" style="position:relative;top:0em;">⋀</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>  -&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></p></li><li><p>传递性 Transitive</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>∘</mo><mi>R</mi><mo>⊆</mo><mi>R</mi></mrow><annotation encoding="application/x-tex">R\circ R⊆R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∘</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></p></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205300854067.png" alt="B7B59CB23E9F3CA8B60FA63606D26F7F"></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205300953812.png" alt="img"></p><ul><li>（反）对称的关系图描述开头加个 如果</li><li>对称：如果连跳了两个点及以上，那一定能跳回去（非原路）</li></ul><p>注意：</p><ul><li>自反和反自反不是互斥的，可以既不是自反又不是反自反</li><li>是否对称对于是否反对称没有关系</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182259160.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182302869.jpg" alt=""></p><p>最多加到4次方</p><h1 id="等价关系和等价类">等价关系和等价类</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182310211.jpg" alt=" "></p><hr><p>未完成，空降 13:15</p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『离散数学』集合论：集合代数</title>
      <link href="/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E9%9B%86%E5%90%88%E4%BB%A3%E6%95%B0/"/>
      <url>/2022/05/18/%E3%80%8E%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E3%80%8F%E9%9B%86%E5%90%88%E8%AE%BA%EF%BC%9A%E9%9B%86%E5%90%88%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>本篇源于 B 站的<a href="https://www.bilibili.com/video/BV1Ma411e73u?p=5">【离散数学】3.5h让你离散数学不挂科</a>，感谢老师！</p><hr><h1 id="集合的基本运算">集合的基本运算</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182204568.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182206758.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182208598.jpg" alt=""></p><h1 id="集合相对（包含）的证明">集合相对（包含）的证明</h1><p>集合运算的重要恒等式</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182214334.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182214941.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182220100.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182223508.jpg" alt=""></p><h1 id="包含排斥原理">包含排斥原理</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182226775.jpg" alt=""></p><p>（集合上画一根横线是补集的意思）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182227277.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182229394.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205182230341.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L7：从需求到上线全流程</title>
      <link href="/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL7%EF%BC%9A%E4%BB%8E%E9%9C%80%E6%B1%82%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL7%EF%BC%9A%E4%BB%8E%E9%9C%80%E6%B1%82%E5%88%B0%E4%B8%8A%E7%BA%BF%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7097126973163454494#heading-36">第七节：从需求到上线全流程</a></p><p>这一节的内容是讲作为一个大企的后端人，平时的工作是怎样进行的</p><p>印象很深的地方就是按照跑火车的节奏每周先拿开会需求，开发，上线测试，再开会、开发…还是很有意思的</p><p>正经的笔记真的没时间做，下面就备份一手学习资料吧（其实也基本能囊括上课讲的内容了）</p><hr><h2 id="概述">概述</h2><p><strong>课程背景：</strong> 作为后端研发同学，在一个完整的需求交付周期内究竟要做哪些事情？在各个阶段需要跟不同的角色和平台打交道。介绍常见的研发模式和迭代流程，以实际的例子让同学感受一下后端研发的日常，能够提升大家在团队中协作的能力。</p><p><strong>课程目标：</strong></p><ol><li>提升对流程的认知</li><li>熟悉在公司大团队中协作开发</li><li>对职业生涯的日常有更直观的理解</li></ol><h2 id="课前-（必须）">课前 （必须）</h2><h3 id="词汇表">词汇表</h3><table><thead><tr><th>分类</th><th>英文</th><th>中文</th><th>解释</th></tr></thead><tbody><tr><td>研发模式</td><td>Waterfall Model</td><td>瀑布模型</td><td>瀑布模型（Waterfall Model）最早强调软件或系统开发应有完整之周期，且必须完整的经历周期之每一开发阶段，并系统化的考量分析与设计的技术、时间与资源之投入等。由于该模式强调系统开发过程需有完整的规划、分析、设计、测试及文件等管理与控制，因此能有效的确保系统质量，它已经成为软体业界大多数软件开发的最初标准</td></tr><tr><td>The Scaled Agile Framework(SAFe)</td><td>规模化敏捷框架</td><td></td><td></td></tr><tr><td>Scrum</td><td>Scrum</td><td>在软件工程中，Scrum是以经验过程为依据，采用迭代、增量的方法来提高产品开发的可预见性并控制风险的理论，Scrum不是一种过程，也不是一项构建产品的技术，而是一个框架，在Scrum框架中可以应用各种过程和技术，Scrum的作用是让开发实践方法的相对功效显现出来以便随时改进。 Scrum是敏捷(Agile)开发的一种实践模式，敏捷开发强调拥抱需求变化，快速响应不断变化的需求，并尽可能快地提供可以工作的软件产品，敏捷最强调的是可以正常工作的软件产品，文档等不是非常的强调（并非不要文档，只是需要必要的文档），敏捷理论认为面对面的沟通交流远比文档更有效。 敏捷开发的Scrum模式是以价值驱动(Value-Driven)的开发模式，即认为用户的需求并不一定需要100%实现，最重要的是将对用户最有价值的功能实现并交付.</td><td></td></tr><tr><td>流程中的概念</td><td>Scrum Master</td><td>敏捷教练</td><td>Scrum Master是Scrum教练和团队带头人，确保团队合理的运作Scrum，并帮助团队扫除实施中的障碍</td></tr><tr><td>Product Owner</td><td>产品负责人</td><td>产品负责人，确定产品的方向和愿景，定义产品发布的内容、优先级及交付时间，为产品投资回报率负责；</td><td></td></tr><tr><td>Agile Release Train</td><td>敏捷发布火车</td><td>敏捷开发的一种发布模式</td><td></td></tr><tr><td>RD</td><td>研发工程师</td><td>RD一般指Research and Development Engineer，即研发工程师。</td><td></td></tr><tr><td>PM</td><td>产品经理</td><td>产品经理</td><td></td></tr><tr><td>PRD</td><td>产品需求文档</td><td>产品需求文档</td><td></td></tr><tr><td>RD</td><td>研发工程师</td><td>RD一般指Research and Development Engineer，即研发工程师。</td><td></td></tr><tr><td>UED</td><td>交互设计师</td><td>用户体验设计师，交互设计师，界面设计师</td><td></td></tr><tr><td>QA</td><td>测试工程师</td><td>指理解产品的功能要求，并对其进行测试，检查软件有没有缺陷（Bug），测试软件是否具有稳定性（Robustness）、安全性、易操作性等性能，写出相应的测试规范和测试用例的专门工作人员。</td><td></td></tr><tr><td>Backlog</td><td>待办事项</td><td>产品订单（product backlog）是整个专案的概要文档。产品订单包括所有所需特性的粗略的描述。产品订单是关于将要生产什么样的产品。产品订单是开放的，每个人都可以编辑。产品订单包括粗略的估算，通常以天为单位。估算将帮助产品负责人衡量时程表和优先级（例如，如果&quot;增加拼写检查&quot;特性的估计需要花3天或3个月，将影响产品负责人对该特性的渴望）。 冲刺订单（sprint backlog）是大大细化了的文档，包含团队如何实现下一个冲刺的需求的信息。任务被分解为以小时为单位，没有任务可以超过16个小时。如果一个任务超过16个小时，那么它就应该被进一步分解。冲刺订单上的任务不会被分派，而是由团队成员签名认领他们喜爱的任务。</td><td></td></tr><tr><td>Grooming Meeting</td><td>Grooming会议</td><td>这个会议上面会由PO来描述下个迭代需要实现的功能，大家讨论要不要干</td><td></td></tr><tr><td>Planning Meeting</td><td>Planning会议</td><td>这个会议讨论功能具体什么时候干，要估算任务的工作量</td><td></td></tr><tr><td>基础知识</td><td>CNCF</td><td>云原生计算基金会</td><td>云原生计算是软件开发中的一种方法，它利用云计算“在现代动态环境（例如公共云、私有云和混合云）中构建和运行可扩展的应用程序”。 通过声明性代码部署的容器、微服务、无服务器功能和不可变基础设施等技术是这种架构风格的常见元素。</td></tr><tr><td>Kubernetes</td><td>K8S</td><td>生产级别的容器编排系统。Kubernetes 是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用。</td><td></td></tr><tr><td>FAAS</td><td>函数即服务</td><td>函数即服务。仅通过编写函数（function）就能够发布为一个 API 或者服务，实现业务功能的技术体系。由于处理单元为函数粒度，往往底层也能够支持自动扩缩容地更精细化使用计算资源，开发侧支持事件驱动，可由消息或多种 Hook 触发，同时拥有快速上线、按需付费等优点。</td><td></td></tr><tr><td>APAAS</td><td>平台即服务</td><td>是一个为应用程序服务提供开发和部署环境的云服务</td><td></td></tr><tr><td>IDE</td><td>IDE</td><td>用于提供程序开发环境的应用程序。一般包括代码编辑器、编译器、调试器和图形用户界面等工具</td><td></td></tr><tr><td>Git</td><td>Git</td><td>分布式的版本管理系统</td><td></td></tr><tr><td>Merge/Rebase</td><td>合并/变基</td><td>处理代码分支的操作，将不同的分支整合成一个的两种方式</td><td></td></tr></tbody></table><h2 id="课中">课中</h2><h3 id="1-为什么要有流程">1. 为什么要有流程</h3><h4 id="团队规模和流程的关系">团队规模和流程的关系</h4><p>随着团队规模和问题复杂度的上升，一个人搞定一切就不可能了，超过了一个人，就需要进行团队协作，自然也就需要有流程。<br>常见的协作模式：</p><ul><li>瀑布模型 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ffdaa2f4cf648028e1534f8f811462f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></li><li>敏捷开发 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a8226ec557a452d976bf34b0cbe0a29~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></li><li>规模化敏捷</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd79b20834984f308934378ef3dcc64a~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h4 id="后端的定位">后端的定位</h4><ul><li>瀑布模式<ul><li>按照时间节点参与会议，产出文档（系统分析，概要设计，详细设计，接口文档，提测文档等）</li><li>按照时间节点交付测试</li><li>按照时间节点发布</li></ul></li><li>敏捷团队<ul><li>跟随迭代制定规划，进行开发</li><li>参与待办事项整理会议（Backlog Grooming Meeting）<ul><li>PO描述下个迭代希望实现的用户故事</li></ul></li><li>迭代计划会议（Sprint Planning Meeting）<ul><li>选择迭代的任务和估算工作量</li></ul></li><li>每日站会（Standup Meeting）<ul><li>昨天你做了什么?</li><li>今天你将要做什么?</li><li>你有需要帮助的地方吗?</li></ul></li><li>评审会（Retrospective Meeting）<ul><li>小组向产品负责人展示迭代工作结果</li></ul></li><li>反思会（Retrospective Meeting）<ul><li>在每个迭代后召开简短的反思会，总结哪些事情做得好，哪些事情做得不好</li></ul></li></ul></li></ul><h4 id="团队协作">团队协作</h4><p>一个具体的迭代时间表：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b82fefa85cd94b60be71e920121ee6f8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="2-有哪些流程">2. 有哪些流程</h3><h4 id="需求阶段">需求阶段</h4><ul><li><p>不要浪费时间讨论不应该存在的问题</p></li><li><p>站在用户的角度思考</p></li><li><p>给出后端系统视角的建议，估算任务优先级</p></li></ul><h4 id="开发阶段">开发阶段</h4><ul><li><p>云原生下的开发：</p><ul><li>容器化技术</li><li>微服务技术</li><li>WebIDE</li></ul></li><li><p>团队分支策略：</p><ul><li>为什么会有分支策略</li><li>有哪些分支策略</li><li>合并的方式</li></ul></li><li><p>代码规范</p><ul><li>养成良好的注释习惯，超过三个月的代码，自己都会忘了当时在想什么</li><li>不要有魔法数字，魔法字符串</li><li>重复的逻辑抽象成公共的方法，不要copy代码</li><li>正确使用IDE的重构功能，防止修改错误</li></ul></li><li><p>自测</p><ul><li>单元测试</li><li>功能环境测试</li><li>测试数据构造</li></ul></li><li><p>文档</p><ul><li>大型改造需要有技术设计文档，方案评审</li><li>好的接口文档能更方便的和前端进行沟通</li></ul></li></ul><h4 id="测试阶段">测试阶段</h4><ul><li>功能测试</li></ul><p>功能测试，是为了测试一个新开发的功能，因此需要有能模拟线上的开发和测试环境，环境之间能相互隔离，这样可以独立验证不同的新功能</p><ul><li><p>集成测试：集成测试，是为了把几个功能合在一起测试，因为可能各个新功能独立测试没有问题，但是合在一起却产生了bug</p></li><li><p>回归测试：回归测试是为了验证老的功能不被新的改动影响</p></li></ul><h4 id="发布阶段">发布阶段</h4><ul><li><p>各种发布模式</p><ul><li>蛮力发布：简单粗暴，直接用新版本覆盖老版本。</li><li>金丝雀发布：由于金丝雀对瓦斯极其敏感，因此以前矿工开矿下矿洞前，先会放一只金丝雀进去探是否有有毒气体，看金丝雀能否活下来，金丝雀发布由此得名。</li><li>滚动发布：每个实例都通过金丝雀的方式逐步放大流量，对用户影响小，体验平滑</li><li>蓝绿发布：常备两个集群，先把流量全部切换到Group 1，升级Group2，然后再把流量全部切换到Group 2，升级Group 1。最终恢复流量。</li><li>红黑发布：与蓝绿发布类似，但是日常只有一个集群工作，发布时扩容一个集群升级新版本，切换流量后下掉老版本的集群。</li></ul></li><li><p>发布过程要做的事</p><ul><li>发布负责人<ul><li>负责按照计划执行发布</li><li>需要通知各个相关人员发布进展</li><li>观察各个服务的发布状态，及时处理异常</li></ul></li><li>变更服务的相关RD<ul><li>按照上线checklist检查服务的日志，监控，响应上线过程中的告警</li><li>对于自己负责的改动，在小流量或者是预览环境进行功能验证</li><li>执行发布计划中的其他操作（如线上配置，数据处理等）</li></ul></li><li>值班同学<ul><li>发布过程中的监控和告警需要特别关注，如果有异常需要立刻判断是否由变更引起</li><li>如果有变更引起的告警或者用户反馈，需要及时中止发布</li></ul></li></ul></li></ul><h4 id="运维阶段">运维阶段</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/858f17e23c734576800edc150bf87095~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="3-怎样执行流程">3. 怎样执行流程</h3><h4 id="DevOps-2">DevOps</h4><ul><li>效率竖井<ul><li>流程中实际产生价值的部分很短</li><li>大量的时间用在等待和传递上</li><li>人和人之间的沟通很慢</li></ul></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c12374129f8d4c11a2a07b74bd6ed511~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li>DevOps解决方案<ul><li>代码管理</li><li>自动化测试</li><li>持续集成</li><li>持续交付</li></ul></li></ul><h4 id="全流程自动化">全流程自动化</h4><ul><li><p>通过效能平台串联各个阶段</p><ul><li>需求发起研发流程的自动化</li><li>写代码，测试环境部署的自动化</li><li>自动化测试触发和报告分析</li><li>发布过程可观测融入流程</li></ul></li><li><p>减少无价值的等待</p><ul><li>分析整个流程的耗时，计算真正产生价值的时间</li><li>不断优化流程，让有价值的流程时间占比上升</li></ul></li></ul><h2 id="参考文献">参考文献</h2><ol><li><p>瀑布模型 <a href="https://link.juejin.cn?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2F%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B">zh.wikipedia.org/wiki/%E7%80…</a></p></li><li><p>Scrum: <a href="https://link.juejin.cn?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2FScrum">zh.wikipedia.org/wiki/Scrum</a></p></li><li><p>SAFe：</p><p>a.  <a href="https://link.juejin.cn?target=http%3A%2F%2Fwww.woshipm.com%2Fpd%2F4331832.html">www.woshipm.com/pd/4331832.…</a><br>b.  <a href="https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FScaled_agile_framework">en.wikipedia.org/wiki/Scaled…</a></p></li><li><p>CNCF：<a href="https://link.juejin.cn?target=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FCloud_Native_Computing_Foundation">en.wikipedia.org/wiki/Cloud_…</a></p></li><li><p>常用的发布模式：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cnblogs.com%2FLeo_wl%2Fp%2F14395960.html">www.cnblogs.com/Leo_wl/p/14…</a></p></li></ol><p>作者：青训营官方账号<br>链接：<a href="https://juejin.cn/post/7097126973163454494">https://juejin.cn/post/7097126973163454494</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L6：实战项目 - Go 语言笔记服务</title>
      <link href="/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL6%EF%BC%9A%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-Go-%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/05/18/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL6%EF%BC%9A%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE-Go-%E8%AF%AD%E8%A8%80%E7%AC%94%E8%AE%B0%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7095977466094682148#heading-31">第六节：实战项目 - Go 语言笔记服务</a></p><blockquote><p>讲得内容就是大概地过了一下这个项目，因为内容太多就把学习手册贴这了</p></blockquote><p>这个项目用到了很多新东西，例如RPC 框架， kitex 和链路追踪</p><p>我基本上是走马观花地看了一下，真要掌握还得自己写一遍</p><hr><h2 id="一、课程背景与目标">一、课程背景与目标</h2><h3 id="课程背景">课程背景</h3><p>在大家已经学完前 5节 Go 原理与实践课程的基础上，通过项目实战帮助大家把前面学过的知识应用起来</p><h3 id="课程目标">课程目标</h3><ul><li><p>将前面所学的知识应用到项目中</p></li><li><p>熟悉项目的代码,可以将项目正常运行</p></li><li><p>熟悉 Kitex/Gorm 的使用</p></li></ul><h2 id="二、课前了解">二、课前了解</h2><h3 id="安装-Docker-Postman-Git">安装 Docker/Postman/Git</h3><ul><li><p>安装 Minikube 或 Docker Desktop <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.runoob.com%2Fdocker%2Fwindows-docker-install.html">安装教程</a></p></li><li><p>可以使用 Minikube 或者使用 Docker Desktop 启动 Docker</p></li><li><p>安装 Postman</p></li><li><p>安装 Git <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F896043488029600%2F896067074338496">安装教程</a></p></li></ul><h3 id="Kitex-初体验">Kitex 初体验</h3><p>通过阅读 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Fgetting-started%2F">www.cloudwego.io/zh/docs/kit…</a> 尝试运行 Kitex 的示例代码</p><ul><li>kitex 暂时没有针对 Windows 做支持，如果本地开发环境是 Windows 建议使用 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.microsoft.com%2Fzh-cn%2Fwindows%2Fwsl%2Finstall">WSL2</a></li></ul><h3 id="Gorm-初体验">Gorm 初体验</h3><p>通过阅读 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.cn%2Fdocs%2F%23Install">gorm.cn/docs/#Insta…</a> 尝试运行 Gorm 的示例代码</p><h3 id="了解-Etcd和Opentracing">了解 Etcd和Opentracing</h3><p>了解 etcd 是什么以及 opentracing 是什么</p><h2 id="三、项目介绍">三、项目介绍</h2><h3 id="项目简介">项目简介</h3><p>EasyNote 提供了一套比较完整的笔记后端API服务.</p><ul><li>项目地址 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note">github.com/cloudwego/k…</a></li><li>推荐版本 Golang &gt;= 1.15</li></ul><h3 id="项目模块介绍">项目模块介绍</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25a16f24fd4c48ed8915248b31bd0d6f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目服务调用关系">项目服务调用关系</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c529157fd88a48bd88819533ca3b54a3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目模块功能介绍">项目模块功能介绍</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/963cc2ac9eb5405e8ab916606a1f7a03~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目技术栈">项目技术栈</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/412c9fc35e4c478e95deb585ddf21f75~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt="image.png"></p><h3 id="项目相关的使用框架资料">项目相关的使用框架资料</h3><table><thead><tr><th></th><th></th><th>框架文档地址</th><th>github地址</th><th>拓展文档</th></tr></thead><tbody><tr><td>RPC框架Kitex</td><td>框架文档</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Foverview%2F">www.cloudwego.io/zh/docs/kit…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex">github.com/cloudwego/k…</a></td><td></td></tr><tr><td>Kitex-etcd扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Fregistry-etcd">github.com/kitex-contr…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Fregistry-etcd">github.com/kitex-contr…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fregistry%2F">www.cloudwego.io/zh/docs/kit…</a><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fservice_discovery%2F">www.cloudwego.io/zh/docs/kit…</a></td><td></td></tr><tr><td>Kitex-OpenTracing扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fservice-governance%2Ftracing%2F">www.cloudwego.io/zh/docs/kit…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Ftracer-opentracing">github.com/kitex-contr…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fmiddleware%2F">www.cloudwego.io/zh/docs/kit…</a></td><td></td></tr><tr><td>ORM框架Gorm</td><td>框架</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.cn%2Fzh_CN%2F">gorm.cn/zh_CN/</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fgorm">github.com/go-gorm/gor…</a></td><td></td></tr><tr><td>Gorm-Opentracing扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fopentracing">github.com/go-gorm/ope…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fopentracing">github.com/go-gorm/ope…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.cn%2Fzh_CN%2Fdocs%2Fwrite_plugins.html">gorm.cn/zh_CN/docs/…</a></td><td></td></tr><tr><td>HTTP框架Gin</td><td>框架</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin%23gin-web-framework">github.com/gin-gonic/g…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin">github.com/gin-gonic/g…</a></td><td></td></tr><tr><td>Gin-JWT扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fappleboy%2Fgin-jwt%23usage">github.com/appleboy/gi…</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fappleboy%2Fgin-jwt">github.com/appleboy/gi…</a></td><td></td><td></td></tr></tbody></table><h2 id="四、项目代码介绍">四、项目代码介绍</h2><h3 id="项目代码目录结构介绍">项目代码目录结构介绍</h3><table><thead><tr><th><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fidl">idl</a></th><th><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Fblob%2Fmain%2Fbizdemo%2Feasy_note%2Fidl%2Fnote.thrift">thrift</a> / <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Fblob%2Fmain%2Fbizdemo%2Feasy_note%2Fidl%2Fuser.proto">proto</a> 接口定义文件</th><th></th><th>文档/子目录介绍</th></tr></thead><tbody><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fkitex_gen">kitex_gen</a></td><td>Kitex自动生成的代码</td><td></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg">pkg</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Fconstants">constants</a></td><td>常量</td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Ferrno">errno</a></td><td>错误码</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex%2Fdiscussions%2F248">关于错误码的讨论</a></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Fmiddleware">middleware</a></td><td>Kitex的中间件</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Fmiddleware%2F">Kitex Middleware 扩展</a></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Fbound">bound</a></td><td>Kitex Transport Pipeline-Bound 扩展</td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2Ftutorials%2Fframework-exten%2Ftrans_pipeline%2F">什么是Kitex的Transport Pipeline-Bound 扩展</a></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fpkg%2Ftracer">tracer</a></td><td>Jarger 初始化</td><td></td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd">cmd</a></td><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd%2Fapi">api</a></td><td>demoapi服务的业务代码</td><td>handlers : 封装了 api 的业务逻辑rpc : 封装了调用其它 rpc 服务的逻辑</td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd%2Fnote">note</a></td><td>demonote服务的业务代码</td><td>dal : 封装了数据库的访问逻辑service: 封装了业务逻辑rpc : 封装了调用其它 rpc 服务的逻辑pack : 数据打包/处理</td><td></td></tr><tr><td><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex-examples%2Ftree%2Fmain%2Fbizdemo%2Feasy_note%2Fcmd%2Fuser">user</a></td><td>demouser服务的业务代码</td><td></td><td></td></tr></tbody></table><h3 id="项目运行">项目运行</h3><h4 id="运行基础依赖">运行基础依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>执行上述命令启动 MySQL、Etcd、Jaeger 的 docker 镜像</p><h4 id="运行-demonote-服务">运行 demonote 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd cmd/note </span><br><span class="line">sh build.sh </span><br><span class="line">sh output/bootstrap.sh</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="运行-demouser-服务">运行 demouser 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd cmd/user </span><br><span class="line">sh build.sh </span><br><span class="line">sh output/bootstrap.sh</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h4 id="运行-demoapi-服务">运行 demoapi 服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd cmd/api </span><br><span class="line">chmod +x run.sh </span><br><span class="line">./run.sh</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="参考文档">参考文档</h2><ul><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.cloudwego.io%2Fzh%2Fdocs%2Fkitex%2F">www.cloudwego.io/zh/docs/kit…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Fregistry-etcd">github.com/kitex-contr…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fkitex-contrib%2Ftracer-opentracing">github.com/kitex-contr…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fcloudwego%2Fkitex">github.com/cloudwego/k…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgorm.io%2Fdocs%2Findex.html">gorm.io/docs/index.…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fgorm">github.com/go-gorm/gor…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgo-gorm%2Fopentracing">github.com/go-gorm/ope…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fgin-gonic%2Fgin">github.com/gin-gonic/g…</a></p></li><li><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fappleboy%2Fgin-jwt">github.com/appleboy/gi…</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法拾遗』问题规模与时间复杂度</title>
      <link href="/2022/05/17/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E9%97%AE%E9%A2%98%E8%A7%84%E6%A8%A1%E4%B8%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2022/05/17/%E3%80%8E%E7%AE%97%E6%B3%95%E6%8B%BE%E9%81%97%E3%80%8F%E9%97%AE%E9%A2%98%E8%A7%84%E6%A8%A1%E4%B8%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇节选于《算法竞赛：从入门到进阶》第二章：算法复杂度</p></blockquote><p>竞赛题目的限制时间一般是 1s ，目前普通计算机的计算速度是每秒千万次，故可推导出以下结论</p><table><thead><tr><th>算法的时间复杂度</th><th>能解决的最大问题规模</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11</mn></mrow><annotation encoding="application/x-tex">11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11</span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>25</mn></mrow><annotation encoding="application/x-tex">25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">25</span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5000</mn></mrow><annotation encoding="application/x-tex">5000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5000</span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log _{2}n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">10^{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^{7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span></span></td></tr><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log _{2}n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td>&gt; <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">10^{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
          <category> 算法拾遗 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L5：设计模式之 Database/SQL 与 GORM 实践</title>
      <link href="/2022/05/15/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL5%EF%BC%9A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-Database-SQL-%E4%B8%8E-GORM-%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/15/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL5%EF%BC%9A%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-Database-SQL-%E4%B8%8E-GORM-%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7095977466094682148/#heading-26">【Go 语言原理与实践学习资料（下）】第三届字节跳动青训营 - 后端专场</a></p><blockquote><p>本节课讲得东西很多，然后我太菜很多东西都听不懂，所以还是建议去看原视频吧 ☺️</p></blockquote><h1 id="理解-Database-SQL">理解 Database/SQL</h1><p>目标：通过统一的接口去操作不一样的数据库</p><p>Database/SQL 是一个在应用程序和数据库的中间层，暴露给应用的接口是相同的，只需更改连接接口和操作接口就可以连接不同的数据库</p><h1 id="GORM-使用简介">GORM 使用简介</h1><blockquote><p>设计简洁、功能强大、自由扩展的全功能 ORM</p></blockquote><h1 id="GORM-设计原理">GORM 设计原理</h1><h1 id="GORM-最佳实践">GORM 最佳实践</h1>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L4：高性能 Go 语言发行版优化与落地实践</title>
      <link href="/2022/05/14/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL4%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD-Go-%E8%AF%AD%E8%A8%80%E5%8F%91%E8%A1%8C%E7%89%88%E4%BC%98%E5%8C%96%E4%B8%8E%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/14/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL4%EF%BC%9A%E9%AB%98%E6%80%A7%E8%83%BD-Go-%E8%AF%AD%E8%A8%80%E5%8F%91%E8%A1%8C%E7%89%88%E4%BC%98%E5%8C%96%E4%B8%8E%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p><a href="https://juejin.cn/post/7095977466094682148/#heading-18">【Go 语言原理与实践学习资料（下）】第三届字节跳动青训营 - 后端专场</a></p></div></details><h1 id="自动内存管理">自动内存管理</h1><p>降低开发负担、解决安全性问题</p><p>三个任务：</p><ul><li>为对象分配空间</li><li>找到存活对象</li><li>回收死亡对象的内存空间</li></ul><h2 id="相关概念">相关概念</h2><h3 id="名词">名词</h3><p><code>Mutator</code>: 业务线程，分配新对象，修改对象指向关系（用户启动的线程）</p><p><code>Collector</code>: GC 线程，找到存活对象，回收死亡对象的内存空间</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19e835280f594639bf88ce65655de69b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p><code>Serial GC</code>: 只有一个 collector（暂停所有 Mutator ，回收后再继续运行）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/089ec51585cd4d4aa11f294095ae6979~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p><code>Parallel GC</code>: 并行 GC，支持多个 collectors 同时回收的 GC 算法（暂停时多个有多个回收线程）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/569c278f98a746d3ae97cd8ddff6a213~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p><code>Concurrent GC</code>: 并发 GC，支持 mutator(s) 和 collector(s) <strong>同时执行</strong>的 GC 算法</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/279daa762d0149fc856a937972442340~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><ul><li><p><strong>Collectors 必须感知对象指向关系的改变！</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f893e75e31844c19bfbd820acd523eff~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p></li></ul><h3 id="评价-GC-算法">评价 GC 算法</h3><ul><li>安全（不能回收存活的对象）</li><li>吞吐率（花在 GC 上的时间）</li><li>暂停时间</li><li>内存开销</li></ul><h2 id="算法1：-追踪垃圾回收">算法1： 追踪垃圾回收</h2><p>对象被回收的条件：指针指向关系不可达的对象</p><p>从根对象出发，遍历并标记所有可达的对象，最后清理剩下的对象</p><p>清理的策略：</p><ul><li><p>Copying GC ：把存活的对象分配到其他空间</p></li><li><p>Mark-sweep GC： 将死亡对象的内存标记为可分配</p></li><li><p>Mark-compact GC： 原地移动整理存活对象</p></li><li><p>分代 GC （Generational GC）</p><p>基于事实：很多对象分配出来后很快就不再使用了</p><p>每个对象都有年龄：经过 GC 的次数</p><p>然后把老的和年轻的分开，制定不同的 GC 策略</p><ul><li>年轻代<ul><li>由于存活对象很少，可以采用 Copying GC</li><li>吞吐率高</li></ul></li><li>老年代<ul><li>趋于一直活着，反复复制开销大</li><li>可采用 Mark-compact GC</li></ul></li></ul></li></ul><h2 id="算法2：引用计数">算法2：引用计数</h2><ul><li><p>每个对象都有一个与之关联的引用数目</p></li><li><p>对象存活的条件：当且仅当引用数大于 0</p></li><li><p>优点</p><ul><li>内存管理的操作被<strong>平摊到程序运行中</strong>：指针传递的过程中进行引用计数的增减</li><li>不需要了解 runtime 的细节：因为不需要标记 GC roots，因此不需要知道哪里是全局变量、线程栈等</li></ul></li><li><p>缺点</p><ul><li>开销大，因为对象可能会被多线程访问，对引用计数的修改需要<strong>原子操作</strong>保证<strong>原子性</strong>和<strong>可见性</strong></li><li>无法回收环形数据结构</li><li>每个对象都引入额外存储空间存储引用计数</li><li>虽然引用计数的操作被平摊到程序运行过程中，但是回收大的数据结构依然可能引发暂停</li></ul></li></ul><h1 id="Go-内存管理及优化">Go 内存管理及优化</h1><h2 id="Go-内存分配策略">Go 内存分配策略</h2><h3 id="策略1：分块">策略1：分块</h3><p>Go 会提前将<strong>内存分块</strong></p><ul><li>调用系统调用 mmap() 向 OS 申请一大块内存，例如 4 MB</li><li>先将内存划分成大块，例如 8 KB，称作 mspan</li><li>再将大块继续划分成<strong>特定大小</strong>的小块，用于对象分配</li><li>noscan mspan: 分配不包含指针的对象 —— GC 不需要扫描</li><li>scan mspan: 分配包含指针的对象 —— GC 需要扫描</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b7e176dac544c5e87e073c7508fa15d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><p>根据对象的大小，选择最合适的块分配</p><h3 id="策略2：缓存">策略2：缓存</h3><p>根据对象的大小，在 mcache 上分配</p><p>如果分不了，就找下一层 mcentral ，分配好后与 mcache 中的相同大小块交换（毕竟年轻代用的多）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/abd17ddd80514e18a9045fbdc66af1d1~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h3 id="Go-内存管理的问题">Go 内存管理的问题</h3><ul><li>对象分配是<strong>非常高频</strong>的操作：每秒分配 GB 级别的内存</li><li>线上 profiling 发现，Go 的内存分配占用很多 CPU</li><li>小对象分配占大多数</li></ul><h2 id="字节跳动的优化方案：Balanced-GC">字节跳动的优化方案：Balanced GC</h2><p>针对小于 128B 的对象的优化算法，自己直接改 Go SDK</p><p>本质：将多个小对象的分配合并成一次大对象的分配</p><p>每一个 g 都分配一个 GAB ，然后在 GAB 中分配小对象</p><p>问题：只要 GAB 里有一个对象是存活的，那么这个大对象会一直占内存</p><p>解决方法：当 GAB 大小超过阈值后，将 GAB 中存活的对象复制到另外的 GAB 中，原 GAB 释放（使用 copying GC 的算法管理小对象）</p><h1 id="编译器和静态分析">编译器和静态分析</h1><h2 id="编译器的结构">编译器的结构</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29d0d8e5f3344325a7869e363c1ad42e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p><h2 id="静态分析">静态分析</h2><p>不执行代码，推导程序的行为，分析程序的性质</p><ul><li>控制流：程序执行的流程</li><li>数据流：数据在控制流上的传递</li></ul><p>通过分析两个流得到性质，优化代码</p><h3 id="过程内分析和过程间分析">过程内分析和过程间分析</h3><ul><li><p>内分析：在函数内进行控制流和数据流的分析</p></li><li><p>间分析：除了函数内的分析，还需要考虑跨函数的数据流和控制流，例如参数传递，函数返回值等</p></li></ul><h1 id="Go-编译器优化">Go 编译器优化</h1><ul><li><p>目的</p><ul><li><p>用户无感知，重新编译即可获得性能收益</p></li><li><p>通用的优化手段</p></li></ul></li><li><p>现状</p><ul><li><p>采用的优化较少</p></li><li><p>追求编译时间短，因此没有进行复杂的代码分析和优化</p></li></ul></li><li><p>思路</p><ul><li><p>面向后端长期执行的任务</p></li><li><p>用适当增加编译时间换取更高性能的代码</p></li></ul></li></ul><h2 id="函数内联">函数内联</h2><p>将被调用函数的函数体的副本替换到调用位置上，同时重写代码以反映参数的绑定</p><p>（鄙人感觉和 C 中的 inline 一模一样）</p><ul><li><p>优点</p><ul><li>消除调用开销</li><li>将过程间分析的问题转换为过程内分析，帮助其他分析</li></ul></li><li><p>缺点</p><ul><li>函数体变大</li><li>编译生成的 Go 镜像文件变大</li></ul></li></ul><h2 id="逃逸分析">逃逸分析</h2><p>分析代码中指针的动态作用域：指针在何处可以被访问</p><p>大致思路：</p><ul><li>从对象分配处出发，沿着控制流，观察数据流。若发现指针 p 在当前作用域 s:<ul><li>作为参数传递给其他函数；</li><li>传递给全局变量；</li><li>传递给其他的 goroutine;</li><li>传递给已逃逸的指针指向的对象；</li></ul></li><li>则指针 p 逃逸出 s，反之则没有逃逸出 s.</li></ul><h2 id="字节跳动的优化方案：Beast-Mode">字节跳动的优化方案：Beast Mode</h2><ul><li><p>修改了内联策略，让更多函数被内联</p></li><li><p>增加了其他优化的机会：逃逸分析</p></li><li><p>开销：文件更大，耗时更多</p></li><li><p>未逃逸出当前函数的指针指向的对象可以在栈上分配</p><ul><li><p>对象在栈上分配和回收很快：移动 sp 即可完成内存的分配和回收；</p></li><li><p>减少在堆上分配对象，降低 GC 负担。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L3：高质量编程与性能调优实战</title>
      <link href="/2022/05/11/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL3%EF%BC%9A%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/"/>
      <url>/2022/05/11/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL3%EF%BC%9A%E9%AB%98%E8%B4%A8%E9%87%8F%E7%BC%96%E7%A8%8B%E4%B8%8E%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p>配套实例代码：<a href="https://github.com/wolfogre/go-pprof-practice">https://github.com/wolfogre/go-pprof-practice</a></p><p><a href="https://juejin.cn/post/7093721879462019102/#heading-16">【Go 语言原理与实践学习资料（上）】第三届字节跳动青训营 - 后端专场</a></p></div></details><p>前情提要：</p><ul><li></li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/551a67231c244f4aad77cbaabc10e2cf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?" alt=""></p><h1 id="高质量编程">高质量编程</h1><h2 id="高质量编程简介">高质量编程简介</h2><p>什么是高质量：编写的代码能够达到正确可靠、简洁清晰的目标</p><ul><li>各种边界条件是否考虑完备</li><li>异常情况处理，稳定性保证</li><li>易读易维护</li></ul><p>编程原则：</p><ul><li>简单性</li><li>可读性</li><li>团队生产力</li></ul><h2 id="编码规范">编码规范</h2><p>如何编写高质量 Go 代码</p><ul><li>代码格式</li><li>注释</li><li>命名规范</li><li>控制流程</li><li>错误和异常处理</li></ul><h3 id="代码格式">代码格式</h3><p>推荐使用 gofmt 等工具自动格式化代码</p><h4 id="gofmt">gofmt</h4><p>官方的自动格式化工具</p><h4 id="goimports">goimports</h4><p>能自动控制库的引用</p><h3 id="注释-3">注释</h3><h4 id="注释应该做的">注释应该做的</h4><ul><li><p>解释代码作用（适合注释公共符号）</p></li><li><p>解释代码是如何做的（适合注释实现过程）</p></li><li><p>解释代码实现的原因（适合解释代码的外部因素，提供额外上下文）</p></li><li><p>解释代码什么情况会出错（适合解释代码的限制条件）</p></li><li><p>公共符号始终要注释</p><ul><li>包中声明的每个公共的符号：变量、常量、函数以及结构都需要添加注释</li><li>任何既不明显也不简短的公共功能必须予以注释</li><li>无论长度或复杂程度如何，对库中的任何函数必须进行注释</li></ul></li></ul><p>有一个例外，不需要注释实现接口的方法</p><h4 id="小结-4">小结</h4><ul><li>代码是最好的注释</li><li>注释应该提供代码未表达出的上下文信息</li></ul><h3 id="命名">命名</h3><h4 id="variable">variable</h4><ul><li><p>简洁胜于冗长</p></li><li><p>缩略词全大写，但当其位于变量开头且不需要导出时，使用全小写</p><ul><li>例如使用 <code>ServeHTTP</code> 而不是 <code>ServeHttp</code></li><li>使用 <code>XMLHTTPRequest</code> 或者 <code>xmlHTTPRequest</code></li></ul></li><li><p>变量距离其被使用的地方越远，则需要携带越多的上下文信息</p></li><li><p>全局变量在其名字中需要更多的上下文信息，使得在不同地方可以轻易辨认出其含义</p></li></ul><h4 id="function">function</h4><ul><li>函数名不携带包名的上下文信息，因为包名和函数名总是成对出现的</li><li>函数名尽量简短</li><li>当名为 foo 的包某个函数返回类型 Foo 时，可以省略类型信息而不导致歧义</li><li>当名为 foo 的包某个函数返回类型 T 时（T 并不是 Foo），可以在函数名中加入类型信息</li></ul><h4 id="package">package</h4><ul><li>只由小写字母组成。不包含大写字母和下划线等字符</li><li>简短并包含一定的上下文信息。例如 schema、task 等</li><li>不要与标准库同名。例如不要使用 sync 或者 strings</li></ul><p>尽量满足的规则：</p><ul><li>不使用变量名作为包名</li><li>使用单数而不是复数</li><li>谨慎使用缩写</li></ul><h4 id="小结-5">小结</h4><ul><li>核心目标是降低阅读理解代码的成本</li><li>重点考虑上下文信息，设计简洁清晰的名称</li></ul><h3 id="控制流程">控制流程</h3><ul><li><p>避免嵌套，保持正常流程清晰</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="keyword">if</span> foo &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="keyword">if</span> foo &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure></li><li><p>尽量保持正常代码路径为最小缩进</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bad</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OneFunc</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    err := doSomething()</span><br><span class="line">    <span class="keyword">if</span> err := <span class="literal">nil</span> &#123;</span><br><span class="line">        err := doAnotherThing()</span><br><span class="line">        <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Good</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OneFunc</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := doSomething(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> err := doAnotherThing(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结</p><ul><li><p>线性原理，处理逻辑尽量走直线，避免复杂的嵌套分支</p></li><li><p>提高代码的可读性</p></li></ul></li></ul><h3 id="错误与异常处理">错误与异常处理</h3><h4 id="简单错误">简单错误</h4><p>简单错误指仅出现一次的错误，且在其他地方不需要捕获该错误</p><p>优先使用 errors.New 创建匿名变量来直接表示简单错误</p><p>如果有格式化的需求，使用 fmt.Error</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/net/http/client.go#L802</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">defaultCheckRedirect</span><span class="params">(req *Request, via []*Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(via) &gt;= <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;stopped after 10 redirects&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误的-Wrap-和-Unwrap">错误的 Wrap 和 Unwrap</h4><p>将一个 error 嵌套进另一个 error 中，从而生成一个 error 的跟踪链</p><p>从 Go1.13 后，可以在 <code>fmt.Errorf</code> 中使用 <code>%w</code> 关键字来将一个错误 wrap 至其错误链中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/cmd/go/internal/work/exec.go#L983</span></span><br><span class="line">list, _, err := c.GetBytes(cache.Subkey(a.actionID, <span class="string">&quot;srcfiles&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;reading srcfiles list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误判定">错误判定</h4><ul><li><p>使用 <code>errors.Is</code> 可以判定错误链上的所有错误是否含有特定的错误</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/cmd/go/internal/modfetch/sumdb.go#L208</span></span><br><span class="line">data, err = lockedfile.Read(targ)</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, fs.ErrNotExist) &#123;</span><br><span class="line"><span class="comment">// Treat non-existent as empty, to bootstrap the &quot;latest&quot; file</span></span><br><span class="line"><span class="comment">// the first time we connect to a given database.</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在错误链上获取特定种类的错误，使用 <code>errors.As</code></p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/golang/go/blob/master/src/errors/wrap_test.go#L255</span></span><br><span class="line"><span class="keyword">if</span> _, err := os.Open(<span class="string">&quot;non-existing&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> pathError *fs.PathError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;pathError) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Failed at path:&quot;</span>, pathError.Path)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="panic">panic</h4><ul><li>不建议在业务代码中使用 panic</li><li>如果当前 goroutine 中所有 deferred 函数都不包含 recover 就会造成整个程序崩溃</li><li>当程序启动阶段发生不可逆转的错误时，可以在 init 或 main 函数中使用 panic</li></ul><h4 id="recover">recover</h4><ul><li>recover 只能在被 defer 的函数中使用，嵌套无法生效，只在当前 goroutine 生效</li><li>如果需要更多的上下文信息，可以 recover 后在 log 中记录当前的调用栈。</li></ul><h2 id="性能优化建议">性能优化建议</h2><h3 id="Slice">Slice</h3><ul><li>在尽可能的情况下，在使用 make() 初始化切片时提供容量信息，特别是在追加切片时</li><li>在已有切片的基础上进行切片，不会创建新的底层数组。因为原来的底层数组没有发生变化，内存会一直占用，直到没有变量引用该数组。因此很可能出现这么一种情况，原切片由大量的元素构成，但是我们在原切片的基础上切片，虽然只使用了很小一段，但底层数组在内存中仍然占据了大量空间，得不到释放。推荐的做法，使用 copy 替代 re-slice</li></ul><h3 id="Map-2">Map</h3><p>和 Slice 一样，应该根据实际需求提前预估好需要的空间</p><h3 id="字符串处理">字符串处理</h3><ul><li><p>常见的字符串拼接方式</p><ul><li><code>+</code></li><li><code>strings.Builder</code></li><li><code>bytes.Buffer</code></li></ul></li><li><p><code>strings.Builder</code> 最快，<code>bytes.Buffer</code> 较快，<code>+</code> 最慢</p></li><li><p>原理</p><ul><li><p>字符串在 Go 语言中是不可变类型，占用内存大小是固定的，当使用 + 拼接 2 个字符串时，生成一个新的字符串，那么就需要开辟一段新的空间，新空间的大小是原来两个字符串的大小之和</p></li><li><p>strings.Builder，bytes.Buffer 的内存是以倍数申请的</p></li><li><p>strings.Builder 和 bytes.Buffer 底层都是 []byte 数组，bytes.Buffer 转化为字符串时重新申请了一块空间，存放生成的字符串变量，而 strings.Builder 直接将底层的 []byte 转换成了字符串类型返回</p></li></ul></li></ul><h3 id="空结构体">空结构体</h3><ul><li>空结构体不占据内存空间，可作为占位符使用</li><li>比如实现简单的 Set<ul><li>Go 语言标准库没有提供 Set 的实现，通常使用 map 来代替。对于集合场景，只需要用到 map 的键而不需要值</li></ul></li></ul><h3 id="atomic-包">atomic 包</h3><p>对于变量来说，建议使用 <code>atomic</code> 来代替 <code>sync.Mutex</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205121936775.jpg" alt=""></p><p>原理</p><ul><li>锁的实现是通过操作系统来实现，属于系统调用，<code>atomic</code> 操作是通过硬件实现的，效率比锁高很多</li><li><code>sync.Mutex</code> 应该用来保护一段逻辑，不仅仅用于保护一个变量</li><li>对于非数值系列，可以使用 <code>atomic.Value</code>，<code>atomic.Value</code> 能承载一个 <code>interface&#123;&#125;</code></li></ul><h3 id="小结-6">小结</h3><ul><li><p>避免常见的性能陷阱可以保证大部分程序的性能</p></li><li><p>针对普通应用代码，不要一味地追求程序的性能，应当在满足正确可靠、简洁清晰等质量要求的前提下提高程序性能</p></li></ul><h1 id="性能调优实战">性能调优实战</h1><h2 id="性能调优简介">性能调优简介</h2><ul><li>要依靠数据不是猜测</li><li>要定位最大瓶颈而不是细枝末节</li><li>不要过早优化</li><li>不要过度优化</li></ul><h2 id="性能分析工具-pprof-实战">性能分析工具 pprof 实战</h2><h3 id="功能简介">功能简介</h3><h3 id="排查实战">排查实战</h3><h4 id="搭建-pprof-实践项目">搭建 pprof 实践项目</h4><h4 id="浏览器查看指标">浏览器查看指标</h4><h4 id="CPU">CPU</h4><ul><li>命令：topN</li><li>命令：list</li><li>命令：web</li></ul><h4 id="Heap-堆内存">Heap - 堆内存</h4><ul><li>Top 视图</li><li>Source 视图</li></ul><h3 id="goroutine-协程">goroutine - 协程</h3><h4 id="mutex-锁">mutex - 锁</h4><h4 id="block-阻塞">block - 阻塞</h4><h4 id="小结-7">小结</h4><h3 id="采样过程和原理">采样过程和原理</h3><h3 id="小结-8">小结</h3><h2 id="性能调优案例">性能调优案例</h2><h3 id="基本概念-5">基本概念</h3><pre><code>- 服务：能单独部署，承载一定功能的程序- 依赖：Service A 的功能实现依赖 Service B 的响应结果，称为 Service A 依赖 Service B- 调用链路：能支持一个接口请求的相关服务集合及其相互之间的依赖关系- 基础库：公共的工具包、中间件</code></pre><h3 id="业务优化">业务优化</h3><pre><code>- 流程    - 建立服务性能评估手段    - 分析性能数据，定位性能瓶颈    - 重点优化项改造    - 优化效果验证- 建立压测评估链路    - 服务性能评估    - 构造请求流量    - 压测范围    - 性能数据采集- 分析性能火焰图，定位性能瓶颈    - pprof 火焰图- 重点优化项分析    - 规范组件库使用    - 高并发场景优化    - 增加代码检查规则避免增量劣化出现    - 优化正确性验证- 上线验证评估    - 逐步放量，避免出现问题- 进一步优化，服务整体链路分析    - 规范上游服务调用接口，明确场景需求    - 分析业务流程，通过业务流程优化提升服务性能</code></pre><h3 id="基础库优化">基础库优化</h3><pre><code>- 适应范围更广，覆盖更多服务- AB 实验 SDK 的优化    - 分析基础库核心逻辑和性能瓶颈    - 完善改造方案，按需获取，序列化协议优化    - 内部压测验证    - 推广业务服务落地验证</code></pre><h3 id="Go-语言优化">Go 语言优化</h3><pre><code>- 适应范围最广，Go 服务都有收益- 优化方式    - 优化内存分配策略    - 优化代码编译流程，生成更高效的程序    - 内部压测验证    - 推广业务服务落地验证</code></pre>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』Windows 如何备份驱动文件</title>
      <link href="/2022/05/10/%E3%80%8EOthers%E3%80%8FWindows-%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/"/>
      <url>/2022/05/10/%E3%80%8EOthers%E3%80%8FWindows-%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E9%A9%B1%E5%8A%A8%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>今天太忙了，随便水一篇博客</p><p>使用如下命令即可（别忘了管理员）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism /online /<span class="built_in">export-driver</span> /destination:[备份路径]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism /online /<span class="built_in">export-driver</span> /destination:D:\tmp</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102123612.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据备份 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L2：Go 语言上手 - 工程实践</title>
      <link href="/2022/05/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL2%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>/2022/05/09/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL2%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><ul><li>没错，这是昨天上午的课，但是昨天太忙了就一直拖到现在来写了 <s>（其实今天也很忙）</s></li><li>配套实例代码：<a href="https://github.com/Moonlight-Zhao/go-project-example/tree/V0">https://github.com/Moonlight-Zhao/go-project-example/tree/V0</a></li></ul><p>这堂课主要学习企业实际项目开发中所涉及到的一系列知识点</p><h1 id="语言进阶-协程">语言进阶 - 协程</h1><h2 id="并发-VS-并行">并发 VS 并行</h2><ul><li><p>并发：多线程程序在一个核的 CPU 上运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092047289.png" alt=""></p></li><li><p>并行：多线程程序在多个核的 CPU 上运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092048835.png" alt=""></p></li></ul><p>（Go 可以重复发挥多核优势，高效运行）</p><h2 id="Goroutine">Goroutine</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092050273.png" alt=""></p><ul><li>线程：内核态，线程跑多个协程，栈 MB 级别</li><li>协程：用户态，轻量级线程，栈 KB 级别</li></ul><p>一个简单的线程例子，快速打印 <code>hello goroutine 0 ~ 4</code> ：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;hello goroutine :&quot;</span> + fmt.Sprint(i))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloGoRoutine</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> hello(i) <span class="comment">// 使用 go 关键字开启协程</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>) <span class="comment">// 保证子协程执行完毕之前，主函数不退出，后面会有更好的方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092106912.jpg" alt=""></p><p>可以看到不是按照顺序输出的，所以其实是并行输出的</p><h2 id="协程间通信：CSP（Communicating-Sequential-Processes）">协程间通信：CSP（Communicating Sequential Processes）</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092114874.png" alt=""></p><p>Go 提倡使用通道来实现协程间通信（通过通信共享内存）</p><p>当然，Go 也保留了通过共享内存实现通信的机制，但是效率低，不推荐</p><h2 id="Channel">Channel</h2><p>创建一个通道： <code>make(chan 元素类型,[缓冲大小])</code></p><ul><li>无缓冲的例子： <code>make(chan int)</code></li><li>有缓冲的例子： <code>make(chan int,2)</code></li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092120304.png" alt=""></p><p>缓冲就类似于快递站，需要有人取了元素出来才能放入元素，不然就一直阻塞</p><p>一个简单的通道例子：</p><ul><li>A 子协程发送 0~9 的数字</li><li>B 子协程计算输入数字的平方</li><li>主协程输出最后的平方数</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CalSquare</span><span class="params">()</span></span> &#123;</span><br><span class="line">src := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">dest := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(src) <span class="comment">// 延迟关闭 channel</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">src &lt;- i <span class="comment">// 把元素放入 src 通道</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(dest) <span class="comment">// 延迟关闭 channel</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> src &#123; <span class="comment">// 从 src 通道取出元素</span></span><br><span class="line">dest &lt;- i * i <span class="comment">// 把平分数放入 dest 通道</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> dest &#123; <span class="comment">// 取出平方数并打印</span></span><br><span class="line"><span class="comment">//复杂操作</span></span><br><span class="line"><span class="built_in">println</span>(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092127816.jpg" alt=""></p><p>可以看见通道是能保证顺序的，也就是并发安全的</p><p>为什么使用了带缓冲的 channel ？因为消费者可能需要执行一些复杂操作，耗时可能较长，使用缓冲可以不影响生产者的生产速度</p><h2 id="并发安全-Lock">并发安全 Lock</h2><p>前面讲了协程间还可以通过临界区来进行通信，但是这时一定要注意并发安全，也就是要加锁，可以看下面的这个例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">x    <span class="type">int64</span></span><br><span class="line">lock sync.Mutex <span class="comment">// 创建一个锁</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addWithLock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">lock.Lock() <span class="comment">//加锁</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line">lock.Unlock() <span class="comment">// 解锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addWithoutLock</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++ &#123;</span><br><span class="line">x += <span class="number">1</span> <span class="comment">//不加锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">()</span></span> &#123;</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;  <span class="comment">// 连开 5 个协程</span></span><br><span class="line"><span class="keyword">go</span> addWithoutLock() </span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;WithoutLock:&quot;</span>, x)</span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123; <span class="comment">// 连开 5 个协程</span></span><br><span class="line"><span class="keyword">go</span> addWithLock()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;WithLock:&quot;</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里分别有两个函数，一个是加锁的，一个是不加锁的，它们分别对一个变量连加 2000 次，而各自又被调用了 5 个协程，所以理论上每个变量又应该加了 10000 次</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092134270.jpg" alt=""></p><p>但是从结果来看，因为不加锁，所以修改变量时产生了混乱，不加锁的加不到 10000 次</p><p>所以为了并发安全，多协程修改一个变量时一定要加锁</p><h2 id="WaitGroup">WaitGroup</h2><p>前面例子中都是用 <code>Sleep</code> 来进行暴力的阻塞，由于无法精确的知道协程执行的时间，也就无法精确地设定 <code>Sleep</code> 的时间</p><p>在 Go 中，可以使用 <code>sync</code> 包中的 <code>WaitGroup</code> 来实现并发的同步，它有几个方法：</p><ul><li><code>Add(delta int)</code> ： 计数器 + <code>delta</code></li><li><code>Done()</code> ： 计数器 - 1</li><li><code>Wait()</code> ： 阻塞直到计数器为 0 ，等待所有协程执行完</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ManyGoWait</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">5</span>) <span class="comment">// 设置计算器为 5</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="type">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done() <span class="comment">// 执行完函数后，将计算器减 1</span></span><br><span class="line">hello(j)</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait() <span class="comment">// 始终阻塞，直到计算器为 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092153768.jpg" alt=""></p><h2 id="小结">小结</h2><ul><li>Goroutine ：理解协程</li><li>Channel ： 使用通道进行协程间通信</li><li>Sync ： 学会使用这个包中的 <code>Lock</code> 和 <code>WaitGroup</code></li></ul><p>#依赖管理</p><h2 id="背景">背景</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205092157646.png" alt=""></p><p>在一个项目中，要学会使用他人的组件或工具来提高研发效率</p><p>这时就出现了依赖</p><h3 id="Go-依赖管理演进">Go 依赖管理演进</h3><p>三个阶段：<code>GOPATH</code> -&gt; <code>GO Vendor</code> -&gt; <code>Go Module</code></p><p>目标：</p><ul><li>实现不同环境（项目）依赖的版本不同</li><li>控制依赖库的版本</li></ul><h3 id="GOPATH">GOPATH</h3><p>GOPATH 下有三个文件夹：</p><ul><li><code>bin</code> ： 项目编译的二进制文件</li><li><code>pkg</code> ： 项目编辑的中间产物，加速编译</li><li><code>src</code> ： 项目源码</li></ul><p>所有项目和依赖源码都在 <code>src</code></p><h3 id="GOPATH-弊端">GOPATH - 弊端</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205101955822.png" alt=""></p><p>A 和 B 依赖于一个包的不同版本</p><p>无法实现包的多版本控制</p><h3 id="Go-Vender">Go Vender</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205101956727.png" alt=""></p><p>在项目下增加 vender 文件夹，所有依赖放在 <code>$ProjectRoot/vendor</code> ，找不到再去 <code>GOPATH</code></p><p>解决了多个项目需要同一个包的冲突问题</p><h3 id="Go-Vender-弊端">Go Vender 弊端</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102004264.png" alt=""></p><p>无法控制依赖的版本</p><p>更新项目可能出现依赖冲突</p><h3 id="Go-Module">Go Module</h3><p>从 1.1 引入， 1.6 默认开启</p><ul><li>通过 <code>go.mod</code> 文件管理依赖包版本</li><li>通过 <code>go get</code> 与 <code>go mod</code> 指令管理依赖包</li></ul><h2 id="依赖管理三要素">依赖管理三要素</h2><ol><li>配置文件，描述依赖： <code>go.mod</code></li><li>中心仓库管理依赖库： <code>Proxy</code></li><li>本地工具： <code>go get/mod</code></li></ol><h3 id="依赖配置-go-mod">依赖配置 - go.mod</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102010647.png" alt=""></p><p>由三部分组成：<code>模块路径</code>、<code>原始库版本</code>、<code>单元依赖</code></p><p>依赖标识：<code>[Module Path][Version/Pseudo-version]</code></p><h3 id="依赖配置-version">依赖配置 - version</h3><ul><li><p>语义化版本</p><p>定义：<code>$&#123;MAJOR&#125;.$&#123;MINOR&#125;.$&#123;PATCH&#125;</code></p><ul><li>MAJOR：大版本，各版本直接可以不相互兼容</li><li>MINOR：新增函数或功能，在一个大版本下应当相互兼容</li><li>PATCH：修 bug</li></ul><p>例：</p><ul><li><code>V1.3.0</code></li><li><code>V2.3.0</code></li></ul></li><li><p>基于 commit 的伪版本</p><p>定义：<code>vx.0.0-yyyymmddhhmmss（时间戳）-abcdefg1234（本次的git哈希）</code></p><p>例：</p><ul><li><code>v0.0.0-20220401081311-c38fb59326b7</code></li><li><code>v1.0.0-20201130134442-10cb98267c6c</code></li></ul></li></ul><h3 id="依赖配置-indirect">依赖配置 - indirect</h3><p>关键字之 <code>indirect</code> ，标识是否为间接依赖（依赖的包所依赖的包）</p><p>A -&gt; B -&gt; C</p><ul><li>A -&gt; B 直接依赖</li><li>A -&gt; C 间接依赖</li></ul><h3 id="依赖配置-incompatible">依赖配置 - incompatible</h3><p>关键字之 <code>incompatible</code></p><p>按照 Go Module 的标准，如果大版本大于 1 的话，要在路径中也加入 <code>vN</code> 后缀，但是 Go Module 推出之前已经有很多库的版本到了 2 或更高了，这时就需要加上这个关键字来兼容这部分仓库</p><h3 id="依赖配置-依赖图">依赖配置 - 依赖图</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102048533.jpg" alt=""></p><p>你可能会选 C ，但其实是 B ，Go Module 会选择最近的兼容版本（1.3 和 1.4 按理来说是兼容的）</p><h3 id="依赖分发-回源">依赖分发 - 回源</h3><p>关于依赖去哪里下载的问题，主要是 Github 等第三方代码仓库，但是这会带来一系列弊端：</p><ul><li>无法保证构建稳定性（增删改）</li><li>无法保证依赖可用性（仓库被删了）</li><li>增加第三方压力（代码托管平台负载问题）</li></ul><h3 id="依赖分发-Proxy">依赖分发 - Proxy</h3><p>为了解决这个问题，就出现了 Go Proxy</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102103748.png" alt=""></p><p>这东西会缓存依赖的内容，保证依赖的稳定与可靠</p><h3 id="依赖分发-变量-GOPROXY">依赖分发 - 变量 GOPROXY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOPROXY=&quot;https://proxy1.cn,https://proxy2.cn,direct&quot;</span><br></pre></td></tr></table></figure><p><code>direct</code> 表示源站点，Go 会按照顺序的优先级找依赖</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102105035.png" alt=""></p><h3 id="工具-go-get">工具 - go get</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get example.org/pkg [参数]</span><br></pre></td></tr></table></figure><p>关于参数：</p><ul><li>不加参数：拉取主版本的最新提交</li><li><code>@upadte</code>：跟不加一样</li><li><code>@none</code>：在本地删除这个依赖</li><li><code>@v1.1.2</code>：拉取对应的语义版本</li><li><code>@23dfdd5</code>：拉取特定的 commit</li><li><code>@master</code>：拉取某分支的最新提交</li></ul><h3 id="工具-go-mod">工具 - go mod</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod 参数</span><br></pre></td></tr></table></figure><p>关于参数：</p><ul><li><code>init</code>：初始化，创建 go.mod 文件</li><li><code>download</code>：下载模块到本地缓存</li><li><code>tidy</code>：增加需要的依赖，删除不需要的依赖</li></ul><h2 id="小结-2">小结</h2><ul><li>Go 依赖管理演进</li><li>Go Module 依赖管理方案<ol><li>配置文件，描述依赖：go.mod</li><li>中心仓库管理依赖库：Proxy</li><li>本地工具：go get/mod</li></ol></li></ul><h1 id="测试">测试</h1><h3 id="为什么要测试">为什么要测试</h3><p>真实的事故例子：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102131873.jpg" alt=""></p><p>测试是避免事故的最后一道屏障</p><h3 id="测试的分类">测试的分类</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102134726.png" alt=""></p><ul><li>回归测试：质量保证人员手动测试项目可用性（刷抖音、看评论）</li><li>集成测试：对系统功能的测试（对暴露的接口自动化测试）</li><li>单元测试：开发者对单独的函数模块测试</li></ul><h2 id="单元测试">单元测试</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102138464.png" alt=""></p><h3 id="单元测试的规则">单元测试的规则</h3><ul><li>所有测试文件都以 <code>_test.go</code> 结尾</li><li>测试函数写成 <code>func TextXxx(t *testing.T)</code></li><li>初始化逻辑放到 <code>TestMain</code> 中（准备测试的数据-&gt;跑测试-&gt;释放资源）</li></ul><h3 id="单元测试的简单例子">单元测试的简单例子</h3><p>新建一个 test 模块，按照下面的目录创建好文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─test</span><br><span class="line">        print.go</span><br><span class="line">        print_test.go</span><br></pre></td></tr></table></figure><p>在 <code>print.go</code> 中新建一个函数，用于打印 <code>Tom</code></p><p>但是由于疏忽， Tom 变成了 John</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloTom</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;John&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在到 <code>print_test.go</code> 进行测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHelloTom</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">output := HelloTom()</span><br><span class="line">expectOutput := <span class="string">&quot;Tom&quot;</span></span><br><span class="line">assert.Equal(t, expectOutput, output)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比输出和预计的输出，这里选择使用一个第三方的包来进行对比</p><p>按下左侧的按钮开始测试（我已经测试过了，所以是个叉）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102249927.jpg" alt=""></p><p>发现与预期不符</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102247590.jpg" alt=""></p><p>现在修改 <code>HelloTom</code> 函数，再进行测试</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205102248537.jpg" alt=""></p><p>可以看到修改后通过了测试</p><h3 id="单元测试-覆盖率">单元测试 - 覆盖率</h3><ul><li><p>如何衡量代码是否已经经过了足够的测试？</p></li><li><p>如何评价项目的测试水准？</p></li><li><p>如何评价项目是否达到了高水准测试等级？</p></li></ul><p>答案就是： <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">代码覆盖率</span></span></p><p>来看第二个例子，一个判断学生是否及格的函数</p><p>新建 <code>judgment.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">JudgePassLine</span><span class="params">(score <span class="type">int16</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是 <code>judgment_test.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineTrue</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">isPass := JudgePassLine(<span class="number">70</span>)</span><br><span class="line">assert.Equal(t, <span class="literal">true</span>, isPass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJudgePassLineFail</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">isPass := JudgePassLine(<span class="number">50</span>)</span><br><span class="line">assert.Equal(t, <span class="literal">false</span>, isPass)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试时使用覆盖率</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205112149790.jpg" alt=""></p><p>这样，就可以知道测试时调用了文件中的多少行语句</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205112150933.jpg" alt=""></p><p>测试多种输入可以提升覆盖率</p><p>可以看见，把另一个输入为 50 的测试完后，<code>judgment.go</code>  的覆盖率达到了 100%</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205112152967.jpg" alt=""></p><p>单元测试 Tips：</p><ul><li>一般覆盖率：50%~60%，较高覆盖率：80%+</li><li>测试分支相互独立、全面覆盖</li><li>测试单元粒度足够小，函数单一职责</li></ul><h3 id="单元测试-依赖">单元测试 - 依赖</h3><p>当然，一般在测试时会依赖于一些组件，如数据库、文件之类的</p><p>单元测试需要有两个目标：幂等与稳定</p><ul><li>幂等：重复运行，结果相同</li><li>稳定：任何时间，任何函数，独立运行</li></ul><p>但是测试时直接调用数据库等肯定是不稳定的，因为需要依赖网络，这样就会用到 Mock 机制</p><h3 id="单元测试-文件处理">单元测试 - 文件处理</h3><p>在讲 Mock 之前，先从文件出发</p><p>例如现在有一个处理文本的函数，它将第一行中的 <code>11</code> 都替换为 <code>00</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFirstLine</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">open, err := os.Open(<span class="string">&quot;log&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> open.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">scanner := bufio.NewScanner(open)</span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line"><span class="keyword">return</span> scanner.Text()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessFirstLine</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">line := ReadFirstLine()</span><br><span class="line">destLine := strings.ReplaceAll(line, <span class="string">&quot;11&quot;</span>, <span class="string">&quot;00&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> destLine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备一个 log 测试样例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">line11</span><br><span class="line">line22</span><br><span class="line">line33</span><br><span class="line">line44</span><br><span class="line">line55</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们就可以这样写测试函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">firstLine := ProcessFirstLine()</span><br><span class="line">assert.Equal(t, <span class="string">&quot;line00&quot;</span>, firstLine)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是有一个问题，就是这个测试依赖于 log 文件（实践生产中可能是数据库等资源），一旦 log 无法访问便无法测试，这时就需要 Mock</p><h2 id="Mock-测试">Mock 测试</h2><p>Mock 就是打桩，在测试时使用一个函数或方法替换另一个函数或方法（在运行时替换函数的指针），例如在上面使用 <code>ReadFirstLine()</code> 来读取数据，而我们可以用一个函数生成数据，然后替换掉那个函数</p><p>常见的用于实现 Mock 的包是 monkey</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bou.ke/monkey&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/assert&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLine</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">firstLine := ProcessFirstLine()</span><br><span class="line">assert.Equal(t, <span class="string">&quot;line00&quot;</span>, firstLine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestProcessFirstLineWithMock</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">monkey.Patch(ReadFirstLine, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;line110&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">defer</span> monkey.Unpatch(ReadFirstLine)</span><br><span class="line">line := ProcessFirstLine()</span><br><span class="line">assert.Equal(t, <span class="string">&quot;line000&quot;</span>, line)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，使用一个匿名函数替换掉了原来的函数，测试不再依赖于本地文件，可以在任何时间运行</p><h2 id="基准测试">基准测试</h2><p>自带的代码性能测试工具，它的方法类似于单元测试</p><h4 id="基准测试-例子">基准测试 - 例子</h4><p>举一个负载均衡服务器的例子，初始化 10 个服务器，然后通过 <code>Select()</code> 函数随机挑选服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> benchmark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/bytedance/gopkg/lang/fastrand&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ServerIndex [<span class="number">10</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitServerIndex</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">ServerIndex[i] = i+<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Select</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ServerIndex[rand.Intn(<span class="number">10</span>)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FastSelect</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ServerIndex[fastrand.Intn(<span class="number">10</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来运行基准测试，它与单元测试的不同在于关键词变成了 <code>Benchmark</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> benchmark</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelect</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">Select()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSelectParallel</span><span class="params">(b *testing.B)</span></span> &#123; <span class="comment">// 并发测试</span></span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">Select()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkFastSelectParallel</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">InitServerIndex()</span><br><span class="line">b.ResetTimer()</span><br><span class="line">b.RunParallel(<span class="function"><span class="keyword">func</span><span class="params">(pb *testing.PB)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> pb.Next() &#123;</span><br><span class="line">FastSelect()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目实战">项目实战</h1><h2 id="需求设计">需求设计</h2><ol><li>实现一个展示话题（标题，文字描述）和回帖列表的后端 http 接口；</li><li>本地文件存储数据</li></ol><h2 id="ER-图">ER 图</h2><p><img src="https://internal-api-drive-stream.feishu.cn/space/api/box/stream/download/wps/auth_code/?code=dfd74ee4515f0f062b364e60a99d45fb_41c3316f00827029_4HIRTFR3DO_5AKTGD7IG84KSNCG03MI8PDUNS" alt="img"></p><h2 id="分层结构">分层结构</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205122018909.png" alt=""></p><h2 id="Repository">Repository</h2><h3 id="索引">索引</h3><h3 id="查询">查询</h3><h2 id="Service">Service</h2><h2 id="Controller">Controller</h2><h2 id="Router">Router</h2><h2 id="运行">运行</h2>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『赛后感想』2022 计算机学院 Debug 杯程序设计大赛</title>
      <link href="/2022/05/08/%E3%80%8E%E8%B5%9B%E5%90%8E%E6%84%9F%E6%83%B3%E3%80%8F2022%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2-Debug-%E6%9D%AF%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B/"/>
      <url>/2022/05/08/%E3%80%8E%E8%B5%9B%E5%90%8E%E6%84%9F%E6%83%B3%E3%80%8F2022%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2-Debug-%E6%9D%AF%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzYwMzEwOQ==&amp;mid=2247485897&amp;idx=1&amp;sn=e2a232931375ff955795a2f159b4f915&amp;chksm=ceb84e03f9cfc715e1abf545d61fc88dc92623b731a0188d5a041a5d48ab67d1b427f1c379f5&amp;mpshare=1&amp;scene=23&amp;srcid=050525I5EquyQ67rDguvuB3T&amp;sharer_sharetime=1651731587948&amp;sharer_shareid=586f2615c54a23230cdab03995b82e19#rd">随着阵阵花香，Debug杯来啦||计算机学院Debug杯程序设计大赛如期而至</a></p></div></details><p>呼~ 烧了我一下午脑细胞的比赛终于结束了</p><p>真的是累死了，比完之后眼睛痛，头也晕，腰也酸，<s>关键是好好的睡午觉的时候要去比赛，简直要了我的命</s></p><p>来，来听我讲讲我今天的心路历程</p><p>中午出发前往赛场</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205081955194.jpg" alt=""></p><p>时间来到 <code>1:30</code> ，进入比赛，开始做题</p><h1 id="T1">T1</h1><p>首先是第一题</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082001649.jpg" alt=""></p><p>一看就是纸老虎，前面大段大段的都是唬你的废话，直接找因子然后套公式就行了</p><p>因为找一个数的因子应该比较简单，所以我打算交给 Copliot 做，注释一写出来，代码直接就生成了，简直不要太爽</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">g</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="comment">//求一个数的所有因子</span></span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n,sum=<span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        vector&lt;ll&gt; factors;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                factors.<span class="built_in">push_back</span>(i);</span><br><span class="line">                <span class="keyword">if</span> (i != n / i)</span><br><span class="line">                    factors.<span class="built_in">push_back</span>(n / i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//sort(factors.begin(), factors.end());</span></span><br><span class="line">        <span class="comment">// for (ll i = 0; i &lt; factors.size(); i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;factors[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// for (ll i = 0; i &lt; factors.size(); i++)</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     //cout&lt;&lt;factors[i]&lt;&lt;&quot; &quot;&lt;&lt;n/factors[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//     // cout&lt;&lt;factors[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//     // cout&lt;&lt;g(n/factors[i])&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//     // cout&lt;&lt;g(factors[i])&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//     cout&lt;&lt;factors[i]*g(n/factors[i])&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; factors.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=factors[i]*<span class="built_in">g</span>(n/factors[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt; sum ;</span><br><span class="line">         cout &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赶紧 A 了直接下一题</p><h1 id="T2">T2</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082006591.jpg" alt=""></p><p>这道题和上一题一样是很水的，按照贪心直接排序即可，担心数据量有点大，就上了快读和 <code>long long</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            w = <span class="number">-1</span>;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll n, k, flag = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            a[i] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>] &gt; k)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; n&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = a[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans *= a[i];</span><br><span class="line">            <span class="keyword">if</span> (ans &gt; k)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; i - <span class="number">1</span>;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            cout &lt;&lt; n;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T3">T3</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082008338.jpg" alt=""></p><p>这道题居然比前面的还简单，也是一道简单的贪心 <s>（怎么一道题比一道题水）</s></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll a[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;a[<span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; a[n] + a[n - <span class="number">1</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T4">T4</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082010369.jpg" alt=""></p><p>最小值最大，经典的二分答案模板题，套个板子手写一下 <code>check()</code> 函数即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll e, m, h;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((e &gt;= x * <span class="number">5</span> &amp;&amp; m &gt;= x * <span class="number">3</span>))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; e &gt;&gt; m &gt;&gt; h;</span><br><span class="line">        <span class="type">int</span> ans = <span class="built_in">bsearch_2</span>(<span class="number">0</span>, h);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//     cin &gt;&gt; e &gt;&gt; m &gt;&gt; h;</span></span><br><span class="line">    <span class="comment">//     while (1)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         if ((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3)&amp;&amp;(e &gt;= (h+1) * 5 &amp;&amp; m &gt;= (h+1) * 3))</span></span><br><span class="line">    <span class="comment">//         &#123;</span></span><br><span class="line">    <span class="comment">//             cout &lt;&lt; h &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//             break;</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         h/2;</span></span><br><span class="line">    <span class="comment">//         while((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3))h=h+h/2;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T5">T5</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082012454.jpg" alt=""></p><p>经典的高精度取模，直接板子拿过来即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len(k) (k[0])</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN], d[MAXN], tmp[MAXN];</span><br><span class="line"><span class="type">int</span> num, res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">scan</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[MAXN];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;str);</span><br><span class="line">    <span class="built_in">len</span>(x) = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>(x); i++)</span><br><span class="line">        x[<span class="built_in">len</span>(x) - i] = str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, MAXN * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        b[i + pos - <span class="number">1</span>] = a[i];</span><br><span class="line">    <span class="built_in">len</span>(b) = <span class="built_in">len</span>(a) + pos - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> y[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &gt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &lt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; y[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; y[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        c[i + <span class="number">1</span>] = c[i] / <span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c) + <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">len</span>(c)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">minu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] - b[i];</span><br><span class="line">        <span class="keyword">if</span> (c[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>]--;</span><br><span class="line">            c[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfminu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i + <span class="number">1</span>]--;</span><br><span class="line">            a[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] -= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(a) &gt; <span class="number">0</span> &amp;&amp; a[<span class="built_in">len</span>(a)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(a)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mult</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) + <span class="built_in">len</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(b); j++)</span><br><span class="line">            c[i + j - <span class="number">1</span>] += a[i] * b[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] += c[i] / <span class="number">10</span>;</span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divi</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[], <span class="type">int</span> d[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) - <span class="built_in">len</span>(b) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(a, d, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(tmp);</span><br><span class="line">        <span class="built_in">copy</span>(b, tmp, i);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">compare</span>(d, tmp) &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]++;</span><br><span class="line">            <span class="built_in">selfminu</span>(d, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(c) &gt; <span class="number">0</span> &amp;&amp; c[<span class="built_in">len</span>(c)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfDiviByLow</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b,<span class="type">int</span>* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">len</span>(c)=<span class="built_in">len</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (a[<span class="built_in">len</span>(c)] &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="built_in">len</span>(c) - <span class="number">1</span>] += a[<span class="built_in">len</span>(c)] * <span class="number">10</span>;</span><br><span class="line">        a[<span class="built_in">len</span>(c)] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i] = a[i] / b;</span><br><span class="line">            a[i] %= b;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i - <span class="number">1</span>] += a[i] * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *res=a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">copy</span>(c,a,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scan</span>(a);</span><br><span class="line">    <span class="built_in">scan</span>(b);</span><br><span class="line">    <span class="built_in">divi</span>(a, b, c, d);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scan(a);</span></span><br><span class="line">    <span class="comment">// scan(b);</span></span><br><span class="line">    <span class="comment">// scanf(&quot;%d&quot;, &amp;num);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// add(a, b, c);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// init(c);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if (compare(a, b) == -1)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;-&quot;);</span></span><br><span class="line">    <span class="comment">//     minu(b, a, c);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else minu(a, b, c);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// init(c);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mult(a, b, c);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// init(c);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// divi(a, b, c, d);</span></span><br><span class="line">    <span class="comment">// print(c);</span></span><br><span class="line">    <span class="comment">// print(d);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// selfDiviByLow(a,num,&amp;res);</span></span><br><span class="line">    <span class="comment">// print(a);</span></span><br><span class="line">    <span class="comment">// printf(&quot;%d&quot;,res);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T6">T6</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082014416.jpg" alt=""></p><p>开始有点难度了，这道题首先有个坑点，就是 <code>long long</code> ，我后面折腾了很久才发现有个 <code>int</code>  忘记改成  <code>long long</code> 了，导致我一直过不了</p><p>然后这道题的难度自然是 <code>check()</code> 函数，其实还是不难理解的：首先 <code>k</code> 的搜索范围自然是 <code>H + mOrH</code> ，然后就要看 <code>mOrH</code> 中，到底分了多少给 <code>H</code> ，确定之后把剩下的分给 <code>M</code> ，接着如果 <code>M</code> 还是够不着 <code>k*3</code> 的话要把 <code>eOrM</code> 中的部分分给 <code>M</code> ，剩下的分给 <code>E</code> ，如果够分的话那就 <code>return 1</code> ，不够分自然就 <code>return 0</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll E, M, H, eOrM, mOrH;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll e=E,m=M,h=H;</span><br><span class="line">    <span class="keyword">if</span> ((e &gt;= x * <span class="number">5</span> &amp;&amp; m &gt;= x * <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (e + eOrM &lt; x * <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m + mOrH + eOrM &lt; x * <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    ll mOrHGiveToH, eOrMGiveToM;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; h)</span><br><span class="line">    &#123;</span><br><span class="line">        mOrHGiveToH = x - h;</span><br><span class="line">        m += mOrH - mOrHGiveToH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        mOrHGiveToH = <span class="number">0</span>;</span><br><span class="line">        m += mOrH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m + eOrM &lt; x * <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; x * <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        eOrMGiveToM = x * <span class="number">3</span> - m;</span><br><span class="line">        m += eOrMGiveToM;</span><br><span class="line">        e += eOrM - eOrMGiveToM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        eOrMGiveToM = <span class="number">0</span>;</span><br><span class="line">        e += eOrM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((e &gt;= x * <span class="number">5</span> &amp;&amp; m &gt;= x * <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">bsearch_2</span><span class="params">(ll l, ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        ll mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;mid&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid))</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cin &gt;&gt; e &gt;&gt; m &gt;&gt; h &gt;&gt; eOrM &gt;&gt; mOrH;</span></span><br><span class="line">        E = <span class="built_in">read</span>();</span><br><span class="line">        eOrM = <span class="built_in">read</span>();</span><br><span class="line">        M = <span class="built_in">read</span>();</span><br><span class="line">        mOrH = <span class="built_in">read</span>();</span><br><span class="line">        H = <span class="built_in">read</span>();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        ll ans = <span class="built_in">bsearch_2</span>(<span class="number">0</span>, H + mOrH);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//     cin &gt;&gt; e &gt;&gt; m &gt;&gt; h;</span></span><br><span class="line">        <span class="comment">//     while (1)</span></span><br><span class="line">        <span class="comment">//     &#123;</span></span><br><span class="line">        <span class="comment">//         if ((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3)&amp;&amp;(e &gt;= (h+1) * 5 &amp;&amp; m &gt;= (h+1) * 3))</span></span><br><span class="line">        <span class="comment">//         &#123;</span></span><br><span class="line">        <span class="comment">//             cout &lt;&lt; h &lt;&lt; endl;</span></span><br><span class="line">        <span class="comment">//             break;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         h/2;</span></span><br><span class="line">        <span class="comment">//         while((e &gt;= h * 5 &amp;&amp; m &gt;= h * 3))h=h+h/2;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T7">T7</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082022626.jpg" alt=""></p><p>很遗憾，这道题我最后没 A 掉，看上去可能是用 DP 做的，但是我 DP 学的本来就差，但是我后面一想也不能用DP做呀，就只能照着题目的意思乱写，最后死活 TLE，没办法，人菜还得好好学习</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1024</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll x[N], y[N];</span><br><span class="line">ll n;</span><br><span class="line"><span class="function">ll <span class="title">Myabs</span><span class="params">(ll a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; <span class="number">0</span> ? -a : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll s = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sumWork</span><span class="params">(ll pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += <span class="built_in">Myabs</span>(x[i] - pos) * y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    ll t = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll Sx = <span class="number">0</span>;</span><br><span class="line">        n = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x[i] = <span class="built_in">read</span>();</span><br><span class="line">            Sx += x[i];</span><br><span class="line">            y[i] = <span class="built_in">read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">sumWork</span>(Sx / n));</span><br><span class="line">        <span class="comment">// cout &lt;&lt; sumWork(Sx / n)&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T8">T8</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082026617.jpg" alt=""></p><p>突如其来的一道水题，也不知道为什么放这</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    ll k;</span><br><span class="line">    cin &gt;&gt; k;</span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll l, r, t;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; t;</span><br><span class="line">        cout &lt;&lt; l + t % <span class="built_in">abs</span>(r - l + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T9">T9</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082027533.png" alt=""></p><p>最后一题，看上去是一道很简单的搜索，但是最后还是死活 TLE ，怎么剪枝都没用</p><p>我在 copilot 的配合下很快写了个 DFS 出来，然后又是 MLE 又是 TLE 的，我心态都崩了，因为 MLE 我甚至还想重新写一个 BFS 版本的，但是做到这里我早已疲惫不堪，最后只能遗憾离场</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 1001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">short</span> Move[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="type">short</span> a[N][N], b[N][N], X, Y, Ax, Ay, Bx, By;</span><br><span class="line"><span class="type">bool</span> Map[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">short</span> <span class="title">min</span><span class="params">(<span class="type">short</span> x, <span class="type">short</span> y)</span> </span>&#123; <span class="keyword">return</span> x &lt; y ? x : y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">staus</span><span class="params">(<span class="type">short</span> x, <span class="type">short</span> y, <span class="type">short</span> hack, <span class="type">short</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == Bx &amp;&amp; y == By)</span><br><span class="line">    &#123;</span><br><span class="line">        a[x][y] = <span class="built_in">min</span>(hack, a[x][y]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hack &gt;= a[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a[x][y] = hack;</span><br><span class="line">    <span class="keyword">if</span> (step &gt;= b[x][y])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b[x][y] = step;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">short</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">short</span> nx = x + Move[i][<span class="number">0</span>], ny = y + Move[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= X || ny &lt; <span class="number">0</span> || ny &gt;= Y)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (Map[nx][ny])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">staus</span>(nx, ny, hack, step + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">short</span> dx = <span class="number">-2</span>; dx &lt;= <span class="number">2</span>; dx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> dy = <span class="number">-2</span>; dy &lt;= <span class="number">2</span>; dy++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">0</span>) || (dx == <span class="number">1</span> &amp;&amp; dy == <span class="number">0</span>) || (dx == <span class="number">-1</span> &amp;&amp; dy == <span class="number">0</span>) || (dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">1</span>) || (dx == <span class="number">0</span> &amp;&amp; dy == <span class="number">-1</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">short</span> nx = x + dx, ny = y + dy;</span><br><span class="line">            <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= X || ny &lt; <span class="number">0</span> || ny &gt;= Y)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (Map[nx][ny])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">staus</span>(nx, ny, hack + <span class="number">1</span>, step);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="type">short</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; X &gt;&gt; Y &gt;&gt; Ax &gt;&gt; Ay &gt;&gt; Bx &gt;&gt; By;</span><br><span class="line">        Ax--;</span><br><span class="line">        Ay--;</span><br><span class="line">        Bx--;</span><br><span class="line">        By--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">short</span> i = <span class="number">0</span>; i &lt; X; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">short</span> j = <span class="number">0</span>; j &lt; Y; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                a[i][j] = INF;</span><br><span class="line">                b[i][j] = INF;</span><br><span class="line">                <span class="type">char</span> tmp;</span><br><span class="line">                cin &gt;&gt; tmp;</span><br><span class="line">                <span class="keyword">if</span> (tmp == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                    Map[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Map[i][j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">staus</span>(Ax, Ay, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; a[Bx][By] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成果-照片">成果 &amp; 照片</h1><p>比赛最后的截图（我记得最高好像冲到了13名，然后死磕最后一题狂加时间加到了17名😿）：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082035273.jpg" alt=""></p><p>最后关头还在死磕的 NX</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082037355.jpg" alt=""></p><p>快结束时拍的一张照，人基本都跑光了（投影上轮流翻看所有考场中的排名，我在这个房间是第一）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082040809.jpg" alt=""></p><p>赛后纪念品，最后插了 7 个葫芦娃（类 ACM 赛制，做对一题给你插一个）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205082041490.jpg" alt=""></p><p>最后拿了几等奖等正式宣布，不着急</p><hr><h1 id="2022年5月18日-更新">2022年5月18日 更新</h1><p>这比赛最后发放了<a href="https://www.aliyundrive.com/s/YN2V4Zje9Zk">答案</a>，T7 有一个重要信息我没看出来，那就是<strong>答案所求的坐标必定落在某个朋友所在的位置</strong>（我还是太菜），而最后一题用的是双端队列+BFS，没有复习高中的知识，没办法</p><p>讲真</p><p>至于最后的奖项嘛…<a href="https://mp.weixin.qq.com/s/cm_jRsaMz6JxOXThAGYCvQ">正好卡在一等的最后一名</a>（</p><p>其实也没什么好吹嘘的，这题真的很简单，我没有全A掉都已经是很丢脸的事情了，这个比赛基本上没有什么含金量，只能说是练练手吧</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205311543242.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『字节青训营』L1：Go 语言上手 - 基础语言</title>
      <link href="/2022/05/07/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL1%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/"/>
      <url>/2022/05/07/%E3%80%8E%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E3%80%8FL1%EF%BC%9AGo-%E8%AF%AD%E8%A8%80%E4%B8%8A%E6%89%8B-%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>前情提要：</p><ul><li>配套实例代码： <a href="https://github.com/wangkechun/go-by-example">https://github.com/wangkechun/go-by-example</a></li></ul><h1 id="简介">简介</h1><h2 id="什么是-Go-语言">什么是 Go 语言</h2><ol><li>高性能、高并发</li><li>语法简单、学习曲线平缓</li><li>丰富的标准库</li><li>完善的工具链</li><li>静态编译</li><li>快速编译</li><li>跨平台</li><li>垃圾回收</li></ol><h2 id="哪些公司在使用-Go-语言">哪些公司在使用 Go 语言</h2><p>那必是很多呀~（略）</p><h2 id="字节跳动为什么全面拥抱-Go-语言">字节跳动为什么全面拥抱 Go 语言</h2><ol><li>Python 性能不好</li><li>C++ 不适合在线 Web 业务</li><li>早期团队非 Java 背景</li><li>部署简单，学习成本低</li><li>内部 RPC 和 HTTP 框架的推广</li></ol><h1 id="入门">入门</h1><h2 id="开发环境">开发环境</h2><p>略</p><h2 id="基础语法">基础语法</h2><p>这块就是查缺补漏了，仅挑选我认为有必要再温习的部分</p><h3 id="16-字符串格式化">[16]  字符串格式化</h3><p>首先，最常用的是 <code>Println()</code> ，它的作用是打印变量并换行</p><p>Go 中也是有 <code>Printf()</code> 的，与 C 中的相比更加智能，你可以用 <code>%v</code> 来自动判断类型，而无需纠结整型用 <code>%d</code> ，实行用 <code>%f</code> 之类的</p><p>使用 <code>%+v</code> 可以打印详细信息，而 <code>%#v</code> 则可以更加详细</p><p>保留位数的浮点数与 C 中的做法相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> point <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">&quot;hello&quot;</span></span><br><span class="line">n := <span class="number">123</span></span><br><span class="line">p := point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(s, n) <span class="comment">// hello 123</span></span><br><span class="line">fmt.Println(p)    <span class="comment">// &#123;1 2&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;s=%v\n&quot;</span>, s)  <span class="comment">// s=hello</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;n=%v\n&quot;</span>, n)  <span class="comment">// n=123</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%v\n&quot;</span>, p)  <span class="comment">// p=&#123;1 2&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%+v\n&quot;</span>, p) <span class="comment">// p=&#123;x:1 y:2&#125;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;p=%#v\n&quot;</span>, p) <span class="comment">// p=main.point&#123;x:1, y:2&#125;</span></span><br><span class="line"></span><br><span class="line">f := <span class="number">3.141592653</span></span><br><span class="line">fmt.Println(f)          <span class="comment">// 3.141592653</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>, f) <span class="comment">// 3.14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-JSON-处理">[17] JSON 处理</h3><p>Go 中的 JSON 处理极为方便，对结构体使用 <code>json.Marshal()</code> 函数就能自动序列化（不要忘记首字母大写）</p><p>序列化后得到一个 <code>byte</code> 数组，如果要打印的话需要转换为 <code>string</code> 类型</p><p>正常序列化之后得到的都是首字母大写的，可以在结构体处为 JSON 格式加一个 tag</p><p>序列化的 JSON 可以使用 <code>json.Unmarshal()</code> 来解析到一个空的变量里面</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> userInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Age   <span class="type">int</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">Hobby []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := userInfo&#123;Name: <span class="string">&quot;wang&quot;</span>, Age: <span class="number">18</span>, Hobby: []<span class="type">string</span>&#123;<span class="string">&quot;Golang&quot;</span>, <span class="string">&quot;TypeScript&quot;</span>&#125;&#125;</span><br><span class="line">buf, err := json.Marshal(a)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(buf)         <span class="comment">// [123 34 78 97...]</span></span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// &#123;&quot;Name&quot;:&quot;wang&quot;,&quot;age&quot;:18,&quot;Hobby&quot;:[&quot;Golang&quot;,&quot;TypeScript&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line">buf, err = json.MarshalIndent(a, <span class="string">&quot;&quot;</span>, <span class="string">&quot;\t&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b userInfo</span><br><span class="line">err = json.Unmarshal(buf, &amp;b)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, b) <span class="comment">// main.userInfo&#123;Name:&quot;wang&quot;, Age:18, Hobby:[]string&#123;&quot;Golang&quot;, &quot;TypeScript&quot;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-时间处理">[18] 时间处理</h3><p>使用 <code>time.Now()</code> 可以快速获取当前时间</p><p>也可以用 <code>time.Date()</code> 去构造一个带时区的时间，有很多方法可以使用获取年月日时分秒</p><p>可以使用 <code>Sub()</code> 方法得到时间段，时间段又可以使用方法去得到它有多少小时，多少分钟，多少秒</p><p>使用 <code>Format()</code> 方法去格式化时间，不像其他编程语言使用诸如 <code>yyyy-M-d</code> 之类的标识符，Go 是以一个特殊的时刻（2006 年 1 月 2 日 下午 3 点 4 分 5 秒，这个时刻是写在包里面的）为例子，来理解你想表达时间的格式</p><p>同样地，使用 <code>Parse()</code> 并提供这个时刻的示例，可以解析你写成字符串的时间</p><p>你可以使用 <code>now.Unix()</code> 来获取当前的 Unix 时间戳</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">now := time.Now()</span><br><span class="line">fmt.Println(now) <span class="comment">// 2022-03-27 18:04:59.433297 +0800 CST m=+0.000087933</span></span><br><span class="line">t := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">t2 := time.Date(<span class="number">2022</span>, <span class="number">3</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">30</span>, <span class="number">36</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line">fmt.Println(t)                                                  <span class="comment">// 2022-03-27 01:25:36 +0000 UTC</span></span><br><span class="line">fmt.Println(t.Year(), t.Month(), t.Day(), t.Hour(), t.Minute()) <span class="comment">// 2022 March 27 1 25</span></span><br><span class="line">fmt.Println(t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))                    <span class="comment">// 2022-03-27 01:25:36</span></span><br><span class="line">diff := t2.Sub(t)</span><br><span class="line">fmt.Println(diff)                           <span class="comment">// 1h5m0s</span></span><br><span class="line">fmt.Println(diff.Minutes(), diff.Seconds()) <span class="comment">// 65 3900</span></span><br><span class="line">t3, err := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, <span class="string">&quot;2022-03-27 01:25:36&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(t3 == t)    <span class="comment">// true</span></span><br><span class="line">fmt.Println(now.Unix()) <span class="comment">// 1648738080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-数字解析">[19] 数字解析</h3><p>使用 <code>strconv</code> 包中的 <code>ParseFloat()</code> 和 <code>ParseInt()</code> 来快速解析字符串</p><p>如果确定是 10 进制，也可以使用 <code>Atoi()</code> 来快速转换成数字</p><p>同样的，可以使用 <code>Itoa()</code> 来把数字转换为字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, _ := strconv.ParseFloat(<span class="string">&quot;1.234&quot;</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(f) <span class="comment">// 1.234</span></span><br><span class="line"></span><br><span class="line">n, _ := strconv.ParseInt(<span class="string">&quot;111&quot;</span>, <span class="number">10</span>, <span class="number">64</span>) <span class="comment">// 10 代表进制，64 代表精度</span></span><br><span class="line">fmt.Println(n) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line">n, _ = strconv.ParseInt(<span class="string">&quot;0x1000&quot;</span>, <span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Println(n) <span class="comment">// 4096</span></span><br><span class="line"></span><br><span class="line">n2, _ := strconv.Atoi(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">fmt.Println(n2) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">n2, err := strconv.Atoi(<span class="string">&quot;AAA&quot;</span>)</span><br><span class="line">fmt.Println(n2, err) <span class="comment">// 0 strconv.Atoi: parsing &quot;AAA&quot;: invalid syntax</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-进程信息">[20] 进程信息</h3><p>使用 <code>os.Args</code> 来获取执行时获取的一些命令行参数</p><p>使用 <code>os.Getenv()</code> 与 <code>os.Setenv()</code> 来获取与写入环境变量</p><p>使用 <code>exec.Command()</code> 来启动子进程并获取其输入输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// go run example/20-env/main.go a b c d</span></span><br><span class="line">fmt.Println(os.Args)           <span class="comment">// [/var/folders/8p/n34xxfnx38dg8bv_x8l62t_m0000gn/T/go-build3406981276/b001/exe/main a b c d]</span></span><br><span class="line">fmt.Println(os.Getenv(<span class="string">&quot;PATH&quot;</span>)) <span class="comment">// /usr/local/go/bin...</span></span><br><span class="line">fmt.Println(os.Setenv(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>))</span><br><span class="line"></span><br><span class="line">buf, err := exec.Command(<span class="string">&quot;grep&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;/etc/hosts&quot;</span>).CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="type">string</span>(buf)) <span class="comment">// 127.0.0.1       localhost</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实战">实战</h1><h2 id="猜谜游戏">猜谜游戏</h2><p>实现一个简单的二分猜数游戏</p><h3 id="V1">V1</h3><p>先测试随机数生成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是发现，每次生成的数都是一样的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072027025.jpg" alt=""></p><h3 id="V2">V2</h3><p>原来是没有设置种子，设置完种子之后就正常了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072030045.jpg" alt=""></p><h3 id="V3">V3</h3><p>接下来实现用户的输入输出，并且解析成数字</p><p>这就需要借助 <code>os.Stdin</code> 文件，但是直接操作很不方便，可以使用 <code>bufio.NewReader()</code> 转换为一个只读的流</p><p>使用 <code>ReadString(&quot;\n&quot;)</code> 方法来读取一行</p><p>但是读入的时候会多读入一个换行符，所以要使用 <code>strings.TrimSuffix</code> 来去掉换行符</p><p>最后，使用 <code>strconv.Atoi</code> 来转换为数字</p><p>这里用这么复杂的方式来得到输入，其实是因为后面的项目中要用到 <code>bufio</code> 这个包，需要提前熟悉</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;The secret number is &quot;</span>, secretNumber)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;An error occurred while reading input. Please try again&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\r&quot;</span>) <span class="comment">// Windows 平台还要加上这一行</span></span><br><span class="line">    </span><br><span class="line">guess, err := strconv.Atoi(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072042245.jpg" alt=""></p><h3 id="V4">V4</h3><p>这个版本的改进是实现逻辑判断，下末尾添加下面的行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072046287.jpg" alt=""></p><h3 id="V5">V5</h3><p>此时程序大致已经完成了，但是还缺少循环，用户输入完成一次后程序就会退出</p><p>现在加上循环，这个游戏就完整了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNum := <span class="number">100</span></span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">secretNumber := rand.Intn(maxNum)</span><br><span class="line"><span class="comment">// fmt.Println(&quot;The secret number is &quot;, secretNumber)</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;An error occured while reading input. Please try again&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\r&quot;</span>) <span class="comment">// Windows 平台还要加上这一行</span></span><br><span class="line">guess, err := strconv.Atoi(input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid input. Please enter an integer value&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;You guess is&quot;</span>, guess)</span><br><span class="line"><span class="keyword">if</span> guess &gt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is bigger than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNumber &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Your guess is smaller than the secret number. Please try again&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Correct, you Legend!&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072052157.jpg" alt=""></p><h2 id="在线词典">在线词典</h2><p>在这个项目中，需要实现一个命令行版本的词典，输入一个单词，调用第三方 api 查询它的音标与翻译</p><h3 id="抓包">抓包</h3><p>这里以彩云科技提供的在线翻译为例（<a href="https://fanyi.caiyunapp.com/#/">https://fanyi.caiyunapp.com</a> ）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072059363.jpg" alt=""></p><p>打开开发者工具，随便输入一个单词，找到它的请求与响应</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072103816.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072104283.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072102587.jpg" alt=""></p><p>下面，我们就需要在 Go 中模拟这个请求</p><h3 id="代码生成">代码生成</h3><p>首先复制为 <code>cURL</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072109542.jpg" alt=""></p><p>然后打开 <a href="https://curlconverter.com/#go">https://curlconverter.com/#go</a> ，转换为 Go 代码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072111287.jpg" alt=""></p><h3 id="解读生成代码">解读生成代码</h3><p>让我们来看一看代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> data = strings.NewReader(<span class="string">`&#123;&quot;trans_type&quot;:&quot;en2zh&quot;,&quot;source&quot;:&quot;good&quot;&#125;`</span>) <span class="comment">// 把字符串来转换成流（因为这个请求可能很大，全部加载到内存不方便，所以一般转换成流）</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)   <span class="comment">// 创建请求</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>) <span class="comment">// 设置请求头，实际上很多都是不必要的</span></span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept-Language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;DNT&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 Edg/101.0.1210.39&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;X-Authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua&quot;</span>, <span class="string">`&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;101&quot;, &quot;Microsoft Edge&quot;;v=&quot;101&quot;`</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-platform&quot;</span>, <span class="string">`&quot;Windows&quot;`</span>)</span><br><span class="line">resp, err := client.Do(req) <span class="comment">// 发起请求</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close() <span class="comment">// 结束后手动关闭流</span></span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body) <span class="comment">// 读取响应</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, bodyText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到能成功输出一大串的 JSON</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072111654.jpg" alt=""></p><h3 id="生成-request-body">生成 request body</h3><p>但是我们的程序是需要根据输入的不同来查询不同的单词，所以我们需要能自动生成出类似的请求</p><p>先手动构造一个结构体</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 data 改为通过从结构体来获取</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: <span class="string">&quot;good&quot;</span>&#125;</span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br></pre></td></tr></table></figure><p>可以看见一样可以正常响应请求</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072125361.jpg" alt=""></p><h3 id="解析-response-body">解析 response body</h3><p>已经解决的发送请求的问题了，现在需要解析那个巨大的 response</p><p>但是返回的 JSON 非常复杂，如果要手写结构体一一绑定的话不知道要写多久，所以又需要借助于在线工具</p><p>打开 <a href="https://oktools.net/json2go">https://oktools.net/json2go</a> ，把响应的字符串复制过去，再点击『转换-嵌套』，就能得到对应的结构体</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072132100.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072131471.jpg" alt=""></p><p>把这个巨大的结构体复制到代码中，然后更名为 <code>DictResponse</code></p><p>使用 <code>json.Unmarshal</code>  把响应体解析到结构体中，尝试打印一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, dictResponse)</span><br></pre></td></tr></table></figure><p>可以看见，没毛病，十分完美</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072138296.jpg" alt=""></p><h3 id="打印结果">打印结果</h3><p>那最后一步自然是从结构体中挑出我们需要的那部分打印出来就行了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以加上一个状态码检查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;bad StatusCode:&quot;</span>, resp.StatusCode, <span class="string">&quot;body&quot;</span>, <span class="type">string</span>(bodyText))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后包装成函数，得到成品</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DictRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">TransType <span class="type">string</span> <span class="string">`json:&quot;trans_type&quot;`</span></span><br><span class="line">Source    <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">UserID    <span class="type">string</span> <span class="string">`json:&quot;user_id&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DictResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Rc   <span class="type">int</span> <span class="string">`json:&quot;rc&quot;`</span></span><br><span class="line">Wiki <span class="keyword">struct</span> &#123;</span><br><span class="line">KnownInLaguages <span class="type">int</span> <span class="string">`json:&quot;known_in_laguages&quot;`</span></span><br><span class="line">Description     <span class="keyword">struct</span> &#123;</span><br><span class="line">Source <span class="type">string</span>      <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">Target <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;target&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;description&quot;`</span></span><br><span class="line">ID   <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Item <span class="keyword">struct</span> &#123;</span><br><span class="line">Source <span class="type">string</span> <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">Target <span class="type">string</span> <span class="string">`json:&quot;target&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;item&quot;`</span></span><br><span class="line">ImageURL  <span class="type">string</span> <span class="string">`json:&quot;image_url&quot;`</span></span><br><span class="line">IsSubject <span class="type">string</span> <span class="string">`json:&quot;is_subject&quot;`</span></span><br><span class="line">Sitelink  <span class="type">string</span> <span class="string">`json:&quot;sitelink&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;wiki&quot;`</span></span><br><span class="line">Dictionary <span class="keyword">struct</span> &#123;</span><br><span class="line">Prons <span class="keyword">struct</span> &#123;</span><br><span class="line">EnUs <span class="type">string</span> <span class="string">`json:&quot;en-us&quot;`</span></span><br><span class="line">En   <span class="type">string</span> <span class="string">`json:&quot;en&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;prons&quot;`</span></span><br><span class="line">Explanations []<span class="type">string</span>      <span class="string">`json:&quot;explanations&quot;`</span></span><br><span class="line">Synonym      []<span class="type">string</span>      <span class="string">`json:&quot;synonym&quot;`</span></span><br><span class="line">Antonym      []<span class="type">string</span>      <span class="string">`json:&quot;antonym&quot;`</span></span><br><span class="line">WqxExample   [][]<span class="type">string</span>    <span class="string">`json:&quot;wqx_example&quot;`</span></span><br><span class="line">Entry        <span class="type">string</span>        <span class="string">`json:&quot;entry&quot;`</span></span><br><span class="line">Type         <span class="type">string</span>        <span class="string">`json:&quot;type&quot;`</span></span><br><span class="line">Related      []<span class="keyword">interface</span>&#123;&#125; <span class="string">`json:&quot;related&quot;`</span></span><br><span class="line">Source       <span class="type">string</span>        <span class="string">`json:&quot;source&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;dictionary&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(word <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">request := DictRequest&#123;TransType: <span class="string">&quot;en2zh&quot;</span>, Source: word&#125;</span><br><span class="line">buf, err := json.Marshal(request)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = bytes.NewReader(buf)</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;https://api.interpreter.caiyunai.com/v1/dict&quot;</span>, data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;keep-alive&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;DNT&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-version&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;sec-ch-ua-mobile&quot;</span>, <span class="string">&quot;?0&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;app-name&quot;</span>, <span class="string">&quot;xy&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json;charset=UTF-8&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json, text/plain, */*&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;device-id&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;os-type&quot;</span>, <span class="string">&quot;web&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;X-Authorization&quot;</span>, <span class="string">&quot;token:qgemv4jr1y38jyq6vhvi&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Origin&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Site&quot;</span>, <span class="string">&quot;cross-site&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Mode&quot;</span>, <span class="string">&quot;cors&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Sec-Fetch-Dest&quot;</span>, <span class="string">&quot;empty&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Referer&quot;</span>, <span class="string">&quot;https://fanyi.caiyunapp.com/&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Accept-Language&quot;</span>, <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Cookie&quot;</span>, <span class="string">&quot;_ym_uid=16456948721020430059; _ym_d=1645694872&quot;</span>)</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">bodyText, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;bad StatusCode:&quot;</span>, resp.StatusCode, <span class="string">&quot;body&quot;</span>, <span class="type">string</span>(bodyText))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dictResponse DictResponse</span><br><span class="line">err = json.Unmarshal(bodyText, &amp;dictResponse)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(word, <span class="string">&quot;UK:&quot;</span>, dictResponse.Dictionary.Prons.En, <span class="string">&quot;US:&quot;</span>, dictResponse.Dictionary.Prons.EnUs)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> dictResponse.Dictionary.Explanations &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">`usage: simpleDict WORD</span></span><br><span class="line"><span class="string">example: simpleDict hello</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">word := os.Args[<span class="number">1</span>]</span><br><span class="line">query(word)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说，看上去挺好用的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072152277.jpg" alt=""></p><h2 id="SOCKS5-代理">SOCKS5 代理</h2><p>这一节的内容是手动写一个 SOCKS5 代理，代码量比较大</p><p>原视频讲得很详细，代码的每个部分都有解析</p><h3 id="介绍">介绍</h3><p>（略）</p><h3 id="原理">原理</h3><p>如图，要先协商鉴权，然后转发数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072238312.png" alt=""></p><h3 id="TCP-echo-server">TCP echo server</h3><p>先从简单的开始，写一个原路转发所有 TCP 请求的服务器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">b, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;b&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这东西在 Windows 上需要管理员，我是 build 了之后手动以管理员权限运行的</p><p>跑起来之后，我们使用 <code>nc</code> 命令来测试是否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>这个命令 Linux 是自带的，Windows 可以去<a href="https://eternallybored.org/misc/netcat/">网上下载</a></p><p>可以看见成功返回了数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072244075.jpg" alt=""></p><h3 id="认证阶段">认证阶段</h3><p>接下来开始实现协议的第一步：认证阶段，这里就开始变得复杂了</p><p>总体思想就是在缓冲区读取发送过来的 <code>VER</code> 、<code>NMETHODS</code> 和 <code>METHODS</code> 三个字段，鉴别好是这个协议之后，返回 <code>VER</code> 和 <code>METHOD</code> 这两个字段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;auth success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |    1     | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数量</span></span><br><span class="line"><span class="comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span></span><br><span class="line"><span class="comment">// X’00’ NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X’02’ USERNAME/PASSWORD</span></span><br><span class="line"></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;ver&quot;</span>, ver, <span class="string">&quot;method&quot;</span>, method)</span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// |VER | METHOD |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// | 1  |   1    |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>curl</code> 命令测试一下，连接肯定是不成功的（毕竟只写了第一步），但已经成功打印出了 <code>VER</code> 和 <code>METHOD</code> 两个字段，这说明我们当前的实现正确</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072258410.jpg" alt=""></p><h3 id="请求阶段">请求阶段</h3><p>现在代码开始很长了，实现一个 <code>connect</code> 函数，用来代替客户端连接目标服务器（获取用户的需求，然后返回成功）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = connect(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |    1     | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数量</span></span><br><span class="line"><span class="comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span></span><br><span class="line"><span class="comment">// X’00’ NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X’02’ USERNAME/PASSWORD</span></span><br><span class="line"></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// |VER | METHOD |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// | 1  |   1    |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER 版本号，socks5的值为0x05</span></span><br><span class="line"><span class="comment">// CMD 0x01表示CONNECT请求</span></span><br><span class="line"><span class="comment">// RSV 保留字段，值为0x00</span></span><br><span class="line"><span class="comment">// ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。</span></span><br><span class="line"><span class="comment">//   0x01表示IPv4地址，DST.ADDR为4个字节</span></span><br><span class="line"><span class="comment">//   0x03表示域名，DST.ADDR是一个可变长度的域名</span></span><br><span class="line"><span class="comment">// DST.ADDR 一个可变长度的值</span></span><br><span class="line"><span class="comment">// DST.PORT 目标端口，固定2个字节</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read header failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ver, cmd, atyp := buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmd != cmdBind &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported cmd:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">addr := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">switch</span> atyp &#123;</span><br><span class="line"><span class="keyword">case</span> atypIPV4:</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read atyp failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = fmt.Sprintf(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">2</span>], buf[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">case</span> atypeHOST:</span><br><span class="line">hostSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read hostSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">host := <span class="built_in">make</span>([]<span class="type">byte</span>, hostSize)</span><br><span class="line">_, err = io.ReadFull(reader, host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read host failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = <span class="type">string</span>(host)</span><br><span class="line"><span class="keyword">case</span> atypeIPV6:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;IPv6: no supported yet&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;invalid atyp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, err = io.ReadFull(reader, buf[:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read port failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">port := binary.BigEndian.Uint16(buf[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;dial&quot;</span>, addr, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER socks版本，这里为0x05</span></span><br><span class="line"><span class="comment">// REP Relay field,内容取值如下 X’00’ succeeded</span></span><br><span class="line"><span class="comment">// RSV 保留字段</span></span><br><span class="line"><span class="comment">// ATYPE 地址类型</span></span><br><span class="line"><span class="comment">// BND.ADDR 服务绑定的地址</span></span><br><span class="line"><span class="comment">// BND.PORT 服务绑定的端口DST.PORT</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这一步必定还是连接失败的，但我们已经能获得到客户想访问的目标服务器</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072307224.jpg" alt=""></p><h3 id="响应阶段">响应阶段</h3><p>现在是最后一步：真正地和目标服务器建立连接，并转发数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socks5Ver = <span class="number">0x05</span></span><br><span class="line"><span class="keyword">const</span> cmdBind = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypIPV4 = <span class="number">0x01</span></span><br><span class="line"><span class="keyword">const</span> atypeHOST = <span class="number">0x03</span></span><br><span class="line"><span class="keyword">const</span> atypeIPV6 = <span class="number">0x04</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;127.0.0.1:1080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">client, err := server.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Accept failed %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> process(client)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">reader := bufio.NewReader(conn)</span><br><span class="line">err := auth(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = connect(reader, conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;client %v auth failed:%v&quot;</span>, conn.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">auth</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | NMETHODS | METHODS  |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |    1     | 1 to 255 |</span></span><br><span class="line"><span class="comment">// +----+----------+----------+</span></span><br><span class="line"><span class="comment">// VER: 协议版本，socks5为0x05</span></span><br><span class="line"><span class="comment">// NMETHODS: 支持认证的方法数量</span></span><br><span class="line"><span class="comment">// METHODS: 对应NMETHODS，NMETHODS的值为多少，METHODS就有多少个字节。RFC预定义了一些值的含义，内容如下:</span></span><br><span class="line"><span class="comment">// X’00’ NO AUTHENTICATION REQUIRED</span></span><br><span class="line"><span class="comment">// X’02’ USERNAME/PASSWORD</span></span><br><span class="line"></span><br><span class="line">ver, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read ver failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">methodSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read methodSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">method := <span class="built_in">make</span>([]<span class="type">byte</span>, methodSize)</span><br><span class="line">_, err = io.ReadFull(reader, method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read method failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// |VER | METHOD |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line"><span class="comment">// | 1  |   1    |</span></span><br><span class="line"><span class="comment">// +----+--------+</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;socks5Ver, <span class="number">0x00</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(reader *bufio.Reader, conn net.Conn)</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER 版本号，socks5的值为0x05</span></span><br><span class="line"><span class="comment">// CMD 0x01表示CONNECT请求</span></span><br><span class="line"><span class="comment">// RSV 保留字段，值为0x00</span></span><br><span class="line"><span class="comment">// ATYP 目标地址类型，DST.ADDR的数据对应这个字段的类型。</span></span><br><span class="line"><span class="comment">//   0x01表示IPv4地址，DST.ADDR为4个字节</span></span><br><span class="line"><span class="comment">//   0x03表示域名，DST.ADDR是一个可变长度的域名</span></span><br><span class="line"><span class="comment">// DST.ADDR 一个可变长度的值</span></span><br><span class="line"><span class="comment">// DST.PORT 目标端口，固定2个字节</span></span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read header failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ver, cmd, atyp := buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> ver != socks5Ver &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported ver:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cmd != cmdBind &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;not supported cmd:%v&quot;</span>, ver)</span><br><span class="line">&#125;</span><br><span class="line">addr := <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">switch</span> atyp &#123;</span><br><span class="line"><span class="keyword">case</span> atypIPV4:</span><br><span class="line">_, err = io.ReadFull(reader, buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read atyp failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = fmt.Sprintf(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, buf[<span class="number">0</span>], buf[<span class="number">1</span>], buf[<span class="number">2</span>], buf[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">case</span> atypeHOST:</span><br><span class="line">hostSize, err := reader.ReadByte()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read hostSize failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">host := <span class="built_in">make</span>([]<span class="type">byte</span>, hostSize)</span><br><span class="line">_, err = io.ReadFull(reader, host)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read host failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">addr = <span class="type">string</span>(host)</span><br><span class="line"><span class="keyword">case</span> atypeIPV6:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;IPv6: no supported yet&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;invalid atyp&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, err = io.ReadFull(reader, buf[:<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;read port failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">port := binary.BigEndian.Uint16(buf[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">dest, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;%v:%v&quot;</span>, addr, port)) <span class="comment">// 连接目标服务器</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;dial dst failed:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> dest.Close()</span><br><span class="line">log.Println(<span class="string">&quot;dial&quot;</span>, addr, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// | 1  |  1  | X&#x27;00&#x27; |  1   | Variable |    2     |</span></span><br><span class="line"><span class="comment">// +----+-----+-------+------+----------+----------+</span></span><br><span class="line"><span class="comment">// VER socks版本，这里为0x05</span></span><br><span class="line"><span class="comment">// REP Relay field,内容取值如下 X’00’ succeeded</span></span><br><span class="line"><span class="comment">// RSV 保留字段</span></span><br><span class="line"><span class="comment">// ATYPE 地址类型</span></span><br><span class="line"><span class="comment">// BND.ADDR 服务绑定的地址</span></span><br><span class="line"><span class="comment">// BND.PORT 服务绑定的端口DST.PORT</span></span><br><span class="line">_, err = conn.Write([]<span class="type">byte</span>&#123;<span class="number">0x05</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write failed: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background()) <span class="comment">//使用 context 机制持续运行</span></span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = io.Copy(dest, reader)  <span class="comment">// 拷贝数据流</span></span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, _ = io.Copy(conn, dest)  <span class="comment">// 拷贝数据流</span></span><br><span class="line">cancel()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见已经成功完成了转发</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205072313315.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C++』标准模板库（STL）之算法篇</title>
      <link href="/2022/05/06/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87/"/>
      <url>/2022/05/06/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E7%AE%97%E6%B3%95%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>STL 里除了上一篇中的那些好用的容器之外，还提供了大量基于迭代器的非成员模板函数，能大量简化我们的编程工作</p><p>这些模板函数都在 <code>algorithm</code> 头文件里（翻译为算法）</p><p>所以我们需要先引入这个头文件 <code>#include &lt;algorithm&gt;</code> ，同时不要忘记指定命名空间，例如 <code>using namespace std;</code></p><h1 id="max-x-y-、-min-x-y-、-abs-x-和-swap-x-y">max(x,y) 、 min(x,y)  、 abs(x) 和 swap(x,y)</h1><p>这四个一起讲</p><p>如你所见，这几个分别用来求最大值，最小值，绝对值，还有交换两个变量</p><p>对于两个求最值的 <code>x</code> 和 <code>y</code> 不仅可以是整型，还可以是实型</p><p>但是 <code>abs()</code> 只能用于整型，实型要用 <code>fabs()</code></p><p>而对于 <code>swap()</code>，基本上所有地方都能用上</p><p>不过在比赛的话还是建议自己写函数覆盖掉，STL 里的没自己写的块</p><p>当然，你可能说使用宏不会更快吗？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span></span><br></pre></td></tr></table></figure><p>我只能说尽量不要用宏，绝对值用用还行，<strong>最大值和最小值千万别用</strong>（别问我是怎么知道的）</p><h1 id="reverse-s-t">reverse(s,t)</h1><p><code>reverse(s,t)</code> 可以将数组指针在 <code>s</code>~<code>t</code> 之间的元素，或容器的迭代器在 <code>s</code>~<code>t</code> 范围内的所有元素进行反转（老规矩，左闭右开）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(a, a + <span class="number">4</span>); <span class="comment">//将 a[0] 到 a[3] 这4个元素反转</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"><span class="comment">//输出 13 12 11 10 14 15</span></span><br><span class="line">string str = <span class="string">&quot;abcdefghi&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(str.<span class="built_in">begin</span>() + <span class="number">2</span>, str.<span class="built_in">begin</span>() + <span class="number">6</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line"><span class="comment">//输出 abfedcghi</span></span><br></pre></td></tr></table></figure><h1 id="next-permutation">next_permutation()</h1><p><code>next_permutation()</code> 能求出一个序列在全排列中的下一个序列，并在达到全排列的最后一个时会返回  <code>false</code></p><p>例如，<code>123</code> 的全排列为：<code>123</code>，<code>132</code>，<code>213</code>，<code>231</code>，<code>312</code>，<code>321</code>，所以 <code>231</code> 的下一个排列就是 <code>312</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a, a + <span class="number">3</span>));</span><br><span class="line"><span class="comment">// a[0],a[1],a[2]三个元素的排列</span></span><br></pre></td></tr></table></figure><h1 id="fill">fill()</h1><p><code>fill()</code> 可以把数组或容器的某一段区间赋为某个相同的值，和 <code>memset()</code> 不同，这里的赋值可以是数组类型对应范围中的任意值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">fill</span>(a, a + <span class="number">5</span>, <span class="number">123</span>); <span class="comment">// 将 a[0] 到 a[4] 均赋值为 123</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="sort">sort()</h1><p><code>sort()</code>是实现自动排序的函数，鄙人认为它是 STL 中最重要而且也是最常用的函数了</p><p><code>sort()</code> 在具体实现中规避了经典快速排序（包括 C 语言中的 <code>qsort()</code>  函数）可能出现的、会导致实际复杂度退化到 O (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>) 的极端情况。它根据具体情形使用不同的排序方法，效率极高</p><p>它的基本使用格式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(首元素地址, 尾元素地址的下一个地址, 比较函数); <span class="comment">// 为什么说是下一个？因为左闭右开（顾头不顾腚）</span></span><br></pre></td></tr></table></figure><p>我们看到，<code>sort()</code> 有三个参数，其中前两个是必填的，如果数组中的元素是可以直接比较大小的，如 <code>int</code>、<code>double</code>、<code>char</code> 等，可以不指定比较函数，并且默认是递增</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line"><span class="comment">//输出 2 4 5 9 6 -1</span></span><br><span class="line"><span class="type">char</span> c[] = &#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;K&#x27;</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(c, c + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i]); </span><br><span class="line"><span class="comment">//输出 AKTW</span></span><br></pre></td></tr></table></figure><p>如果需要实现递减排序，或者对结构体（本身没有大小关系）等进行排序，就需要用到比较函数，一般写成 <code>cmp</code> 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">// 类型根据实际情况自行修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b; <span class="comment">//可以理解成如果 a&gt;b 就把 a 放在前面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这样使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">6</span>] = &#123;<span class="number">9</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(a, a + <span class="number">6</span>, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); </span><br><span class="line"><span class="comment">//输出9 6 5 4 2 -1</span></span><br></pre></td></tr></table></figure><p>而如果要对结构体进行排序，假设定义了如下的结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">&#125; s[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>下面想要按照 <code>x</code> 从大到小排序，那么排序函数就可以这么写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &gt; b.x; <span class="comment">//按照 x 的值从大到小对结构体进行排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想先按照 <code>x</code> 从大到小排序，在 <code>x</code> 相等的情况下，再按照 <code>y</code> 从小到大排序，即类似的双关键字排序，就可以这么写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，不仅是数组，对于 vector 等 STL 容器也是可以用的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());  </span><br></pre></td></tr></table></figure><h1 id="lower-bound-和-upper-bound">lower_bound() 和 upper_bound ()</h1><p><code>lower_bound(first,last,val)</code> 用来寻找一个有序数组或者容器中 <code>first</code>～<code>last</code> 范围内（左闭右开），第一个 <strong>大于等于</strong>  <code>val</code> 的元素的位置。如果是数组，则返回该位置的指针；如果是容器，则返回该位置的迭代器。<br><code>upper_bound(first,last,val)</code> 用来寻找一个有序数组或者容器中 <code>first</code>～<code>last</code> 范围内（左闭右开），第一个 <strong>大于</strong>   <code>val</code> 的元素的位置。如果是数组，则返回该位置的指针；如果是容器，则返回该位置的迭代器。</p><p>如果数组或者容器中没有需要寻找的元素，则上面两个函数的返回值均为可以插入该值的位置的指针或者迭代器，时间复杂度均为 O(log2(last-first))</p><p><a href="http://www.cplusplus.com/reference/algorithm/lower_bound/">官方文档</a>中的样例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lower_bound/upper_bound example</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>     <span class="comment">// std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span>    <span class="comment">// std::lower_bound, std::upper_bound, std::sort</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span>       <span class="comment">// std::vector</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> myints[] = &#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">20</span>&#125;;</span><br><span class="line">  <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(myints,myints+<span class="number">8</span>)</span></span>;           <span class="comment">// 10 20 30 30 20 10 10 20</span></span><br><span class="line"></span><br><span class="line">  std::<span class="built_in">sort</span> (v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());                <span class="comment">// 10 10 10 20 20 20 30 30</span></span><br><span class="line"></span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt;::iterator low,up;</span><br><span class="line">  low=std::<span class="built_in">lower_bound</span> (v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">20</span>); <span class="comment">//          ^</span></span><br><span class="line">  up= std::<span class="built_in">upper_bound</span> (v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">20</span>); <span class="comment">//                   ^</span></span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;lower_bound at position &quot;</span> &lt;&lt; (low- v.<span class="built_in">begin</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;upper_bound at position &quot;</span> &lt;&lt; (up - v.<span class="built_in">begin</span>()) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你也可以指定自己的比较函数（<a href="https://www.jianshu.com/p/cb0d5488bb6a">阅读原文</a>）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">point</span>&#123;</span><br><span class="line">    <span class="built_in">point</span>()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">point</span>(<span class="type">int</span> _x, <span class="type">int</span> _y)&#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(point a, point b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span>&#123;</span><br><span class="line">    point a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    a[<span class="number">0</span>].x = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">0</span>].y = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">1</span>].x = <span class="number">100</span>;</span><br><span class="line">    a[<span class="number">1</span>].y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">2</span>].x = <span class="number">30</span>;</span><br><span class="line">    a[<span class="number">2</span>].y = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">3</span>].x = <span class="number">25</span>;</span><br><span class="line">    a[<span class="number">3</span>].y = <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    a[<span class="number">4</span>].x = <span class="number">301</span>;</span><br><span class="line">    a[<span class="number">4</span>].y = <span class="number">103</span>;</span><br><span class="line">    <span class="comment">// 随便赋值</span></span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">5</span>, cmp);</span><br><span class="line">    <span class="comment">// 先排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a[%d].x = %d, a[%d].y = %d\n&quot;</span>, i, a[i].x, i, a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出会发现他们按照x从小到大排序了</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="built_in">point</span>(<span class="number">1</span>, <span class="number">1000</span>), cmp) - a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 第一个x值大于1的元素是(1, 100)这个元素，它的下标为0</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="built_in">point</span>(<span class="number">101</span>, <span class="number">1000</span>), cmp) - a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 第一个x值大于101的元素是(301, 103)这个元素，它的下标为4</span></span><br><span class="line">    cout &lt;&lt; (<span class="built_in">lower_bound</span>(a, a + <span class="number">5</span>, <span class="built_in">point</span>(<span class="number">1000</span>, <span class="number">1000</span>), cmp) - a) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 因为找不到所以返回a + 5，再减a就是5</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C++』标准模板库（STL）之容器篇</title>
      <link href="/2022/05/05/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E5%AE%B9%E5%99%A8%E7%AF%87/"/>
      <url>/2022/05/05/%E3%80%8EC-%E3%80%8F%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%BA%93%EF%BC%88STL%EF%BC%89%E4%B9%8B%E5%AE%B9%E5%99%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>鄙人认为 C++ 相比 C 最大的更新就是内置的 STL 了，里面封装了一堆好用的容器，而不用关心其内部实现的原理和具体代码，十分方便快捷，除了容器外还有一堆算法，这个在下一篇会讲</p><p>本文仅记录我认为比较常用的容器，例如 <code>pair</code> 这种比较鸡肋的就不记录了</p><blockquote><p>注意：使用 STL 必须要定义命名空间，例如<code>using namespace std;</code></p></blockquote><h1 id="Vector">Vector</h1><p><code>vector</code> 直译为“向量”，但是一般当成可变长的数组用</p><p>众所周知，C/C++ 中的数组一旦定义就无法改变长度，而 <code>vector</code>  就可以解决这个问题，但是代价也是明显的：运行速度更慢</p><p>记得使用 <code>#include &lt;vector&gt;</code> 来引入头文件</p><h2 id="定义-2">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>以上定义相当于定义了一个一维数组 <code>name[size]</code> ，但是 <code>size</code> 不确定，其长度可以根据需要而变化。其中 <code>typename</code> 可以是任何基本类型，例如 <code>int</code>、 <code>double</code> 、<code>char</code> 、结构体等，也可以套娃 STL 标准容器，例如 <code>vector</code> 、 <code>queue</code> 等</p><h2 id="访问-2">访问</h2><h3 id="使用下标">使用下标</h3><p>这就像是访问传统的数组一样，非常方便，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v[index]);</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>不能越界，不然会报错</li><li>这种方法仅限于访问，不能通过它来修改</li></ul><h3 id="使用迭代器">使用迭代器</h3><p>可以将迭代器（<code>iterator</code>）理解为一种类似指针的变量。其定义为：<code>vector&lt;typename&gt;::iterator it;</code> ，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it= v.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*(it + i));</span><br></pre></td></tr></table></figure><h2 id="常用方法">常用方法</h2><ul><li><code>push_back(x)</code> ：在后面添加一个元素 <code>x</code>，时间复杂度为 O(1)</li><li><code>size()</code> ： 用来获得元素的个数</li><li><code>pop_back()</code> ：弹出尾元素，时间复杂度为 O(1)</li><li><code>clear()</code> ：清空所有元素，时间复杂度为 O(n)</li><li><code>insert(it,x)</code> ：在迭代器 <code>it</code> 处插入一个元素 <code>x</code>，时间复杂度为 O(n)</li><li><code>erase()</code> ：删除元素，使用 <code>erase(it)</code>删除迭代器 <code>it</code> 处的元素（时间复杂度为 O(1)），或使用 <code>erase(first,last)</code> 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)）</li></ul><h1 id="Stack">Stack</h1><p><code>stack</code> 翻译为栈，是一种“后进先出”的容器，只能通过 <code>top()</code> 和 <code>pop()</code> 来访问栈顶元素</p><p>记得使用 <code>#include &lt;stack&gt;</code> 来引入头文件</p><h2 id="定义-3">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>类似地，<code>typename</code> 可以是任何基本类型或者容器，<code>name</code> 是栈的名字</p><h2 id="常用方法-2">常用方法</h2><ul><li><code>push(x)</code> ：将 <code>x</code> 压入栈，时间复杂度为 O(1)</li><li><code>top()</code> ：获得栈顶元素（但不删除），时间复杂度为 O(1)</li><li><code>pop()</code> ：弹出栈顶元素，时间复杂度为 O(1)</li><li><code>empty()</code> ：检测是否为空，空返回 <code>true</code>，否则返回 <code>false</code>，时间复杂度为 O(1)</li><li><code>size()</code> ：返回元素个数，时间复杂度为 O(1)</li></ul><h1 id="Queue">Queue</h1><p><code>queue</code> 翻译为队列，是一种“先进先出”的容器，只能通过函数 <code>front()</code> 来访问队首元素，或通过函数  <code>back()</code> 来访问队尾元素</p><p>记得使用 <code>#include &lt;queue&gt;</code> 来引入头文件</p><h2 id="定义-4">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>其中，<code>typename</code> 可以是任何基本类型或者容器，<code>name</code> 为队列的名字</p><h2 id="常用方法-3">常用方法</h2><ul><li><code>push(x)</code> ：将 <code>x</code> 入队，时间复杂度为 O(1)</li><li><code>front()</code> ：获取队首元素，时间复杂度为 O(1)</li><li><code>back()</code>  ：获取队尾元素，时间复杂度为 O(1)</li><li><code>pop()</code> ：让队首元素出队，时间复杂度为 O(1)</li><li><code>empty()</code> ：检测是否为空，空返回 <code>true</code>，否则返回 <code>false</code>，时间复杂度为 O(1)</li><li><code>size()</code> ：返回元素个数，时间复杂度为 O(1)</li></ul><h2 id="priority-queue">priority_queue</h2><p>STL 中还有两种容器与队列有关，分别是双端队列（<code>deque</code>）和优先队列（<code>priority_queue</code>）</p><p>但是用的最多的还是优先队列，简单的说就是可以同时帮你在内部排序的队列</p><p>基本定义式与一般队列相似，但如果要指定排序方向，则需要复杂一点，请看下面的两个实例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt; &gt; q;</span><br></pre></td></tr></table></figure><p>第二种定义方式的尖括号内多出了 2 个参数：一个是 <code>vector&lt;int&gt;</code> ， 表示的是承载底层数据结构——堆（<code>heap</code>）的容器，其类型要与第 1 个参数一致；另一个是 <code>less&lt;int&gt;</code> ，是对第 1 个参数的比较类， <code>less&lt;int&gt;</code> 表示数字越大的优先级越大（大根堆），而如果用 <code>greater&lt;int&gt;</code> 则表示数字越小的优先级越大（小根堆）</p><p>一定要记得 <code>less</code> 是大在前， <code>greater</code> 是小在前</p><p>而默认的就是大在前，所以这两个定义其实是一样的</p><p>它的方法与 <code>queue</code> 大同小异，但是也有不同：</p><ul><li><code>push()</code> 方法的时间复杂度提升为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span> ，毕竟内部要排序</li><li>没有了 <code>front()</code> 和 <code>back()</code> 方法，只能通过 <code>top()</code> 或 <code>pop()</code> 访问队首元素</li></ul><h1 id="Map">Map</h1><p><code>map</code> 翻译为映射，是STL中的常用容器。其实，数组就是一种映射，比如：<code>int a[100];</code> 就是定义了一个 <code>int</code> 到 <code>int</code> 的映射。而 <code>a[5]=25;</code> 就是把 5 映射到 25。数组总是将 <code>int</code> 类型映射到其它基本类型（称为数组的基类型），这同时也带来了一个问题，有时候我们希望把 <code>string</code> 映射成一个 <code>int</code>，数组就不方便了。这时就可以使用 <code>map</code>，<code>map</code> 可以将任何基本类型（包括STL容器）映射到任何基本类型（包括STL容器）</p><p>记得使用 <code>#include &lt;map&gt;</code> 来引入头文件</p><h2 id="定义-5">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;typename1,typename2&gt; name;</span><br></pre></td></tr></table></figure><p>其中，<code>typename1</code> 是映射前的类型（键 <code>key</code>），<code>typename2</code> 是映射后的类型（值 <code>value</code>），<code>name</code> 为映射的名字</p><h2 id="访问-3">访问</h2><p>和 vector 类似，有下标和迭代器两种方法</p><h3 id="使用下标-2">使用下标</h3><p>通过下标访问就像普通的数组元素访问，例如先定义 <code>map&lt;char,int&gt; mp</code> ，然后就可以通过 <code>mp['c']</code> 的方式来访问它对应的元素，如 <code>mp['c']=124</code></p><p>与 vector 不同，你可以用这种方法直接添加键值对</p><h3 id="使用迭代器-2">使用迭代器</h3><p>通过迭代器访问，先作如下定义：<code>map&lt;typename1,typename2&gt;::iterator it;</code></p><p>因为 map 的每一对映射都有两个 <code>typename</code> ，所以，我们使用 <code>it-&gt;first</code> 来访问键，而使用 <code>it-&gt;second</code> 来访问值</p><h2 id="常用方法-4">常用方法</h2><ul><li><code>find(key)</code> ：返回键为 <code>key</code> 的映射的迭代器，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</li><li><code>size()</code> ：获得映射的对数，时间复杂度为 O(1)</li><li><code>clear()</code> ：清空所有映射，时间复杂度为 O(n)</li><li><code>erase()</code> ：与 vector 中的相同：删除元素，使用 <code>erase(it)</code>删除迭代器 <code>it</code> 指向的元素（时间复杂度为 O(1)），或使用 <code>erase(first,last)</code> 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)），但是还多了一个用法：<code>erase(key)</code> ，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</li></ul><h1 id="Set">Set</h1><p><code>set</code> 翻译为集合，是一个内部自动有序且不含重复元素的容器。<code>set</code> 最主要的作用就是自动去重并按升序排序，因此遇到需要去重但是又不方便直接开数组的情况。<code>set</code> 中的元素是唯一的，其内部采用“红黑树”实现</p><p>记得使用 <code>#include &lt;map&gt;</code> 来引入头文件</p><h2 id="定义-6">定义</h2><h3 id="方法一">方法一</h3><p>基础模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">typename</span>&gt; name;</span><br></pre></td></tr></table></figure><p>其中，<code>typename</code> 可以是任何基本类型或者容器，<code>name</code> 是集合的名字</p><p>当然有些时候会定义 set 数组，例如：<code>set&lt;int&gt; st[100];</code> ，这样 <code>st[0]～st[99]</code> 中的每一个元素都是一个 set 容器</p><h3 id="方法二">方法二</h3><p>直接通过花括号枚举我们要传入<code>set</code>的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; st&#123;<span class="string">&quot;good&quot;</span>, <span class="string">&quot;bad&quot;</span>, <span class="string">&quot;medium&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="方法三">方法三</h3><p>从其他结构导入元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set&lt;string&gt; st&#123;<span class="string">&quot;good&quot;</span>, <span class="string">&quot;bad&quot;</span>, <span class="string">&quot;medium&quot;</span>&#125;;</span><br><span class="line"><span class="function">set&lt;string&gt; <span class="title">st2</span><span class="params">(st)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> myints[] = &#123;<span class="number">75</span>,<span class="number">23</span>,<span class="number">65</span>,<span class="number">42</span>,<span class="number">13</span>&#125;;</span><br><span class="line"><span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">myset</span> <span class="params">(myints, myints+<span class="number">5</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="访问-4">访问</h2><p>set 只能通过迭代器访问。即先定义一个迭代器：<code>set&lt;typename&gt;::iterator it;</code> 然后使用 <code>*it</code>来访问 set 中的元素，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (std::set&lt;<span class="type">int</span>&gt;::iterator it=myset.<span class="built_in">begin</span>(); it!=myset.<span class="built_in">end</span>(); ++it)</span><br><span class="line">    cout &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *it;</span><br></pre></td></tr></table></figure><p>注意 set 不支持 <code>*(it+i)</code> 或 <code>it &lt; st.end()</code> 的访问方式（实际上除了 vector 和 string 之外的 STL 容器都不支持）</p><h2 id="常用方法-5">常用方法</h2><ul><li><p><code>insert(x)</code></p></li><li><p><code>find(value)</code> ：返回对应值为 <code>value</code> 的迭代器，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</p></li><li><p><code>size()</code> ：获得元素个数，时间复杂度为 O(1)</p></li><li><p><code>clear()</code> ：清空所有元素，时间复杂度为 O(n)</p></li><li><p><code>erase()</code> ：</p><p>与 map 相同，有三种用法</p><ul><li><code>erase(it)</code> ，删除迭代器 <code>it</code> 指向的元素（时间复杂度为 O(1)），</li><li><code>erase(first,last)</code> ， 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)）</li><li><code>erase(value)</code>  ，时间复杂度为 O( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">\log _{2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>)</li></ul></li></ul><h1 id="String">String</h1><p>在 C 中，一般使用字符数组 <code>char str[]</code> 来存放字符串，但是操作麻烦，容易出错。C++ 在 STL 中加入了 <code>string</code> 类型，对字符串常用的需求功能进行了封装，使得操作起来更加方便，且不必担心内存是否足够、字符串的长度等问题</p><h2 id="定义-7">定义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string name;</span><br></pre></td></tr></table></figure><p>其中 <code>name</code> 是字符串变量的名字</p><p>当然，你也可以当场就初始化，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;abcd&quot;</span></span><br></pre></td></tr></table></figure><h2 id="访问-5">访问</h2><h3 id="使用下标-3">使用下标</h3><p>就像普通字符数组一样操作，非常方便</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string str= <span class="string">&quot;abcd&quot;</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">length</span>(); i++) <span class="built_in">printf</span>( <span class="string">&quot;%c&quot;</span> ,str[i]);</span><br></pre></td></tr></table></figure><h3 id="使用迭代器-3">使用迭代器</h3><p>先定义 string 迭代器 <code>string::iterator it</code> ，然后就可以通过 <code>*it</code> 来访问 string 里的每一个字符了，例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string str=<span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(string::iterator it = str.<span class="built_in">begin</span>() + <span class="number">2</span>; it != str.<span class="built_in">end</span>(); it++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,*it); <span class="comment">//输出 cdefg</span></span><br></pre></td></tr></table></figure><h2 id="输入输出">输入输出</h2><p>如果要读入或者输出整个字符串，一般只能用 <code>cin</code> 和 <code>cout</code> ，如果非要用<code>printf</code> 输出 <code>string</code>，则需要用 <code>c_str()</code> 方法将 string 转换成字符数组，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;</span><br><span class="line">cout&lt;&lt;str&lt;&lt;endl;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><h2 id="运算">运算</h2><p>string 可以使用 <code>+</code> 来连接两个字符串，大小比较也是可以使用的</p><h2 id="常用方法-6">常用方法</h2><ul><li><p><code>length() </code>和 <code>size()</code> ：求长度，时间复杂度为 O(1)<a href="https://www.zhihu.com/question/23925936">（?）</a>，二者完全相同</p></li><li><p><code>clear()</code> ：清空，时间复杂度为 O(1) （鄙人疑惑：为什么不是 O(n)）</p></li><li><p><code>substr(pos,len)</code> ：返回从 <code>pos</code> 号位置开始、长度为 <code>len</code> 的子串，时间复杂度为 O(n)</p></li><li><p><code>insert ()</code>：</p><p>有多种写法，时间复杂度都是 O(n)</p><ul><li><code>insert(pos,string)</code> ：在 <code>pos</code> 号位置插入字符串 <code>string</code></li><li><code>insert(it,it2,it3)</code> ：<code>it</code> 为原字符串的欲插入位置，<code>it2</code> 和 <code>it3</code> 为待插入字符串的首尾迭代器（左闭右开区间）</li></ul></li><li><p><code>erase()</code> ：</p><ul><li><code>erase(it)</code> ，删除迭代器 <code>it</code> 指向的元素（时间复杂度为 O(1)），</li><li><code>erase(first,last)</code> ， 删除左闭右开区间 <code>[first,last)</code> 内的所有元素（时间复杂度为 O(last-first)）</li><li><code>erase(pos,length)</code> ，从 <code>pos</code> 位置开始删 <code>length</code> 个字符（时间复杂度为 O(length)）</li></ul></li><li><p><code>find()</code> ：</p><p>两种写法，时间复杂度都是 O(n*m)</p><ul><li><code>str.find(str2)</code> ，当 <code>str2</code> 是 <code>str</code> 的子串时，返回其在 <code>str</code> 中第一次出现的位置；否则返回<code>string::npos</code>。<code>string::npos</code> 是一个常数，其本身的值等于 -1，但由于是 <code>unsigned int</code> 类型，因此，也可以认为是 <code>unsigned int</code> 类型的最大值</li><li><code>str.find(str2,pos)</code> ，是从 <code>str</code> 的 <code>pos</code> 号位开始匹配 <code>str2</code> ，返回值同上</li></ul></li><li><p><code>replace()</code> ：</p><p>两种写法，时间复杂度都是 O(str.length)</p><ul><li><code>str.replace(pos,len,str2)</code> ：表示把 <code>str</code> 从 <code>pos</code> 号位开始、长度为 <code>len</code> 的子串替换为 <code>str2</code></li><li><code>str.replace(it1,it2,str2)</code> ：表示把 <code>str</code> 的迭代器 <code>it1</code> ~ <code>it2</code> 范围内（左闭右开区间）的子串替换为 <code>str2</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（五）复合数据类型之数组</title>
      <link href="/2022/05/05/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2022/05/05/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>首先，在 Go 中数组基本用不上，一般用的都是切片（slice）</p><p>因为 Go 与 C 中的数组有一个很大的不同，这个下面会讲，先说一些基本的东西</p><h1 id="声明">声明</h1><p>这个应该很好理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>             <span class="comment">// array of 3 integers</span></span><br></pre></td></tr></table></figure><h1 id="初始化">初始化</h1><h2 id="基础的写法">基础的写法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> q [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> r [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(r[<span class="number">2</span>]) <span class="comment">// &quot;0&quot;</span></span><br></pre></td></tr></table></figure><h2 id="根据元素个数确定长度">根据元素个数确定长度</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">q := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, q) <span class="comment">// &quot;[3]int&quot;</span></span><br></pre></td></tr></table></figure><p>注意不是 <code>[]int&#123;1, 2, 3&#125;</code> ，这是切片的写法</p><h2 id="使用索引和对应值初始化">使用索引和对应值初始化</h2><p>这是一种 C 里没有的方法，算是一种改进</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r := [...]<span class="type">int</span>&#123;<span class="number">99</span>: <span class="number">-1</span>&#125;</span><br></pre></td></tr></table></figure><p>定义了一个含有 100 个元素的数组 <code>r</code>，最后一个元素被初始化为 -1，其它元素都是用 0 初始化</p><h1 id="求长度">求长度</h1><p>使用 <code>len()</code> 函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="type">int</span>             <span class="comment">// array of 3 integers</span></span><br><span class="line">fmt.Println(a[<span class="built_in">len</span>(a)<span class="number">-1</span>]) <span class="comment">// print the last element, a[2]</span></span><br></pre></td></tr></table></figure><h1 id="for-遍历">for 遍历</h1><p>Go 中的 for 基本就和 Python 中的一模一样，分别返回下标和值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print the indices and elements.</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d %d\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以只接收值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Print the elements only.</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="与-C-中数组的不同">与 C 中数组的不同</h1><p>与 C 相比，最大的区别就是：在 Go 中，数组的长度也是类型的一部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, q) <span class="comment">// &quot;[3]int&quot;</span></span><br></pre></td></tr></table></figure><p>就如你看见的那样，类型叫做 <code>[3]int</code> 而不是 <code>[]int</code> 或者 <code>*int</code></p><p>这就是一个很大的问题：在写函数的时候，输入数组的长度必须是相同的</p><p>而且在较新版本的 C 中，数组在声明时可以用一个变量来动态地确定它的长度</p><p>但 Go 中不行，数组的的长度必须编译时就确定下来</p><p>这两点就使数组非常僵化，极大地限制了数组的应用，除了像 SHA256 这类需要处理特定大小数组的特例外，数组很少用作函数参数</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』TIM和微信如何备份聊天记录</title>
      <link href="/2022/05/05/%E3%80%8EOthers%E3%80%8FTIM%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/05/05/%E3%80%8EOthers%E3%80%8FTIM%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BD%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>很多情况下都有备份社交软件聊天记录的需求，这里总结了 TIM 和 微信 的备份方法</p><p>如果你想问 QQ 的话，其实跟 TIM 是大同小异的</p><p>总的来说，聊天记录有在手机上的，也有在 PC 上的，所以本文分为两个部分</p><h1 id="移动端">移动端</h1><h2 id="TIM">TIM</h2><p>首先在 PC 端主界面的 <code>『菜单』</code> 中找到 <code>『备份与恢复』</code> -&gt; <code>『备份至电脑』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050839290.jpg" alt=""></p><p>然后你就可以开始操作了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050909253.jpg" alt=""></p><h2 id="微信">微信</h2><p>这个和 TIM 差别不大，在 PC 端的<code>『菜单』</code>中找到<code>『备份与恢复』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050906346.jpg" alt=""></p><p>之后也是类似的操作</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050908824.jpg" alt=""></p><h1 id="PC-端">PC 端</h1><h2 id="TIM-2">TIM</h2><p>这里可以分为使用官方的途径，或者自己手动备份</p><h3 id="官方入口">官方入口</h3><p>首先在任意聊天记录打开 <code>『消息管理器』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050850645.jpg" alt=""></p><p>然后在右上角的箭头处找到 <code>『导出全部消息记录』</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050852860.jpg" alt=""></p><p>导出时不知道为什么我需要操作两次才能生成文件，可能是打包也需要点时间</p><p>不过我导出来只有大概 1G ，我怀疑只有部分的数据，个人还是建议下面的方法</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050853705.jpg" alt=""></p><h3 id="简单粗暴的方法">简单粗暴的方法</h3><p>这就属于手动备份了，在文件资源管理器中打开你的 <code>文档</code> 文件夹，找到 <code>Tencent Files</code>，所有的聊天记录及文件都在这里（如果你没有改过设置的话）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050858583.jpg" alt=""></p><p>还原时将其手动复制到相同位置即可</p><h2 id="微信-2">微信</h2><p>对于微信，目前我没有找到官方入口，所以只有手动备份一种方法</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205050904528.jpg" alt=""></p><blockquote><p>PS：手动备份本人在 Windows Sandbox 中亲测有效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（四）基本数据类型之字符串</title>
      <link href="/2022/05/04/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2022/05/04/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="定义">定义</h1><p>有的人说 Golang = C + Python ，这句话不假，像函数、数值变量的类型等都能看见 C 的影子，而 Go 中最像 Python 的地方就是字符串了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure><h1 id="访问">访问</h1><p>这点和 Python 一模一样</p><p>使用索引</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(s[<span class="number">0</span>], s[<span class="number">7</span>]) <span class="comment">// &quot;104 119&quot; (&#x27;h&#x27; and &#x27;w&#x27;)</span></span><br></pre></td></tr></table></figure><p>使用切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(s[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">fmt.Println(s[:<span class="number">5</span>]) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">fmt.Println(s[<span class="number">7</span>:]) <span class="comment">// &quot;world&quot;</span></span><br><span class="line">fmt.Println(s[:])  <span class="comment">// &quot;hello, world&quot;</span></span><br></pre></td></tr></table></figure><h1 id="运算符">运算符</h1><p>使用 <code>+</code> 可以连接两个字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;goodbye&quot;</span> + s[<span class="number">5</span>:]) <span class="comment">// &quot;goodbye, world&quot;</span></span><br></pre></td></tr></table></figure><p>比较大小也与 Python 中的相同</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println</span>(<span class="string">&quot;123&quot;</span> &gt; <span class="string">&quot;120000&quot;</span>) <span class="comment">// True</span></span><br></pre></td></tr></table></figure><h1 id="编辑">编辑</h1><p>和 Python 一样，字符串是不能手动编辑的，那么如果你真的想编辑的话，可以将其转换成 <code>byte</code> 的切片，然后再编辑</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = []<span class="type">byte</span>(a)</span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&#x27;H&#x27;</span></span><br><span class="line">a = <span class="type">string</span>(b)</span><br><span class="line">fmt.Println(a) <span class="comment">// &quot;Hello&quot;</span></span><br></pre></td></tr></table></figure><p>不过，当文本包含中文字符时，就需要转换成 <code>rune</code> 的切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = []<span class="type">rune</span>(a)</span><br><span class="line">b[<span class="number">0</span>] = <span class="string">&#x27;您&#x27;</span></span><br><span class="line">a = <span class="type">string</span>(b)</span><br><span class="line">fmt.Println(a) <span class="comment">// &quot;您好&quot;</span></span><br></pre></td></tr></table></figure><h1 id="求长度-2">求长度</h1><p>一般来说，直接 <code>len(s)</code> 即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;hello&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>同样的，在有中文的场景下，需要先转换成 <code>rune</code> 的切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;你好&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a)) <span class="comment">// 6 </span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>([]<span class="type">rune</span>(a))) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h1 id="相关函数">相关函数</h1><h2 id="strings-包"><code>strings</code> 包</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td><mark class="hl-label green">Count</mark> (s, substr string) int</td><td>计算子串<code>substr</code>在字符串<code>s</code>中出现的次数</td></tr><tr><td>Compare(a, b string) int</td><td>比较字符串大小</td></tr><tr><td><mark class="hl-label green">Contains</mark> (s, substr string) bool</td><td>判断字符串<code>s</code>中是否包含子串<code>substr</code></td></tr><tr><td>ContainsAny(s, chars string) bool</td><td>判断字符串<code>s</code>中是否包含<code>chars</code>中的某个Unicode字符</td></tr><tr><td>ContainsRune(s string, r rune) bool</td><td>判断字符串<code>s</code>中是否包含rune型值为<code>r</code>的字符</td></tr><tr><td><mark class="hl-label green">Index</mark> (s, substr string) int</td><td>查找子串<code>substr</code>在字符串<code>s</code>中第一次出现的位置，如果找不到则返回 -1，如果<code>substr</code>为空，则返回 0</td></tr><tr><td>LastIndex(s, substr string) int</td><td>查找子串<code>substr</code>在字符串<code>s</code>中最后出现的位置</td></tr><tr><td>IndexRune(s string, r rune) int</td><td>查找rune型值为<code>r</code>的字符在字符串<code>s</code>中出现的起始位置</td></tr><tr><td>IndexAny(s, chars string) int</td><td>查找字符串<code>chars</code>中字符，在字符串<code>s</code>中出现的起始位置</td></tr><tr><td>LastIndexAny(s, chars string) int</td><td>查找字符串<code>s</code>中出现<code>chars</code>中字符的最后位置</td></tr><tr><td>LastIndexByte(s string, c byte) int</td><td>查找byte型字符<code>c</code>在字符串<code>s</code>中的位置</td></tr><tr><td>SplitN(s, sep string, n int) []string</td><td>以字符串<code>sep</code>为分隔符，将字符串<code>s</code>切分成<code>n</code>个子串，结果中<strong>不包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。参数<code>n</code>表示最多切出几个子串，<code>s</code>超出切分大小时，超出部分不再切分。<code>n</code>超出切分子串个数时，返回实际切分子串数。如果<code>n</code>为 0，则返回 nil；如果<code>n</code>小于 0，则不限制切分个数，全部切分</td></tr><tr><td>SplitAfterN(s, sep string, n int) []string</td><td>以字符串<code>sep</code>为分隔符，将字符串<code>s</code>切分成<code>n</code>个子串，结果中<strong>包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。参数<code>n</code>表示最多切出几个子串，<code>s</code>超出切分大小时，超出部分不再切分。<code>n</code>超出切分子串个数时，返回实际切分子串数。如果<code>n</code>为 0，则返回 nil；如果<code>n</code>小于 0，则不限制切分个数，全部切分</td></tr><tr><td>Split(s, sep string) []string</td><td>以字符串<code>sep</code>为分隔符，将<code>s</code>切分成多个子串，结果中<strong>不包含</strong><code>sep</code>本身。如果<code>sep</code>为空，则将<code>s</code>切分成 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串，则将整个<code>s</code>作为 []string 的第一个元素返回</td></tr><tr><td>SplitAfter(s, sep string) []string</td><td>以字符串<code>sep</code>为分隔符，将<code>s</code>切分成多个子串，结果中<strong>包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。</td></tr><tr><td><mark class="hl-label green">Fields</mark> (s string) []string</td><td>以连续的空白字符为分隔符，将<code>s</code>切分成多个子串，结果中不包含空白字符本身。空白字符有：\t, \n, \v, \f, \r, ‘’, U+0085 (NEL), U+00A0 (NBSP) 。如果<code>s</code>中只包含空白字符，则返回一个空切片</td></tr><tr><td>FieldsFunc(s string, f func(rune) bool) []string</td><td>以一个或多个满足函数<code>f(rune)</code>的字符为分隔符，将<code>s</code>切分成多个子串，结果中不包含分隔符本身。如果<code>s</code>中没有满足<code>f(rune)</code>的字符，则返回一个空切片</td></tr><tr><td><mark class="hl-label green">Join</mark> (a []string, sep string) string</td><td>以<code>sep</code>为拼接符，拼接切片<code>a</code>中的字符串</td></tr><tr><td><mark class="hl-label green">HasPrefix</mark> (s, prefix string) bool</td><td>判断字符串<code>s</code>是否以<code>prefix</code>字符串开头，是返回 true，否则返回 false</td></tr><tr><td>HasSuffix(s, suffix string) bool</td><td>判断字符串<code>s</code>是否以<code>suffix</code>字符串结尾，是返回 true，否则返回 false</td></tr><tr><td>Map(f func(rune) rune, s string) string</td><td>将字符串<code>s</code>中满足函数<code>f(rune)</code>的字符替换为<code>f(rune)</code>的返回值。如果<code>f(rune)</code>返回负数，则相应的字符将被删除</td></tr><tr><td>Repeat(s string, count int) string</td><td>返回字符串<code>s</code>重复<code>count</code>次数后的结果</td></tr><tr><td>ToUpper(s string) string</td><td>将字符串<code>s</code>中的小写字符转为大写</td></tr><tr><td>ToLower(s string) string</td><td>将字符串<code>s</code>中的大写字符转为小写</td></tr><tr><td>ToTitle(s string) string</td><td>将字符串<code>s</code>中的首个单词转为<code>Title</code>形式，大部分字符的<code>Title</code>格式就是<code>Upper</code>格式</td></tr><tr><td>ToUpperSpecial(c unicode.SpecialCase, s string) string</td><td>将字符串<code>s</code>中的所有字符修改为其大写格式，优先使用<code>c</code>中的规则进行转换</td></tr><tr><td>ToLowerSpecial(c unicode.SpecialCase, s string) string</td><td>将字符串<code>s</code>中的所有字符修改为其小写格式，优先使用<code>c</code>中的规则进行转换</td></tr><tr><td>ToTitleSpecial(c unicode.SpecialCase, s string) string</td><td>将字符串<code>s</code>中的所有字符修改为其<code>Title</code>格式，优先使用<code>c</code>中的规则进行转换</td></tr><tr><td>Title(s string) string</td><td>将字符串<code>s</code>中的所有单词的首字母修改为其<code>Title</code>格式（BUG: Title 规则不能正确处理 Unicode 标点符号）</td></tr><tr><td>TrimLeftFunc(s string, f func(rune) bool) string</td><td>删除字符串<code>s</code>左边连续满足<code>f(rune)</code>的字符</td></tr><tr><td>TrimRightFunc(s string, f func(rune) bool) string</td><td>删除字符串<code>s</code>右边连续满足<code>f(rune)</code>的字符</td></tr><tr><td>TrimFunc(s string, f func(rune) bool) string</td><td>删除字符串<code>s</code>左右两边连续满足<code>f(rune)</code>的字符</td></tr><tr><td>IndexFunc(s string, f func(rune) bool) int</td><td>查找字符串<code>s</code>中第一个满足<code>f(rune)</code>的字符的字节位置，没有返回 -1</td></tr><tr><td>LastIndexFunc(s string, f func(rune) bool) int</td><td>查找字符串<code>s</code>中最后一个满足<code>f(rune)</code>的字符的字节位置，没有返回 -1</td></tr><tr><td>Trim(s string, cutset string) string</td><td>删除字符串<code>s</code>左右两边连续包含<code>cutset</code>的字符</td></tr><tr><td>TrimLeft(s string, cutset string) string</td><td>删除字符串<code>s</code>左边连续包含<code>cutset</code>的字符</td></tr><tr><td>TrimRight(s string, cutset string) string</td><td>删除字符串<code>s</code>右边连续包含<code>cutset</code>的字符</td></tr><tr><td>TrimSpace(s string) string</td><td>删除字符串<code>s</code>左右两边连续的空白字符</td></tr><tr><td>TrimPrefix(s, prefix string) string</td><td>删除字符串<code>s</code> 头部的<code>prefix</code>字符串</td></tr><tr><td>TrimSuffix(s, suffix string) string</td><td>删除字符串<code>s</code> 尾部的<code>suffix</code>字符串</td></tr><tr><td>Replace(s, old, new string, n int) string</td><td>替换字符串<code>s</code>中的<code>old</code>为<code>new</code>，如果<code>old</code>为空则在<code>s</code>中的每个字符间插入<code>new</code>包括首尾，<code>n</code>为替换次数， -1 时替换所有</td></tr><tr><td>EqualFold(s, t string) bool</td><td>忽略大小写比较字符串<code>s</code>和<code>t</code>，相同返回 true，反之返回 false</td></tr></tbody></table><h2 id="byte-包"><code>byte</code> 包</h2><p>前面讲了有时需要将 <code>string</code> 转换成 <code>[]byte</code> 以编辑，所以 <code>byte</code> 包也是字符串相关的</p><p>而其实 <code>byte</code> 包中的函数跟 <code>strings</code> 包中的是一模一样的，只是把里面的类型全变了而已，直接参考上表即可</p><p>除此之外，这个包里还多了 <code>bytes.Reader</code> 和 <code>bytes.Buffer</code> 两个对象</p><h2 id="strconv-包"><code>strconv</code> 包</h2><p>与字符串相关的类型转换都是通过 <code>strconv</code> 包实现的，下面仅包含常用的部分，详情可以见<a href="http://www.zzvips.com/article/128358.html">这篇</a></p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>IntSize</td><td>获取程序运行的操作系统平台下 int 类型所占的位数</td></tr><tr><td>Itoa(i int) string</td><td>返回数字 i 所表示的字符串类型的十进制数</td></tr><tr><td>FormatFloat(f float64, fmt byte, prec int, bitSize int) string</td><td>将 64 位浮点型的数字转换为字符串，其中 <code>fmt</code> 表示格式（其值可以是 ‘b’、‘e’、‘f’ 或 ‘g’），<code>prec</code> 表示精度，<code>bitSize</code> 则使用 32 表示 float32，用 64 表示 float64</td></tr><tr><td>Atoi(s string) (i int, err error)</td><td>将字符串转换为 int 型</td></tr><tr><td>ParseFloat(s string, bitSize int) (f float64, err error)</td><td>将字符串转换为 float64 型</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（三）基本数据类型之数字</title>
      <link href="/2022/05/03/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97/"/>
      <url>/2022/05/03/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>Golang 中的数字包括整型（整数）、实型（浮点数）、复数、布尔型和常量，下面就分别来解释它们</p><h1 id="整型">整型</h1><p>众所周知 C/C++ 中对于一般整型使用的关键字是 <code>short</code> 、<code>int</code> 、<code>long</code> 、<code>long long</code> 之类的，而 Go 中直接根据占用的 <code>bit</code> 大小命名为 <code>int8</code>、<code>int16</code>、<code>int32</code> 和 <code>int64</code></p><p>而对于一票带 <code>unsigned</code> 关键字的无符号整型，就直接命名为 <code>uint8</code>、<code>uint16</code>、<code>uint32</code> 和 <code>uint64</code></p><p>那么在 Go 中有没有 <code>int</code> 呢？答案是有的</p><p>Go 中还有 <code>int</code> 和 <code>uint</code>，它们的大小根据实际软硬件平台不同而不同，一般是 <code>32 bit</code>，日常来说完全够用，但是要记住 <code>int</code> 和 <code>int32</code> 必须显式地转换，即使它们的大小一般是相同的</p><p>还有有两种衍生类型需要了解：</p><ul><li><code>rune</code> ：与 <code>int32</code> 等价，用于表示一个 <code>Unicode</code> 码点</li><li><code>byte</code> ：与 <code>uint8</code> 等价，一般用于强调数值是一个原始的数据而不是一个小的整数</li></ul><p>还有一种特殊的类型 <code>uintptr</code> ，它没有指定的大小，用来保存指针，只在底层编程时用到，一般见不到</p><h1 id="实型">实型</h1><p>Go 中的浮点数只有 <code>float32</code> 和 <code>float64</code> 两种，一般情况下建议直接使用 <code>float64</code>，它们都向下兼容 C/C++ 中的用法</p><p>不过 Go 中的数学运算与 C 中的有一些不同：</p><ul><li><p>算术和逻辑运算的二元操作中必须是相同的类型，也就是说不会像 C 一样隐式转换（浮点数等同理）</p></li><li><p>Go 在 <code>math</code> 包中添加了 <code>IEEE754</code> 浮点数标准中定义的特殊值：正无穷大和负无穷大（<code>+Inf</code> 和 <code>-Inf</code> ，用于表示太大溢出的数字和除零的结果），非数（<code>NaN</code>，含义是 Not a number，用于表示无效的除法操作结果 <code>0/0</code>或 <code>Sqrt(-1)</code>）</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z <span class="type">float64</span></span><br><span class="line">fmt.Println(z, -z, <span class="number">1</span>/z, <span class="number">-1</span>/z, z/z) <span class="comment">// &quot;0 -0 +Inf -Inf NaN&quot;</span></span><br></pre></td></tr></table></figure><p>函数 <code>math.IsNaN</code> 用于测试一个数是否是非数 <code>NaN</code>，<code>math.NaN</code> 则返回非数对应的值。虽然可以用 <code>math.NaN</code> 来表示一个非法的结果，但是测试一个结果是否是非数 <code>NaN</code> 则是充满风险的，因为 <code>NaN</code> 和任何数都是不相等的</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nan := math.NaN()</span><br><span class="line">fmt.Println(nan == nan, nan &lt; nan, nan &gt; nan) <span class="comment">// &quot;false false false&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>添加了一个位运算操作 <code>&amp;^</code> （位清空）</p></li></ul><h1 id="复数">复数</h1><p>Go 语言提供了两种精度的复数类型：<code>complex64</code> 和 <code>complex128</code>，分别对应 <code>float32 </code>和 <code>float64</code> 两种浮点数精度</p><p>使用内置的 <code>complex()</code> 函数可以构建复数，<code>real()</code> 和 <code>imag()</code> 可以返回复数的实部和虚部</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1+2i</span></span><br><span class="line"><span class="keyword">var</span> y <span class="type">complex128</span> = <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 3+4i</span></span><br><span class="line">fmt.Println(x*y)                 <span class="comment">// &quot;(-5+10i)&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">real</span>(x*y))           <span class="comment">// &quot;-5&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">imag</span>(x*y))           <span class="comment">// &quot;10&quot;</span></span><br></pre></td></tr></table></figure><p>当然，你也可以使用自然书写方式构建复数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">y := <span class="number">3</span> + <span class="number">4i</span></span><br></pre></td></tr></table></figure><h1 id="布尔型">布尔型</h1><p>Go 中的布尔型（<code>true</code> 和 <code>false</code>）与 C++ 中的一致</p><h1 id="常量">常量</h1><p>Go 中的常量与 C/C++ 中的变化不大</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi <span class="type">float64</span> = <span class="number">3.14159</span> </span><br></pre></td></tr></table></figure><p>当然，Go 也允许你忽略类型，自动判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14159</span> </span><br></pre></td></tr></table></figure><p>多常量一起声明也是允许的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    e  = <span class="number">2.71828182845904523536028747135266249775724709369995957496696763</span></span><br><span class="line">    pi = <span class="number">3.14159265358979323846264338327950288419716939937510582097494459</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>批量声明相同数值的常量可以像这样省略</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">    c = <span class="number">2</span></span><br><span class="line">    d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c, d) <span class="comment">// &quot;1 1 2 2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="iota-常量生成器">iota 常量生成器</h2><p>我感觉这属于一种比较鸡肋的东西，但是还是有一些作用的</p><p>它可以生成一组以相似规则初始化的常量，不用每行都写一遍初始化表达式</p><p>举个例子最清楚</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Weekday <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Sunday Weekday = <span class="literal">iota</span></span><br><span class="line">    Monday</span><br><span class="line">    Tuesday</span><br><span class="line">    Wednesday</span><br><span class="line">    Thursday</span><br><span class="line">    Friday</span><br><span class="line">    Saturday</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>周日将对应0，周一为1，如此等等</p><p>你可以用它玩出一些新花样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Zero   = <span class="literal">iota</span>      <span class="comment">// 0</span></span><br><span class="line">First              <span class="comment">// 1</span></span><br><span class="line">Second             <span class="comment">// 2</span></span><br><span class="line">Hi     = <span class="number">0</span>         <span class="comment">// 0, 被打断后，后续值不变，直到用iota显示恢复</span></span><br><span class="line">Four               <span class="comment">// 0</span></span><br><span class="line">Five               <span class="comment">// 0</span></span><br><span class="line">Six    = <span class="literal">iota</span>      <span class="comment">// 6，显示恢复，iota接着累加，中间打断不中断累加</span></span><br><span class="line">Seven              <span class="comment">// 7</span></span><br><span class="line">Eight  = <span class="literal">iota</span> * <span class="number">10</span> <span class="comment">// 80，iota不变，变更常量表达式，后续保持表达式</span></span><br><span class="line">Nine               <span class="comment">// 90</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">TenZero   = <span class="literal">iota</span> * <span class="number">10</span> <span class="comment">// 0，表达式可以为各种go支持的计算表达式</span></span><br><span class="line">TenFirst              <span class="comment">// 10</span></span><br><span class="line">TenSecond             <span class="comment">// 20</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（七）组件之swiper轮播组件</title>
      <link href="/2022/05/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bswiper%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/05/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%83%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bswiper%E8%BD%AE%E6%92%AD%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>本篇的主要内容就是 <code>swiper</code> 组件，它可以实现首页上方的滚动视图</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021113048.jpg" alt=""></p><p>首先新建一个页面，基本的框架就是<code>&lt;swiper&gt;</code>内嵌很多<code>&lt;swiper-item&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>111<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>222<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span>333<span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021125630.gif" alt=""></p><p>这实在是过于方便了，现在去找三张图加进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是很明显，图片并没有按正常比例显示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021134156.jpg" alt=""></p><p>稍微修改一下样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/1.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/2.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/images/3.jpg&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span>&#123;<span class="attribute">height</span>: <span class="number">400</span>rpx; <span class="attribute">border</span>: <span class="number">1px</span> solid red; &#125;</span><br><span class="line"><span class="selector-class">.banner</span> image&#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021151589.jpg" alt=""></p><p>看上去还行，下面来看一下 <code>&lt;swiper&gt;</code> 中的属性，在文档中都有</p><p>有几个属性是比较常用的</p><ul><li><code>indicator-dots</code> ：是否显示面板指示点</li><li><code>indicator-color</code> ：指示点颜色</li><li><code>indicator-active-color</code> ： 当前选中的指示点颜色</li><li><code>autoplay</code> ：是否自动切换</li><li><code>interval</code> ：自动切换时间间隔</li><li><code>circular</code> ：轮播</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205021209135.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（二）程序结构</title>
      <link href="/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
      <url>/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>让我们从最简单的 <code>HelloWorld</code> 开始理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="包">包</h1><h2 id="声明包">声明包</h2><p>每个 Go 程序都是由包构成的，每个项目都是从 <code>main</code> 包开始运行，最开头的 <code>package main</code> 声明了我们当前在 <code>main</code> 包中</p><h2 id="导入包">导入包</h2><p>使用 <code>import</code> 语句来导入包，例如这里导入了 <code>fmt</code> 包，并且在 <code>main</code> 函数中使用了它的函数 <code>Println</code></p><p>在需要导入多个包，可以使用多个 <code>import</code> 语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br></pre></td></tr></table></figure><p>也可以选择使用括号括起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="导出名">导出名</h2><p>在语言中，常使用 <code>public</code> 和 <code>private</code> 关键字来说明一个对象是公用的还是私有的（对外是否可见）</p><p>而在 Go 中则简单地使用首字母大小写来表示这一点，如果一个名字以大写字母开头，那么它就是已导出的（外部可见），这一点在很多地方都能体现，例如包中的函数和结构体中的元素</p><p>这也解释了为什么<code>Println</code> 的首字母是大写的</p><p>让我们实操一下：</p><p>在项目中新建 <code>.\sayhello\sayhello.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sayhello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Say</span><span class="params">(name <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello&quot;</span>, name, <span class="string">&quot;!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后回到 <code>main.go</code> 来调用它</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;main/sayhello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sayhello.Say(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数">函数</h1><p>这里只是简单地介绍一下函数，更为深入的内容会在后面讲</p><h2 id="声明函数">声明函数</h2><p>基本的函数声明模板如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名 <span class="params">(参数列表)</span></span> (返回值列表)&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 C 不同，Go 的参数是名称在前，类型在后，请看下面的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果连续多个参数的类型相同，那么就可以写在一起</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多值返回">多值返回</h2><p>Go  扩展了 C 中的函数的返回值，现在函数可以返回任意多个参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名返回值">命名返回值</h2><p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量</p><p>这样一来，在最后可以直接用一句 <code>return</code> 来结束，定义的返回值就会自动返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> (ans <span class="type">int</span>) &#123;</span><br><span class="line">ans = x + y</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="变量">变量</h1><h2 id="声明及初始化">声明及初始化</h2><p>基本的变量声明模板如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure><p>其中，类型或表达式可以省略一个：</p><ul><li>若省略类型，就会按表达式自动推断类型</li><li>若省略表达式，就会自动初始化为该类型的零值</li></ul><p>零值就是字面意思，就像你在 C 中对 <code>int</code> 类型总会手动初始化为 0，只是在 Go 中，这一切都是自动化的，这可以简化很多代码</p><p>多个变量也可以一起声明和初始化，若省略类型，则会分别自动推导类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j, k <span class="type">int</span>                 <span class="comment">// int, int, int</span></span><br><span class="line"><span class="keyword">var</span> b, f, s = <span class="literal">true</span>, <span class="number">2.3</span>, <span class="string">&quot;four&quot;</span> <span class="comment">// bool, float64, string</span></span><br></pre></td></tr></table></figure><p>前面讲了函数可以同时返回多个参数，所以一组变量也可以这样初始化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f, err = os.Open(name) <span class="comment">// os.Open returns a file and an error</span></span><br></pre></td></tr></table></figure><p>接收多个变量的时候，可以使用下划线（<code>_</code>）丢弃不需要的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f, _ = os.Open(name) <span class="comment">// 不接收错误</span></span><br></pre></td></tr></table></figure><p><code>var</code> 和 <code>import</code> 一样，使用括号括起来</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ToBe   <span class="type">bool</span>       = <span class="literal">false</span></span><br><span class="line">MaxInt <span class="type">uint64</span>     = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">z      <span class="type">complex128</span> = cmplx.Sqrt(<span class="number">-5</span> + <span class="number">12i</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种写法一般用于在函数外声明一堆包级变量</p><h2 id="短变量声明">短变量声明</h2><p>在函数中，简洁赋值语句 <code>:=</code> 可在类型明确的地方代替 <code>var</code> 声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量名 := 表达式</span><br></pre></td></tr></table></figure><p>函数外的每个语句都必须以关键字开始（<code>var</code>, <code>func</code> 等等），因此 <code>:=</code> 结构不能在函数外使用</p><p>上面的例子也可以这样写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(name) <span class="comment">// os.Open returns a file and an error</span></span><br></pre></td></tr></table></figure><h2 id="赋值">赋值</h2><p>Go 的赋值兼容了 C 中的所有操作，包括缩写运算符（如 <code>+=</code>），还有自增自减（<code>++</code>、<code>--</code>）等</p><p>Go 在这方面创新了一个元组赋值，就像上面的多变量初始化一样，右边的几个变量分别赋值到左边去</p><p>这一特性最大的帮助就是使交换变量变得非常方便</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = y, x</span><br></pre></td></tr></table></figure><p>在 C 中如果要交换两个变量的值，一般都要借助于一个临时变量，但 Go 使得这一操作变得非常优雅</p><p>来看看用 Go 来求最大公约数，是不是简洁了许多</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> y != <span class="number">0</span> &#123;</span><br><span class="line">        x, y = y, x%y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与初始变量时一样，你可以使用下划线来丢去部分值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, err = io.Copy(dst, src) <span class="comment">// 丢弃字节数</span></span><br></pre></td></tr></table></figure><p>关于这个下划线，我还想多说一句</p><p>众所周知如果你声明了一个变量但是没用它是会报错的，有红色波浪线，看得很烦心</p><p>这时，你可以接着下划线假装“使用”了这一变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ = a</span><br></pre></td></tr></table></figure><h2 id="指针">指针</h2><p>Go 的指针摒弃了 C 中的运算功能（加减法），其他地方可以认为是相同的</p><h1 id="类型">类型</h1><h2 id="基本类型">基本类型</h2><p>Go 中的基本类型有</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="type">int8</span>  <span class="type">int16</span>  <span class="type">int32</span>  <span class="type">int64</span></span><br><span class="line"><span class="type">uint</span> <span class="type">uint8</span> <span class="type">uint16</span> <span class="type">uint32</span> <span class="type">uint64</span> <span class="type">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="comment">// uint8 的别名</span></span><br><span class="line"></span><br><span class="line"><span class="type">rune</span> <span class="comment">// int32 的别名，表示一个 Unicode 码点</span></span><br><span class="line"></span><br><span class="line"><span class="type">float32</span> <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="type">complex64</span> <span class="type">complex128</span></span><br></pre></td></tr></table></figure><h2 id="类型转换">类型转换</h2><p>这点与 C 有较大区别，使用 <code>T(v)</code> 将值 <code>v</code> 转换为类型 <code>T</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure><p>并且，Go 不提供自动转换，在 C 中你可以直接将一个 <code>int</code> 赋给 <code>float</code> ，但你不能在 Go 中做到这种事情</p><h2 id="类型别名">类型别名</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype = <span class="type">string</span></span><br></pre></td></tr></table></figure><p>类似于 C 中的 <code>define</code>，在编译时全部替换</p><p>没法自己添加方法，可以增强可读性</p><h2 id="类型定义">类型定义</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> mytype <span class="type">string</span></span><br></pre></td></tr></table></figure><p>基于旧类型生成新类型，相互可以强制转换，可以添加自己的方法</p><h1 id="逻辑控制">逻辑控制</h1><h2 id="for">for</h2><p>Go 中的 <code>for</code>，与 C 中的基本相同，但是少了小括号，并且大括号变成必须的了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 C 一样，起始条件、结束条件和后置语句都是可选的</p><h2 id="while">while</h2><p>当你省略了起始条件和后置语句时，<code>for</code> 其实就变成了 <code>while</code>，所以 Go 中是没有<code>while</code> 的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而无限循环也就只剩下了一个 <code>for</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if">if</h2><p>类似地，无需小括号，而大括号是必须的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sqrt</span><span class="params">(x <span class="type">float64</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sqrt(-x) + <span class="string">&quot;i&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprint(math.Sqrt(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 允许你在条件表达式前先执行一个语句，这可以简化代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与你想的一样，这里的 <code>v</code> 的作用域仅限该 <code>if</code> 语句内</p><p>至于 <code>else</code> 和 <code>else if</code> 的用法，可以参考下面的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span></span><br><span class="line"><span class="keyword">if</span> _, _ = fmt.Scan(&amp;a); a &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a &gt; 10&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a = 10&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a &lt; 10&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch">switch</h2><p>对比 C 的 <code>switch</code>，你只需要更新了以下几点：</p><ul><li><p><code>case</code> 现在不一定要是常量，也可以是表达式（如果是表达式，那么中途跳出后下面的表达式并不会执行）</p></li><li><p>每个分支都是默认 <code>break</code> 的，如果你不想跳出，可以以 <code>fallthrough</code> 语句结束</p></li><li><p>支持多条件匹配</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> a &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>来看几个例子</p><p><a href="https://tour.go-zh.org/flowcontrol/9">https://tour.go-zh.org/flowcontrol/9</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;Go runs on &quot;</span>)</span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;OS X.&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">// freebsd, openbsd,</span></span><br><span class="line"><span class="comment">// plan9, windows...</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/go/go-switch-statement.html">https://www.runoob.com/go/go-switch-statement.html</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> grade <span class="type">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">   <span class="keyword">var</span> marks <span class="type">int</span> = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> marks &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">90</span>: grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">80</span>: grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span> : grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">      <span class="keyword">default</span>: grade = <span class="string">&quot;D&quot;</span>  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span> )    </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;良好\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;及格\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;不及格\n&quot;</span> )</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;差\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;你的等级是 %s\n&quot;</span>, grade );      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer">defer</h2><p><code>defer</code> 语句会将函数推迟到外层函数返回之后执行</p><p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用</p><p>推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="作用域">作用域</h1><p>除下面的两点外，其他的都与 C 中的相同</p><ul><li>在同一个包内的变量和函数，在整个包内的所有文件中都可用</li><li><code>import</code> 语句只对当前文件有效</li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（一）环境搭建</title>
      <link href="/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/05/01/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Golang 的开发环境可以有很多，比如 <code>VSCode</code> 等，但我下面说的方法是我感觉最省心省力的，也是我们社团中最为推荐的，那就是使用 <code>GoLand</code></p><h1 id="安装-GoLand">安装 GoLand</h1><p>目前来说，Golang的最佳 IDE 是喷气大脑出的 <code>GoLand</code>，可以使用它直接搞定所有环境</p><p>个人建议通过他家的 <a href="https://www.jetbrains.com/toolbox-app/">Toolbox App</a> 下载最方便</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011051083.jpg" alt=""></p><p>安装完成后，找到 GoLand</p><p><img src="C:/Users/Nick/AppData/Roaming/Typora/typora-user-images/image-20220501105204166.png" alt="image-20220501105204166"></p><p>关于注册，你可以在官网认证你的学生身份，然后直接白嫖</p><p>安装完成后，你可以在设置中安装一个中文语言包</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011053646.jpg" alt=""></p><p>个人建议在设置里配一下代理，它是不吃全局代理的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011059809.jpg" alt=""></p><h1 id="安装-Golang">安装 Golang</h1><p>直接在 <code>GoLand</code> 的设置的 <code>GOROOT</code> 里下载你想要的版本，不需要跑一遍官网</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011026398.jpg" alt=""></p><p>安装后，你可以手动把它加到 <code>PATH</code> 里去</p><h1 id="Hello，World！">Hello，World！</h1><p>新建一个项目，把下面这段代码复制进去</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按下 <kbd>Alt</kbd> +<kbd>F12</kbd> 打开终端，切到你的项目目录，执行下面的语句</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init main</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><p>之后点击右上角的箭头执行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011028144.jpg" alt=""></p><p>如果没法正常运行，可以参照我的配置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205011138896.jpg" alt=""></p><p>至此，环境配置完毕</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 语法速通指南（〇）前言</title>
      <link href="/2022/04/30/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/04/30/Golang-%E8%AF%AD%E6%B3%95%E9%80%9F%E9%80%9A%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022011524.jpg" alt=""></p><blockquote><p>❤️又开新坑了！！！</p></blockquote><h1 id="关于本系列">关于本系列</h1><p>最近青训营要开营了，一想起我学的七七八八的 Golang，都感觉不配跟大佬一起做项目，特地速速复习一遍，顺便写成博客 <s>（不写博客真的第二天就又忘了）</s></p><h1 id="关于-Golang">关于 Golang</h1><p>Golang 是一门在 2009 年推出的新的类 C 系语言，个人认为可以看成是 C 在  21 世纪的升级版本，它真的非常优秀，改进了 C 的很多方面，个人总结了以下几点：</p><ul><li>更安全：例如在 C 中，新声明的变量内容是不确定的，但是在 Go 中，它们都为空</li><li>更智能：体现在回收机制和堆栈分配，切片自动增长等</li><li>更规范：更加规范你的码风，声明了变量而不用会报错，引入了包不用也会报错，甚至大括号不是 C 风格也会报错</li><li>更现代：例如在 C 中函数返回值只能是一个值，但是 Go 中可以为多个，例如可以在 <code>for</code> 中使用类 Python 的 <code>range</code> 等，还加入了一些面向对象的元素，还有并发、信道等新功能</li></ul><h1 id="整体目录">整体目录</h1><ul><li>环境搭建</li><li>程序结构</li><li>基本数据类型（数字、字符串）</li><li>复合数据类型（数组、切片、映射、结构体）</li><li>函数</li><li>方法与接口</li><li>并发与信道</li><li>测试</li><li>反射</li></ul><h1 id="重点参考文献">重点参考文献</h1><ul><li><a href="https://tour.go-zh.org/list">Go 语言之旅</a></li><li><a href="https://books.studygolang.com/gopl-zh/">Go 语言圣经（中文版）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> 语法速通 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（九）函数</title>
      <link href="/2022/04/29/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/29/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="定义函数">定义函数</h1><p>Python 最大的特色之一就是用缩进来表示层级关系，所以与 C/C++ 不同，它没有大括号，标准的定义格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">参数列表</span>):</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure><p>有几点说明：</p><ul><li><p>不要忘记冒号</p></li><li><p>与 C/C++ 相同，可以没有返回值，甚至可以没有 <code>return</code> 语句，在末尾自动返回</p></li><li><p>如果传入的是可变数据（列表、字典和集合），那么对它们的修改是永久的，你可以使用切片（<code>[:]</code>）或深拷贝来规避这一特性</p></li><li><p>不要混用 Tab 和空格，虽然有时它们看起来是一样的，这会让程序无法运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204291625676.jpg" alt=""></p></li></ul><p>简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">width, height</span>):</span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line"><span class="built_in">print</span>(area(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h1 id="传递参数">传递参数</h1><p>因为 Python 中没有指针这种概念，所以没有地址传递这一说，如果是不可变类型就是值传递，可变类型就是引用传递</p><p>但是传参的写法对比 C/C++ 有了一些创新</p><h2 id="位置实参">位置实参</h2><p>这就是类 C/C++ 的写法了，最普通常见的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeFullName</span>(<span class="params">firstName, lastName</span>):</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(makeFullName(<span class="string">&quot;John&quot;</span>, <span class="string">&quot;Smith&quot;</span>)) <span class="comment"># John Smith</span></span><br></pre></td></tr></table></figure><h2 id="关键字实参">关键字实参</h2><p>在调用时手动指定形参的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeFullName</span>(<span class="params">firstName, lastName</span>):</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(makeFullName(firstName=<span class="string">&quot;John&quot;</span>, lastName=<span class="string">&quot;Smith&quot;</span>))  <span class="comment"># John Smith</span></span><br><span class="line"><span class="built_in">print</span>(makeFullName(lastName=<span class="string">&quot;Smith&quot;</span>, firstName=<span class="string">&quot;John&quot;</span>))  <span class="comment"># John Smith</span></span><br></pre></td></tr></table></figure><h2 id="设置默认值">设置默认值</h2><p>这点与 C++ 中的相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeFullName</span>(<span class="params">firstName, lastName, middleName = <span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> middleName:</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + middleName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&#x27; &#x27;</span> + lastName</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(makeFullName(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>)) <span class="comment"># John Smith</span></span><br><span class="line"><span class="built_in">print</span>(makeFullName(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>, <span class="string">&#x27;Paul&#x27;</span>)) <span class="comment"># John Paul Smith</span></span><br></pre></td></tr></table></figure><h2 id="任意数量的实参">任意数量的实参</h2><p>在 C/C++ 中，这个功能需要额外的库，但是 Python 是自带的</p><h3 id="元组型">元组型</h3><p>在参数列表使用 <code>*元组名</code> 来接收任意个参数，所有收到的参数都会保存在此元组中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] *var_args_tuple </span>):</span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Summarize the pizza we are about to make.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) + <span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Making a 16-inch pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - pepperoni</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Making a 12-inch pizza with the following toppings:</span></span><br><span class="line"><span class="comment"># - mushrooms</span></span><br><span class="line"><span class="comment"># - green peppers</span></span><br><span class="line"><span class="comment"># - extra cheese</span></span><br></pre></td></tr></table></figure><h3 id="字典型">字典型</h3><p>在参数列表使用 <code>**字典名</code> 来接收任意个键值对，所有收到的键值对都会保存在此字典中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">functionname</span>(<span class="params">[formal_args,] **var_args_dict </span>):</span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_profile</span>(<span class="params">first, last, **user_info</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Build a dictionary containing everything we know about a user.&quot;&quot;&quot;</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">&#x27;first_name&#x27;</span>] = first</span><br><span class="line">    profile[<span class="string">&#x27;last_name&#x27;</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_profile = build_profile(<span class="string">&#x27;albert&#x27;</span>, <span class="string">&#x27;einstein&#x27;</span>,</span><br><span class="line">                             location=<span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">                             field=<span class="string">&#x27;physics&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_profile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;first_name&#x27;: &#x27;albert&#x27;, &#x27;last_name&#x27;: &#x27;einstein&#x27;, &#x27;location&#x27;: &#x27;princeton&#x27;, &#x27;field&#x27;: &#x27;physics&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="匿名函数">匿名函数</h1><p>见此篇：<a href="https://www.jb51.net/article/210128.htm#_label6">python基础之匿名函数详解</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（八）推导式</title>
      <link href="/2022/04/28/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
      <url>/2022/04/28/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>前面我们讲了 Python 中的几种高级数据类型（列表、字典、集合、元组）</p><p>推导式就是一个工具，能构建一种函数关系，从现有对象推导出新对象</p><p>而根据新对象的类型，推导式也分为列表推导式、字典推导式、集合推导式和元组推导式</p><p>语言的描述总是不够的，最好的理解方式就是来看代码</p><h1 id="列表推导式">列表推导式</h1><p>基本结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件]</span><br></pre></td></tr></table></figure><p>它的含义是通过 <code>for</code> 结构枚举出每个元素，然后利用表达式生成新的元素，表达式可以是调用自身的方法，也可以是函数，而条件是可选的，可以过滤列表中不符合条件的值</p><p>例1：过滤掉长度小于或等于 3 的字符串列表，并将剩下的转换成大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;Wendy&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_names = [name.upper() <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_names)</span><br><span class="line">[<span class="string">&#x27;ALICE&#x27;</span>, <span class="string">&#x27;JERRY&#x27;</span>, <span class="string">&#x27;WENDY&#x27;</span>, <span class="string">&#x27;SMITH&#x27;</span>]</span><br></pre></td></tr></table></figure><p>例2：计算 30 以内可以被 3 整除的整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(multiples)</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure><h1 id="字典推导式">字典推导式</h1><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;键表达式:值表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件&#125;</span><br></pre></td></tr></table></figure><p>例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listdemo = [<span class="string">&#x27;Google&#x27;</span>,<span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line"><span class="comment"># 将列表中各字符串值为键，各字符串的长度为值，组成键值对</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict = &#123;key:<span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> listdemo&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict</span><br><span class="line">&#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="集合推导式">集合推导式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件&#125;</span><br></pre></td></tr></table></figure><p>例1：计算数字 1,2,3 的平方数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><p>例2：判断不是 abc 的字母并输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="元组推导式">元组推导式</h1><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(表达式 <span class="keyword">for</span> 某元素 <span class="keyword">in</span> 某对象 <span class="keyword">if</span> 条件)</span><br></pre></td></tr></table></figure><p>元组推导式与前面的所有推导式都不同，因为元组的括号本身是没有意义的，所以用小括号括起来不能代表一个元组，需要手动转成元组类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7faf6ee20a50</span>&gt;  <span class="comment"># 返回的是生成器对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(a)       <span class="comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『实记』“韵味杭州”测试赛球童志愿经历</title>
      <link href="/2022/04/23/%E3%80%8E%E5%AE%9E%E8%AE%B0%E3%80%8F%E2%80%9C%E9%9F%B5%E5%91%B3%E6%9D%AD%E5%B7%9E%E2%80%9D%E6%B5%8B%E8%AF%95%E8%B5%9B%E7%90%83%E7%AB%A5%E5%BF%97%E6%84%BF%E7%BB%8F%E5%8E%86/"/>
      <url>/2022/04/23/%E3%80%8E%E5%AE%9E%E8%AE%B0%E3%80%8F%E2%80%9C%E9%9F%B5%E5%91%B3%E6%9D%AD%E5%B7%9E%E2%80%9D%E6%B5%8B%E8%AF%95%E8%B5%9B%E7%90%83%E7%AB%A5%E5%BF%97%E6%84%BF%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>知道我为什么又停更了几天嘛~ 那必是去办大事去了~</p><p>不得不说，这几天是真的开心，简直要乐死我了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204232319835.jpg" alt=""></p><blockquote><p>在我看见这个请假证明的时候，就知道接下来这几天必定是非常令人难忘的</p></blockquote><p>首先让我先交待一下背景：鄙人是一名预选的亚运会网球球童志愿者，具体工作就是在场上传球、捡球、给运动员撑伞、供球之类的，但是其实也没有那么简单，网球规则还是有点复杂的，具体<a href="/2022/04/05/%E3%80%8EOthers%E3%80%8F%E7%BD%91%E7%90%83%E7%90%83%E7%AB%A5%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/">可以看这一篇</a>。然后新人肯定不能直接去服务亚运会嘛，必是要先试炼一下，这个测试赛就是我们锻炼的好机会。这场测试赛的运动员其实都是些几岁的小学生，心理负担不会太大，是一次很好的锻炼机会</p><p>17号的培训会</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262022745.png" alt=""></p><p>20号的场地培训及赛前适应场地</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262028432.png" alt=""></p><p>本场比赛一个有好几个场地，分别是 CC（Center Court，也就是上面的那张图，决赛场），C1（半决赛场），还有后面的 C3、C4、C5 和 C6（这几个是连着一起的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262121576.jpg" alt=""></p><h1 id="DAY-0（21日）">DAY 0（21日）</h1><p>这一天是赛前最后的准备日，中午上完课之后，我们就出发了</p><p>出发啦！</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262050778.JPG" alt=""></p><p>在酒店报道</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262051631.JPG" alt=""></p><p>入住房间</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262052697.JPG" alt=""></p><p>然后我们接着前往奥体中心，在休息室开会，熟悉明天的场地，还要领发放的衣服</p><p>我们 4 组明天要和 3 组去 C1 场，两个小组轮换，练习了好久的传球，还有上场和退场。但是说实话还是很慌，重点就是怕规则记不清（毕竟我是网前，责任比较大）</p><p>志愿者休息室一览（其实是后面几天的图）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262159068.JPG" alt=""></p><p>当然啦，晚饭还是要吃的，实话实说，我们这吃的是真的好，而且餐餐都有水果牛奶，还不带重样的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262146506.JPG" alt=""></p><p>穿上新衣服的 NX</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262146129.JPG" alt=""></p><p>每天必做的核酸</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262150809.JPG" alt=""></p><h1 id="DAY1（22日）">DAY1（22日）</h1><p>实话实说，在我参加这个比赛之前，没有感受过真实的比赛氛围，第一天还是非常紧张的</p><p>出发前的全身照 <s>（别问我为什么眼睛是闭着的）</s></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262148582.JPG" alt=""></p><p>在酒店吃早餐</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262151842.JPG" alt=""></p><p>开完晨会后，前往 C1 上场（这个其实是最后一天的图，而且不是我们组）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262154472.png" alt=""></p><p>上过一轮之后，就基本熟悉规则了，换人的时候只能在休息时或一场结束后换，场上有垫子，跪着还是比较舒服的</p><p>因为都是小孩子打比赛，所以一场比赛就打一盘且无占先（不然要打好久），排版表上是 40 分钟一换，其实一场大概也就是这个时间</p><p>累了一天之后，回酒店做核酸</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262208130.png" alt=""></p><h1 id="DAY2（23日）">DAY2（23日）</h1><p>第二天下雨了，所以上午所有组都去 CC 轮换上岗</p><p>按照战表，这一天是双打，一开始的组没有熟悉规则，就比较混乱，到我们组的时候就已经清楚了</p><p>这天双打是直接打决胜局（没错，一场就打一局）</p><p>中心场馆就是不一样，观众席上人还是挺多的，媒体也很多，然后各种长枪短炮对着你，准备和休息的时间还有背景音乐，全场的人都看着你，压力还是挺大的 <s>（这张图其实应该是第一天的）</s></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262221107.jpg" alt=""></p><p>讲真，这两天过得是真的充实，一直在前线和准备上场（在泉水回血）的循环中，累也是有点累吧，但是比赛也是挺好看的，我们晚上甚至都在讨论选手了（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262234895.jpg" alt=""></p><p>这几天每天早晚例会的总结</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262343031.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262343504.jpg" alt=""></p><h1 id="DAY3（24日）">DAY3（24日）</h1><p>这是最后一天，上午天气是多云，天气很好，但我们组这一天其实没有服务任何一场比赛（</p><p>因为是最后一天，所以我们早上需要把所有的行李打包，带到大本营去</p><p>最后一次从酒店出发</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204241151772.jpg" alt=""></p><p>按分配表格，我们被分到 C4 场</p><p>但是…我们到了场地之后，却发现没有我们的比赛，然后听说 C4 的比赛都迁到 CC 去了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262236620.jpg" alt=""></p><p>所以我们就在那里玩了一个轮班的时间，还拍了合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262237273.jpg" alt=""></p><p>回到休息室后打牌打得不亦乐乎（</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262237842.jpg" alt=""></p><p>然后到下午，又通知我们去 C1 接替一个小组</p><p>我们在门口等候，门口执勤的志愿者说这场后面的一场是最后一场</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262241331.png" alt=""></p><p>所以，我们打算这场结束再进去换</p><p>然而，其实这一场就是最后一场了，我们又白跑了一趟，这一场结束了基本就没比赛了</p><p>回到休息室，不久之后就通知我们去参加颁奖典礼和大合影了</p><p>所有球童要轮流当男单、女单、男双、女双、混双几个项目的背景板</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262251098.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262252178.jpg" alt=""></p><p>全体 84 位球童合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262250137.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262253719.jpg" alt=""></p><p>全体志愿者合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262259841.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262301931.jpg" alt=""></p><p>小组最后的合影</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262239639.jpg" alt=""></p><p>晚上吃完饭，开完总结大会后，依依不舍地离开</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262325570.png" alt=""></p><h1 id="其他图片">其他图片</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329580.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329632.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329415.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329277.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262329396.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262330946.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262331438.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262331448.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332931.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332228.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332442.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332707.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262332539.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204262335330.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205041040281.png" alt=""></p><p>实话实说，这几天过地是真的棒，我已经等不及亚运会了</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（十）分组数据</title>
      <link href="/2022/04/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/23/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>本篇主要讲述如何使用 <code>GROUP BY</code> 和 <code>HAVING</code> 子句</p><h1 id="数据分组">数据分组</h1><p>上一篇讲述了如何使用聚集函数汇总数据（如总数、平均值和最大最小值）</p><p>但是目前汇总的范围只能是整个表，或使用 <code>WHERE</code> 匹配一个指定的字段，例如下面返回由供应商 DLL01 提供的产品数目</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204231502727.jpg" alt=""></p><p>但是，如果要分门别类地返回各个供应商的产品数目呢？</p><p>这就需要对数据进行分组，然后对每组分别计算</p><h1 id="创建分组">创建分组</h1><p>分组是使用 <code>GROUP BY</code> 子句创建的，理解分组的最好方法是看一个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> vend_id</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204231511457.jpg" alt=""></p><p>由于使用了 <code>GROUP BY</code> ，DBMS 会自动依照 <code>vend_id</code> 来分组，然后对每一个组都执行一次聚集函数</p><p>下面是一些关于 <code>GROUP BY</code> 的重要规定</p><ul><li><code>GROUP BY</code> 可以包含任意数目的列，用来嵌套分组（用后面的字段进一步分割前面已经分好的组）</li><li>除聚集计算语句外，<code>SELECT</code> 中的每一列也必须出现在 <code>GROUP BY</code> 中</li><li><code>GROUP BY</code> 中的每一列都必须是真实的列（可以不是 <code>SELECT</code> 中的）或有效的表达式，不能使用别名。如果在 <code>SELECT</code> 中使用表达式，则必须在 <code>GROUP BY</code> 中指定相同的表达式</li><li>大多数 DBMS 不允许在 <code>GROUP BY</code>  中使用可变长度数据类型的列（如文本或备注型字段）</li><li>如果包含了值为 <code>NULL</code> 的行，则这些行将作为一个分组返回</li><li><code>GROUP BY</code> 子句必须出现 <code>WHERE</code> 之后，<code>ORDER BY</code> 之前</li></ul><details class="toggle" ><summary class="toggle-button" style="">提示：GROUP BY ALL</summary><div class="toggle-content"><p>如果使用了 <code>ALL</code>，查询结果将包括所有分组，即使是没有匹配上的内容</p><p>我感觉这东西并没有什么用，基本可以看作是禁用了 <code>WHERE</code> 子句，毕竟在最新的 Microsoft SQL Server 中，<a href="https://docs.microsoft.com/zh-tw/previous-versions/sql/sql-server-2005/ms175028(v=sql.90)">它已经被移除了</a></p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：通过相对位置指定列</summary><div class="toggle-content"><p>有的 DBMS 允许根据 SELECT 列表中的位置指定 GROUP BY 的列。例如 <code>GROUP BY 2, 1</code> 表示按选择的第二个列分组，然后再按第一个列分组，不过这种方法很容易出错</p></div></details><h1 id="过滤分组">过滤分组</h1><p>众所周知，我们可以使用 <code>WHERE</code> 来过滤行，而类似地，我们可以用 <code>HAVING</code> 来过滤分组</p><p><code>HAVING</code> 后面可以跟所有 <code>WHERE</code> 的操作符，这两个只是操作的对象不同而已</p><p>例如，我们先列出所有的顾客订单数（按顾客分组，然后汇集），再尝试使用 <code>HAVING</code> 来挑选出至少有两个订单的顾客（过滤分组）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id ,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders </span><br><span class="line"><span class="keyword">FROM</span> Orders  </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cust_id;</span><br></pre></td></tr></table></figure><p>接下来尝试过滤分组，重新输入并加上下面这一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204280855234.jpg" alt=""></p><p>可以看到，已经成功过滤</p><p>如果同时使用 <code>WHERE</code> 和 <code>HAVING</code> ，其实是有执行的优先级的，具体过程为 <code>WHERE</code> 先进行行级过滤，然后分组，然后 <code>HAVING</code> 再过滤分组，这一点很重要，因为 <code>WHERE</code> 排除的行并不在分组中，这可能会改变计算值，从而影响 <code>HAVING</code> 子句</p><p>举一个同时使用  <code>WHERE</code> 和 <code>HAVING</code> 的例子：列出具有两个以上产品且价格大于等于 4 的供应商</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id , <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_prods </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&gt;=</span><span class="number">4</span> # 行级过滤</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  vend_id    # 分组</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">2</span>; # 组级过滤</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204280904413.jpg" alt=""></p><h1 id="同时使用分组过滤和排序">同时使用分组过滤和排序</h1><p><code>GROUP BY</code> 并没有排序的功能，所以不要忘记在最后进行排序，下面是一个例子</p><p>检索三个或更多物品的订单号和订购物品的数目</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num , <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num  </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>再加上排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num , <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> items </span><br><span class="line"><span class="keyword">FROM</span> OrderItems </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num  </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">3</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> items , order_num;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204281921966.jpg" alt=""></p><h1 id="SELECT-子句顺序">SELECT 子句顺序</h1><p>现在回顾一下 <code>SELECT</code> 语句中各已经学过的子句以及它们的顺序</p><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>要返回的列或表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>仅在从表中选择数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组</td><td>仅在按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>对输出进行排序</td><td>否</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』有关 range 和指针接收者的坑</title>
      <link href="/2022/04/19/%E3%80%8EGo%E3%80%8F%E6%9C%89%E5%85%B3%20range%20%E5%92%8C%E6%8C%87%E9%92%88%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E5%9D%91/"/>
      <url>/2022/04/19/%E3%80%8EGo%E3%80%8F%E6%9C%89%E5%85%B3%20range%20%E5%92%8C%E6%8C%87%E9%92%88%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>这其实是个老生常谈的问题了，在例会上被第二次提到，<a href="https://github.com/hduhelp/backend_guide/blob/main/golang/feature.md">原文见此</a></p><p>本人简单概括一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="type">string</span></span><br><span class="line">Persons []Person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span>   <span class="comment">//标准名</span></span><br><span class="line">Alias  []<span class="type">string</span> <span class="comment">//别名，可以是邮箱、QQ号等</span></span><br><span class="line">Submit <span class="type">bool</span>     <span class="comment">// 是否已提交</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Group)</span></span> ChangeSomeThingV1() &#123;</span><br><span class="line"><span class="keyword">for</span> _, person := <span class="keyword">range</span> p.Persons &#123;</span><br><span class="line">person.Submit = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Group)</span></span> ChangeSomeThingV2() &#123;</span><br><span class="line"><span class="keyword">for</span> _, person := <span class="keyword">range</span> p.Persons &#123;</span><br><span class="line">person.Submit = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个 <code>ChangeSomeThing()</code> 方法的区别是什么？哪个能够起作用？</p><p>答案是：两个都没用</p><p>这是一个新手经常会犯的错误，要知道，和 Python 中一样，<code>range</code> 枚举出来的都是副本，修改副本是没有用的</p><p>可以这样解决</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> p.Persons &#123;</span><br><span class="line">p.Persons[i].Submit = <span class="literal">true</span></span><br><span class="line"><span class="comment">//person.Submit = true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，更好的一种方法是改为指针类型，这样可以通过 <code>range</code> 出来的指针修改对象</p><p>另一个坑是关于指针接收者的，也就是上面两个方法的区别</p><p>不管实体还是指针都可以成功调用两种方法，Golang 会帮你自动转换的（除了直接用 <code>&#123;&#125;</code> 临时创建的对象）</p><p>但是，只有接收者为指针的方法能修改对象，这一点要牢记</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Ops』运维基本技能树</title>
      <link href="/2022/04/18/%E3%80%8EOps%E3%80%8F%E8%BF%90%E7%BB%B4%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%E6%A0%91/"/>
      <url>/2022/04/18/%E3%80%8EOps%E3%80%8F%E8%BF%90%E7%BB%B4%E5%9F%BA%E6%9C%AC%E6%8A%80%E8%83%BD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是昨晚例会上 ESON 的讲稿，然后我还康到了一本好书：<a href="https://book.hacktricks.xyz/">https://book.hacktricks.xyz/</a></p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204182220269.png" alt=""></p><h1 id="Ops">Ops</h1><p>[TOC]</p><h2 id="什么是运维">什么是运维</h2><blockquote><p>就是牛马, 当牛做马.</p><p>开发背锅侠, 生产事故擦屁股的</p><p>配环境的勾八</p></blockquote><p>From WIki</p><blockquote><p>是对技术类运营维护人员的统称。运维人员的职责是根据业务需要规划信息、网络、服务，通过网络监控、事件预警、业务调度、排障升级等手段，使服务处于 <strong>长期稳定可用状态</strong>。</p></blockquote><h2 id="基本技能树">基本技能树</h2><h3 id="Linux-2">Linux</h3><p>这个还需要多说? 啥软件不是在服务器里的 Linux 的?</p><blockquote><p>隔壁 Win Server 突然弹起</p></blockquote><h4 id="各种-Shell">各种 Shell</h4><h4 id="各种命令">各种命令</h4><p>折腾 linux 基本上是运维入门的第一堂课</p><h4 id="插播一条-如何-AddUser">插播一条 如何 AddUser</h4><blockquote><p>到这个位置 基本就有一个 基础到不能再基础的 运行环境了</p></blockquote><h3 id="数据库">数据库</h3><p>数据库基本逃不过 CRUD</p><p>高级点无非是 性能优化 建立索引 视图 等等</p><h4 id="Mysql-关系型">Mysql 关系型</h4><p>会看 binlog 数据库数据恢复 备份 CRUD</p><h4 id="Redis-KV型">Redis KV型</h4><p>SET GET 查 烧操作很多 一般是作为后端第二个接触到的数据</p><h4 id="MongoDB-文档型">MongoDB 文档型</h4><p>文档 JSON 这玩意在你还不确定你的数据需要如何存储 或者设计表单的时候 非常好用</p><h4 id="neo4j-图型">neo4j 图型</h4><p>这种一般性开发是用不太到的 一般是专业需求</p><blockquote><p>这里基本上你就可以调用这些存储资源 来进行最最基本的后端开发了</p></blockquote><h3 id="各类中间件">各类中间件</h3><p>中间件是为应用提供通用服务和功能的软件。 数据管理、应用服务、消息传递、身份验证和API 管理通常都要通过中间件。 中间件可以帮助开发人员更有效地构建应用。 它就如同是应用、数据与用户之间的纽带。</p><blockquote><p>Nginx Apache Tomcat等等</p></blockquote><h4 id="负载均衡">负载均衡</h4><h4 id="反向代理">反向代理</h4><h4 id="证书校验">证书校验</h4><p>SSL</p><h4 id="网关">网关</h4><p>Kong</p><h4 id="消息队列">消息队列</h4><p>MQTT</p><h4 id="其他设备">其他设备</h4><blockquote><p>当你所具有的服务渐渐增加的时候 你会遇到这些问题</p></blockquote><h3 id="容器化">容器化</h3><h4 id="Docker">Docker</h4><p>基本使用 审查处理</p><h4 id="K8s-容器编排">K8s 容器编排</h4><p>这里挖个坑 有材料 而且很多</p><h3 id="渐渐云原生…">渐渐云原生…</h3><p>云服务 云数据库</p><p>Serverless OSS 对象存储</p><blockquote><p>你的服务渐渐增加 同时你所拥有的可支配资源也很多的时候</p><p>你需要你的服务可移植快速部署和统一管理的时候</p><p>当然 容器还有诸如</p><p>环境干净 快速启停 依赖少 方便移植 同时也惠及了开发</p></blockquote><h3 id="日志">日志</h3><h4 id="可视化">可视化</h4><h4 id="管理平台">管理平台</h4><h4 id="分布式收集-统一处理">分布式收集 统一处理</h4><blockquote><p>经典 ELK</p></blockquote><p>Grafana 经典数据可视化平台</p><blockquote><p>这个阶段你所具有的服务已经非常成熟了 你需要更多的收集信息</p><p>然后对信息进行处理 比如 你需要对于一些细小的 Bug Error 进行排错 定位分析</p><p>对服务后台运行情况进行监控</p></blockquote><h2 id="与开发的交界处-Devops">与开发的交界处 Devops</h2><h3 id="Git">Git</h3><p>有什么好说的? 代码管理</p><p>当然不止 github</p><p>gitlab 自建 gitea 自建 等等</p><h3 id="CICD">CICD</h3><p>持续集成持续部署</p><blockquote><p>一般这个玩意是要和自动测试一起服用的</p><p>不然就会产生类似 我本地就不跑了 我疯狂 Commit 代码 Push 上去服务器帮我搞 跑不起来就 再交</p><p>当然方便是方便</p></blockquote><p>实现方法有很多</p><p>写 Github Action</p><p>Jenkins</p><h3 id="DNS">DNS</h3><p>域名管理 其实是负载均衡和服务发现的帮助者</p><p>就是来解决纯纯 IP 导致的一堆破事</p><h3 id="CDN">CDN</h3><p>加速 静态资源分发 源站隐藏 抗 DDOS CC</p><blockquote><p>可不得推荐一手 Cloudflare?</p></blockquote><h3 id="包管理-依赖-镜像">包管理 依赖 镜像</h3><p>maven pip 自建</p><p>docker 镜像 私有 image</p><h3 id="虚拟化内网-以及接入">虚拟化内网 以及接入</h3><p>这里有点偏向于网工了</p><blockquote><p>简单如 ZeroTIer TailScale Wireguard OpenVPN</p><p>如果都没用过 那么 学校 深信服 SSLVPN 就也是一个</p><p>复制如 RouterOS Cisco 产品 OSPF BGP …</p></blockquote><blockquote><p>公司体量足够大就会碰到这些 比如说 Google</p></blockquote><h2 id="与安全的交界处">与安全的交界处</h2><h3 id="代码静态审计-测试">代码静态审计 测试</h3><h4 id="CodeQL">CodeQL</h4><h4 id="SonarQube">SonarQube</h4><blockquote><p>其实是防止 仓库被提交 恶意代码 或者带漏洞的代码</p></blockquote><h3 id="身份验证-鉴权">身份验证 鉴权</h3><p>IDaaS 身份验证即服务</p><h4 id="Active-Directory-活动目录">Active Directory 活动目录</h4><blockquote><p>你的资产实在太多了 在公司体量下进行运作的时候 身份验证系统 和 资产管理 不可能每个资产就有一个 身份验证 更新也不会同步</p><p>这时候你就需要一个 类似于 目录的东西 可以查找 哪里哪里 有什么服务 有什么系统 谁访问什么 谁可以做什么</p></blockquote><h4 id="域">域</h4><p>windows Domain</p><p>可以用 Samba 来使得 linux 加入该域</p><h4 id="LDAP-OAuth-Kerberos-SSO">LDAP ; OAuth ; Kerberos; SSO</h4><p>LDAP 轻量目录访问协议</p><p>OAuth 开放授权标准 做验证 提供信息 但是不提供密码的方案</p><p>Kerberos 基于票据系统 TGT 当然这玩意 是 MIT 的玩意</p><p>SSO 单点登录 将系统配置为信任另一个系统来进行验证 一个是 服务商 一个是身份服务商 可以和 OAuth 一起用</p><h3 id="IR-Incident-Response-应急响应">IR Incident Response 应急响应</h3><h2 id="硬件方向">硬件方向</h2><h3 id="IDC-机房管理">IDC 机房管理</h3><h3 id="跳板机-防火墙-上网行为管理">跳板机  防火墙  上网行为管理</h3><p>JumpServer 运维跳板机(也有软件端的 <strong>No More SSH</strong>)</p><p>防火墙技术</p><h3 id="服务器-交换机-路由器-三大件">服务器 交换机 路由器 三大件</h3><blockquote><p>未来企业 996 当牛做马的 程序员肯定不用学这个啦</p></blockquote><h1 id="世界的尽头">世界的尽头</h1><p>答案是 DevSecOps</p><h1 id="如果你听完了上述这些">如果你听完了上述这些</h1><p>其实最后的最后</p><p>你会发现 就是完全是一个反复搭建 越建越大的过程</p><p>同时伴随着 分布式技术和统一管理 的一代代的革新</p><p>而归根到底为什么要用到这些东西</p><p>其本质原因就是 为了更好达到服务的长期可用</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Windows』关于使用宽带时无法正常使用代理的问题</title>
      <link href="/2022/04/18/%E3%80%8EWindows%E3%80%8F%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E5%AE%BD%E5%B8%A6%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/18/%E3%80%8EWindows%E3%80%8F%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8%E5%AE%BD%E5%B8%A6%E6%97%B6%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>当你使用宽带接入校园网的时候，可能会遇到无法正常使用 <code>ShadowsocksR</code> 代理的问题</p><p>经过后端群内大佬的指引，发现解决方法其实很简单，就是把连接名改为非汉字就好了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204182156430.jpg" alt=""></p><p>但是目前 Windows11 有 UI bug，只有连上了之后才能改名</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『总结』大一下期中总结</title>
      <link href="/2022/04/17/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
      <url>/2022/04/17/%E3%80%8E%E6%80%BB%E7%BB%93%E3%80%8F%E5%A4%A7%E4%B8%80%E4%B8%8B%E6%9C%9F%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>呼！终于把一堆事情给忙完了</p><p>时间真快，不知不觉这个学期就过了一半</p><p>前几天为了备考期中考，就停更了几天，昨天刚把期中考考完了，接下来会恢复日更的习惯的（堆了一堆东西没写呢！包括上周末后端例会讲的一些知识点我都没好好整理）</p><p>好了，接下来进入正题，对目前的情况做一下小结</p><h2 id="这半个学期干了什么？">这半个学期干了什么？</h2><p>上半学期数起来还是做了不少事情的，自从2月20号开学以来，我把 <code>gin</code> 框架的坑差不多填完了，然后把建站指南也填完了，之后入门了 Python（整了有一半了吧），然后开了个 <code>SQL</code> 的坑，之后又开了个微信小程序的坑，然后做了个 <code>ToDoList</code>，又往里面塞了好多东西 <s>（我怎么挖了这么多坑）</s></p><p>另外，我搭了一个 <code>MC</code> 服务器，跟几个舍友一起通关了暮色森林（遗憾的是王总没来，他去打老头环了，这东西刚发布的时候太上头）</p><p>另外，我参加了杭州亚运会的志愿者选拔，分配到的职位是网球球童，目前还没被筛掉，下周末还要去参加一个测试赛锻炼一下能力</p><p>还有参加了一个挑战杯的竞赛小组 <s>（虽然我感觉没什么戏）</s></p><p>还有什么？？哦，我这学期还被推举为入党积极分子 <s>（有政治正确那味了）</s></p><p>然后我还报名了一个字节跳动的青训营，月底有笔试，进去应该问题不大，直播会上给我画了个大饼，感觉能学到很多东西</p><p>除了这些课余的，学业方面呢？</p><p>首先，期中考已经考完了，目前就出了个物理是 79 ，高数估计挂了，没复习好</p><p>说到物理，我真的想喷一下这个老师，讲课是真的烂，我可以直言不讳地说，我读书这么多年，他是我见过的上课讲的最烂的老师</p><p>我上课基本没认真听过，基本上就是靠考前去 B 站找视频看学一下，最后还考了个 79</p><p>相比之下，高数就讲的还行，虽然讲了很多没用的（我每次都在想能不能只挑重点讲），但是还是比物理好太多太多，这次高数没有复习好，空间几何考的都是我没复习到的，然后向量叉乘是怎么乘的我也忘了，参数方程求导也忘了，关键是我居然连 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ln</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\ln \left( x-1\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span> 的积分我都忘记是怎么积的了…只能说是级数还有偏导还是可以</p><p>另外几门？离散也就那样吧，金工感觉就增长一下见识，思政终于完结了一个改革开放史，算是少了一门，英语也就那样，对了六级也快考了，外教课感觉老师讲得挺好的，也很有意思，但是舍友都不听，就我一个人听，task 都是我自己完成的，然后还要教他们这么做（</p><h2 id="目前的状态怎么样？">目前的状态怎么样？</h2><p>感觉还不错，目前还因为期中有一堆历史遗留问题要处理，有大干一场的热情</p><p>但是平时的事情真的是多到离谱，一般来说，从周一开始，就不断有事情开始缠到你身上，然后一直缠缠到周末才同一解决掉，一般解决完也已经没什么时间了，你问为什么不当天完成？要是当天完成就没有时间写博客了，自然是博客的优先级要更高的，每天不能被这些乱事折腾着然后什么正事都没干吧，不管怎么说，累是累，但是能收获很多东西</p><h2 id="接下来要干什么？">接下来要干什么？</h2><p>接下来？六级是一个，志愿者是一个，算法复习是一个，然后微信小程序还是要学的，SQL也是要继续学的，todo的一堆坑也是要填的。就这样吧！保持高昂的斗志面对生活，我知道我是会周期性地崩溃的，只能说尽量在下次崩溃之前多做点事情，当然也要趁学期结束多做点事情</p><p>时间也不早了，还要早八，赶紧睡吧</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（八）使用 KaTeX 数学公式</title>
      <link href="/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">2022年6月17日更</summary><div class="toggle-content"><p>发现可以按照官方的方法弄了，之前一直无效（</p><p>插一嘴，因为 <a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a> 的 anchors-level 默认是 2 ，所以会有一级标题无法索引的情况，需要手动指定一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;@neilsustc/markdown-it-katex&#x27;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">strict:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div></details><p>在 <code>Butterfly</code> 主题里的确是有公式的设置的，在<a href="https://butterfly.js.org/posts/ceeb73f/#Math-%E6%95%B8%E5%AD%B8">官方文档</a>里也有教你配置的教程</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171029968.jpg" alt=""></p><p>但是鄙人跟着流程走下来真的一点用都没有，还是没法渲染 😭😭😭</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171030821.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">一个不建议使用的方法</summary><div class="toggle-content"><blockquote><p>2022年4月17日深夜注：安装这个弄完后的确能正确显示公式，但点击右侧目录中的一级标题不会跳转（没有创建对应的元素），虽然我用<code>hexo-renderer-markdown-it-plus</code>或<code>hexo-renderer-markdown-it</code>的配置法在 <code>_config.yml</code> 中把 <code>level</code> 设置为了1，但好像没有什么卵用，详情请见<a href="https://blog.csdn.net/Fosu_Chenai/article/details/111192850">【Hexo】关于hexo-renderer-markdown-it引起的一级目录无法跳转的错误</a>的评论区</p></blockquote><p>昨晚上网折腾了好久好久都没法解决，今早又折腾了一早上，终于成功了</p><p>（当然，如果你按照教程能成功自然更好，但是如果你也没成功的话，希望下面的经历可以帮到你）</p><p>首先解决依赖问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save </span><br><span class="line">npm un hexo-renderer-kramed --save</span><br><span class="line">npm i hexo-math --save</span><br><span class="line">npm i hexo-renderer-markdown-it-plus --save</span><br></pre></td></tr></table></figure><p>有可能会有多余的依赖，我反正全放这了</p><p>然后前往主题配置文件，手动加上 <code>CSS</code> 和 <code>JS</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171047845.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-bsHo4/LA+lkZv61JspMDQB9QP1TtO4IgOf2yYS+J6VdAYLVyx1c3XKcsHh0Vy8Ws&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-4z8mjH4yIpuK9dIQGR1JwbrfYsStrNK6MP+2Enhue4eyo0XlBDXOIPc8b6ZU0ajz&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后清缓存并启动预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204171052525.jpg" alt=""></p><p>鸣谢：<a href="https://cloud.tencent.com/developer/article/1933193">【Hexo】博客数学公式解决方案，亲测有效</a></p></div></details><p>上面是我早上的前车之鉴，晚上算是真正搞完了</p><p>首先要先换一个渲染器，十分感谢<a href="https://blog.csdn.net/qq_36667170/article/details/105846999">hexo markdown渲染器 @upupming/hexo-renderer-markdown-it-plus</a>让我发现了 <code>hexo-renderer-markdown-it-katex</code></p><p>先卸载旧的，如果你还装了什么其他的，要一并卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save </span><br></pre></td></tr></table></figure><p>安装 <code>hexo-renderer-markdown-it-katex</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-it-katex</span><br></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code> 的末尾添加下面的内容，我不知道为什么就偏偏配置这个渲染器是成功的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>最后清缓存并尝试预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>之后你就发现，既能渲染公式，一级标题的跳转也不受影响，而且你也不用手动导入什么<code>JS</code>或<code>CSS</code>，简直不要太爽</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204172349827.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『大学物理1』期中复习</title>
      <link href="/2022/04/15/%E3%80%8EOthers%E3%80%8F%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%861-%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/04/15/%E3%80%8EOthers%E3%80%8F%E5%A4%A7%E5%AD%A6%E7%89%A9%E7%90%861-%E6%9C%9F%E4%B8%AD%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="质点运动学">质点运动学</h1><h2 id="圆周运动">圆周运动</h2><p>角度 - 角速度 - 角加速度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>−</mo><mi>ω</mi><mo>−</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">\theta -\omega -\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></p><ul><li>切线加速度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>t</mi></msub><mo>=</mo><mi>α</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">a_{t}=\alpha r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>（角加速度 × 半径）</li><li>法线加速度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><msup><mi>ω</mi><mn>2</mn></msup><mi>r</mi></mrow><annotation encoding="application/x-tex">a_{n}=\omega^{2}r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>（角速度的方 × 半径）</li></ul><h1 id="运动建模及其方程">运动建模及其方程</h1><p>大部分的模型方程都是基于三角形的勾股定理</p><h1 id="牛顿定律及常见力">牛顿定律及常见力</h1><p>没什么好记的</p><h1 id="转动惯量和力矩">转动惯量和力矩</h1><p>转动惯量和动能的关系：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mi>k</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>J</mi><msup><mi>ω</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E_{k}=\dfrac{1}{2}J\omega ^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>转动惯量与角动量：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo>=</mo><mi>J</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">L=J\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span></p><h2 id="转动惯量结论">转动惯量结论</h2><ul><li><p>质点（微元）、绕中心旋转的薄圆环：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>​（各质元到轴的垂直距离都相同）</p></li><li><p>绕中心旋转的圆盘（柱）：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>棒子绕一端转：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{3}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>棒子绕中心：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>12</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{12}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><h2 id="转动惯量计算（微元法）">转动惯量计算（微元法）</h2><ul><li><p>例1：设转轴在棒的一端且与棒垂直，棒长为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span> ，求转动惯量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi></mrow><annotation encoding="application/x-tex">J</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span></span></span></span></p><p>解：在棒上离轴 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 处，取长度元 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span>，单位长度质量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span>，则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>J</mi><mo>=</mo><mi>d</mi><mi>m</mi><mo>⋅</mo><msup><mi>x</mi><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mi>λ</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dJ=dm\cdot x^{2}=x^{2}\lambda dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">dJ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">λ</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi>L</mi></msubsup><mi>λ</mi><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>λ</mi><msup><mi>L</mi><mn>3</mn></msup></mrow><mn>3</mn></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>3</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\int _{0}^{L}\lambda x^{2}dx=\dfrac{\lambda L^{3}}{3}=\dfrac{1}{3}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3921em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0362em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>例2：转轴移到中点？（原点在中间，从一端积分到另一端，所以是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">-\dfrac{L}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\dfrac{L}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mn>2</mn></msub><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>L</mi><mn>2</mn></mfrac></mstyle></msubsup><mi>λ</mi><msup><mi>x</mi><mn>2</mn></msup><mi>d</mi><mi>x</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>λ</mi><msup><mi>L</mi><mn>3</mn></msup></mrow><mn>12</mn></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>12</mn></mfrac></mstyle><mi>m</mi><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J_{2}=\int ^{\dfrac{L}{2}}_{-\dfrac{L}{2}}\lambda x^{2}dx=\dfrac{\lambda L^{3}}{12}=\dfrac{1}{12}mL^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.4947em;vertical-align:-1.9825em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5121em;"><span style="top:-2.1848em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:3.4153em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord sizing reset-size3 size6 mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4153em;"><span style="top:-2.248em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.732em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.752em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-4.5121em;margin-right:0.05em;"><span class="pstrut" style="height:3.4153em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sizing reset-size3 size6 mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4153em;"><span style="top:-2.248em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.732em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.752em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9825em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>例3：求质量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>，密度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span>，半径为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>，厚度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>​的均质圆盘的转动惯量（转轴在中心且垂直）</p><p>解：将圆盘看成是很多垂直薄圆环（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">V_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）组成</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>J</mi><mo>=</mo><mi>d</mi><mi>m</mi><mo>⋅</mo><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><msup><mi>r</mi><mn>2</mn></msup><mo>⋅</mo><mi>ρ</mi><mo>⋅</mo><msub><mi>V</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">dJ=dm\cdot r^{2}=r^{2}\cdot \rho \cdot V_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">dJ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>又因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub><mo>=</mo><mi>h</mi><mo>⋅</mo><mi>S</mi><mo>=</mo><mi>h</mi><mo>⋅</mo><mn>2</mn><mi>π</mi><mi>r</mi><mo>⋅</mo><mi>d</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">V_{0}=h\cdot S=h\cdot 2\pi r\cdot dr</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi>R</mi></msubsup><msup><mi>r</mi><mn>2</mn></msup><mo>⋅</mo><mi>ρ</mi><mo>⋅</mo><mi>h</mi><mo>⋅</mo><mn>2</mn><mi>π</mi><mi>r</mi><mo>⋅</mo><mi>d</mi><mi>r</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>π</mi><msup><mi>R</mi><mn>4</mn></msup><mi>h</mi><mo>⋅</mo><mi>ρ</mi></mrow><annotation encoding="application/x-tex">J=\int _{0}^{R}r^{2}\cdot \rho\cdot h\cdot 2\pi r\cdot dr=\dfrac{1}{2}\pi R^{4}h\cdot \rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3921em;vertical-align:-0.3558em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0362em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3558em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span></p><p>又因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mi>ρ</mi><mi>V</mi></mrow><annotation encoding="application/x-tex">m=\rho V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=\dfrac{1}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><p>（计算中可以随便设未知量，最后一般都可以消掉）</p><h2 id="平行轴定理">平行轴定理</h2><p>把转轴由质心轴平移 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>  ，新的转动惯量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>J</mi><mo>=</mo><msub><mi>J</mi><mn>0</mn></msub><mo>+</mo><mi>m</mi><msup><mi>d</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J=J_{0}+md^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>例：把圆柱的转轴移到边上</p><p>绕质心：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>c</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J_{c}=\dfrac{1}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>绕边缘：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>z</mi></msub><mo>=</mo><msub><mi>J</mi><mi>c</mi></msub><mo>+</mo><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>3</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">J_{z}=J_{c}+mR^{2}= \dfrac{3}{2}mR^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><h2 id="垂直轴定理">垂直轴定理</h2><p>若我们要求一个刚体薄片关于一条与其垂直的轴的转动惯量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>z</mi></msub></mrow><annotation encoding="application/x-tex">J_{z}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，则可以在薄片上取两个互相垂直且与垂直轴相交的轴并分别计算薄片关于这两条轴的转动惯量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">J_{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">J_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>J</mi><mi>z</mi></msub><mo>=</mo><msub><mi>J</mi><mi>x</mi></msub><mo>+</mo><msub><mi>J</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">J_{z}=J_{x}+J_{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></p><h2 id="伸展定理">伸展定理</h2><p>如果将一个物体的任何一点，平行地沿着一支直轴作任意大小的位移，则此物体对此轴的转动惯量不变</p><h2 id="力矩">力矩</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mi>F</mi><mi>R</mi></mrow><annotation encoding="application/x-tex">M=FR</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">FR</span></span></span></span>（用手拨动转盘产生力矩）</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mi>J</mi><mi>α</mi></mrow><annotation encoding="application/x-tex">M=J\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>（力矩与转动惯量与角加速度的关系，用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo>=</mo><mi>m</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">F=ma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ma</span></span></span></span> 理解）</p><p>两边同时对时间积分：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∫</mo><mi>m</mi><mi>a</mi><mo>⋅</mo><mi>R</mi><mi>d</mi><mi>t</mi><mo>=</mo><mo>∫</mo><mi>J</mi><mi>α</mi><mi>d</mi><mi>t</mi><mo>⇒</mo><mi>m</mi><mi>v</mi><mi>R</mi><mo>=</mo><mi>J</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">\int ma\cdot Rdt=\int J\alpha dt\Rightarrow mvR=J\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ma</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.3061em;"></span><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>​​（小虫一瞬间跳走）</p><ul><li><p>例1：定滑轮两边用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">F_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 两个力拉，求滑轮的切线加速度</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mo>=</mo><msub><mi>F</mi><mn>2</mn></msub><mi>R</mi><mo>−</mo><msub><mi>F</mi><mn>1</mn></msub><mi>R</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mo>=</mo><mi>J</mi><mi>α</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}J=\dfrac{1}{2}mR^{2}\\  M=F_{2}R-F_{1}R\\  M=J\alpha \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8874em;vertical-align:-2.1937em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.9em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.892em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.616em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.616em' style='width:0.8889em' viewBox='0 0 888.89 616' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V616 H384z M384 0 H504 V616 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.616em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.616em' style='width:0.8889em' viewBox='0 0 888.89 616' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V616 H384z M384 0 H504 V616 H384z'/></svg></span></span><span style="top:-4.9em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6937em;"><span style="top:-4.6937em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.9997em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-1.5597em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1937em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mi>α</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><msub><mi>F</mi><mn>2</mn></msub><mi>R</mi><mo>−</mo><msub><mi>F</mi><mn>1</mn></msub><mi>R</mi></mrow><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\Rightarrow \alpha =\dfrac{F_{2}R-F_{1}R}{\dfrac{1}{2}mR^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2578em;vertical-align:-1.8974em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.5514em;"><span class="pstrut" style="height:3.3214em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9984em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8974em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>t</mi></msub><mo>=</mo><mi>α</mi><mi>R</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>2</mn><msub><mi>F</mi><mn>2</mn></msub><mi>R</mi><mo>−</mo><mn>2</mn><msub><mi>F</mi><mn>1</mn></msub><mi>R</mi></mrow><mrow><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mfrac></mstyle><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mn>2</mn><msub><mi>F</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><msub><mi>F</mi><mn>1</mn></msub></mrow><mrow><mi>m</mi><mi>R</mi></mrow></mfrac></mstyle></mrow><annotation encoding="application/x-tex">a_{t}=\alpha R=\dfrac{2F_{2}R-2F_{1}R}{mR^{2}}=\dfrac{2F_{2}-2F_{1}}{mR}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>例2：定滑轮两边挂着 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">m_{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">m_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>​​ 两个物块，求释放后物块加速度</p><p>​</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>T</mi><mn>1</mn></msub><mo>−</mo><msub><mi>m</mi><mn>1</mn></msub><mi>g</mi><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><msub><mi>a</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mn>2</mn></msub><mi>g</mi><mo>−</mo><msub><mi>T</mi><mn>2</mn></msub><mo>=</mo><msub><mi>m</mi><mn>2</mn></msub><msub><mi>a</mi><mi>t</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>T</mi><mn>2</mn></msub><mo>−</mo><msub><mi>T</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow><mi>R</mi><mo>=</mo><mi>J</mi><mi>α</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>J</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mn>2</mn></mfrac></mstyle><mi>m</mi><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mi>t</mi></msub><mo>=</mo><mi>R</mi><mi>α</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}T_{1}-m_{1}g=m_{1}a_{t}\\  m_{2}g-T_{2}=m_{2}a_{t}\\  M=\left( T_{2}-T_{1}\right) R=J\alpha \\  J=\dfrac{1}{2}mR^{2}\\  a_{t}=R\alpha \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:7.8em;vertical-align:-3.65em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.15em;"><span style="top:-1.366em;"><span class="pstrut" style="height:4.116em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.358em;"><span class="pstrut" style="height:4.116em;"></span><span style="height:2.116em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='2.116em' style='width:0.8889em' viewBox='0 0 888.89 2116' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V2116 H384z M384 0 H504 V2116 H384z'/></svg></span></span><span style="top:-4.116em;"><span class="pstrut" style="height:4.116em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-5.258em;"><span class="pstrut" style="height:4.116em;"></span><span style="height:2.116em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='2.116em' style='width:0.8889em' viewBox='0 0 888.89 2116' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V2116 H384z M384 0 H504 V2116 H384z'/></svg></span></span><span style="top:-7.366em;"><span class="pstrut" style="height:4.116em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.65em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.1337em;"><span style="top:-6.4472em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.0072em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.5672em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-1.8137em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-0.1197em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2806em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.6337em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li></ul><h1 id="电场强度">电场强度</h1><h2 id="点电荷电场强度">点电荷电场强度</h2><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>E</mi><mo stretchy="true">→</mo></mover><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>4</mn><mi>π</mi><msub><mi>ε</mi><mn>0</mn></msub></mrow></mfrac></mstyle><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>q</mi><msup><mi>r</mi><mn>2</mn></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">\overrightarrow{E}=\dfrac{1}{4\pi \varepsilon _{0}}\dfrac{q}{r^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2053em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.2053em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span><span class="svg-align" style="top:-3.6833em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1574em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h2 id="积分类电场强度（微元法）">积分类电场强度（微元法）</h2><ul><li><p>例1：无限长带电直线，单位长度带电量为 $\eta $</p><p>取线元 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span> ，带电 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>q</mi><mo>=</mo><mi>η</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">dq=\eta dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mn>1</mn><mrow><mn>4</mn><mi>π</mi><msub><mi>ε</mi><mn>0</mn></msub></mrow></mfrac></mstyle><mstyle displaystyle="true" scriptlevel="0"><mfrac><mrow><mi>η</mi><mi>d</mi><mi>x</mi></mrow><msup><mi>r</mi><mn>2</mn></msup></mfrac></mstyle></mrow><annotation encoding="application/x-tex">dE=\dfrac{1}{4\pi \varepsilon _{0}}\dfrac{\eta dx}{r^{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2074em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">dE</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>​ 投影到两个坐标轴上</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><msub><mi>E</mi><mi>x</mi></msub><mo>=</mo><mi>d</mi><mi>E</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>E</mi><mi>y</mi><mo>=</mo><mi>d</mi><mi>E</mi><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}dE_{x}=dE\cos \theta  \\  dEy=dE\sin\theta \end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>把 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 都换成用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 表示</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>R</mi><mi>x</mi></mfrac></mstyle><mo>=</mo><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>π</mi><mo>−</mo><mi>θ</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>r</mi><mn>2</mn></msup><mo>=</mo><msup><mi>R</mi><mn>2</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}\dfrac{R}{x}=\tan \left( \pi -\theta \right) \\  r^{2}=R^{2}+x^{2}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9932em;"><span style="top:-3.9932em;"><span class="pstrut" style="height:3.3603em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.2992em;"><span class="pstrut" style="height:3.3603em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4932em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>然后从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span>​ 积分</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>E</mi><mi>x</mi></msub><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>E</mi><mi>y</mi></msub><mo>=</mo><mstyle displaystyle="true" scriptlevel="0"><mfrac><mi>η</mi><mrow><mn>2</mn><mi>π</mi><msub><mi>ε</mi><mn>0</mn></msub><mi>R</mi></mrow></mfrac></mstyle></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}E_{x}=0\\  E_{y}=\dfrac{\eta }{2\pi \varepsilon _{0}R}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9418em;"><span style="top:-4.0413em;"><span class="pstrut" style="height:3.1076em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.5018em;"><span class="pstrut" style="height:3.1076em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mord"><span class="mord mathnormal">ε</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">η</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4418em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204151737942.jpg" alt=""></p></li></ul><h1 id="核心词汇">核心词汇</h1><table><thead><tr><th>英文</th><th>中文</th></tr></thead><tbody><tr><td>Scalar</td><td>标量</td></tr><tr><td>Vector</td><td>矢量</td></tr><tr><td>The  motion function</td><td>运动方程</td></tr><tr><td>Position  vector</td><td>位矢</td></tr><tr><td>Displacement</td><td>位移</td></tr><tr><td>Velocity</td><td>速度</td></tr><tr><td>Acceleration</td><td>加速度</td></tr><tr><td>Instantaneous  velocity</td><td>瞬时速度</td></tr><tr><td>Momentum</td><td>动量</td></tr><tr><td>Impulse</td><td>冲量</td></tr><tr><td>Impulse-moment  theorem</td><td>动量定理</td></tr><tr><td>Conservation  of momentum</td><td>动量守恒</td></tr><tr><td>(in)elastic  collision</td><td>(非)弹性碰撞</td></tr><tr><td>Center  of mass</td><td>质心</td></tr><tr><td>Work</td><td>功</td></tr><tr><td>Work energy  Theorem</td><td>动能定理</td></tr><tr><td>Potential/Kinetic Energy</td><td>势/动能</td></tr><tr><td>Mechanical energy</td><td>机械能</td></tr><tr><td>(non)conservative force</td><td>(非)保守力</td></tr><tr><td>Power</td><td>功率</td></tr><tr><td>equilibrium</td><td>平衡</td></tr><tr><td>Rotation</td><td>转动</td></tr><tr><td>Translational</td><td>平动的</td></tr><tr><td>Rigid body</td><td>刚体</td></tr><tr><td>Radian/degree</td><td>弧度rad/度°</td></tr><tr><td>Revolution (rev/min=rpm)</td><td>转 (转每分)</td></tr><tr><td>Angular displacement</td><td>角位移</td></tr><tr><td>Angular velocity/acceleration</td><td>角速度/角加速度</td></tr><tr><td>Torque</td><td>力矩</td></tr><tr><td>Parallel-axis  theorem</td><td>平行轴定理</td></tr><tr><td>Rotational  kinetic energy</td><td>转动动能</td></tr><tr><td>(counter)clockwise</td><td>逆时针/顺时针方向</td></tr><tr><td>pulley</td><td>滑轮</td></tr><tr><td>angular momentum</td><td>角动量</td></tr><tr><td>Conservation  of Angular Momentum</td><td>角动量守恒</td></tr><tr><td>Electricity</td><td>电学</td></tr><tr><td>Electric  charge</td><td>电荷</td></tr><tr><td>Electrostatic/Electrostatics</td><td>静电的/静电学</td></tr><tr><td>Point charge</td><td>点电荷</td></tr><tr><td>Electric dipole (moment)</td><td>电偶极子(电偶极矩)</td></tr><tr><td>Linear(surface) charge density</td><td>线(面)电荷密度</td></tr><tr><td>Coulomb</td><td>库仑</td></tr><tr><td>(electric) field</td><td>(电)场</td></tr><tr><td>Electron/Proton</td><td>电子/质子</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 基础课复习 </category>
          
          <category> 大学物理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>『Others』第三届字节跳动青训营 - 后端专场 早知晓直播会议纪要</title>
      <link href="/2022/04/10/%E3%80%8EOthers%E3%80%8F%E7%AC%AC%E4%B8%89%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5-%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA-%E6%97%A9%E7%9F%A5%E6%99%93%E7%9B%B4%E6%92%AD%E4%BC%9A%E8%AE%AE%E7%BA%AA%E8%A6%81/"/>
      <url>/2022/04/10/%E3%80%8EOthers%E3%80%8F%E7%AC%AC%E4%B8%89%E5%B1%8A%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5-%E5%90%8E%E7%AB%AF%E4%B8%93%E5%9C%BA-%E6%97%A9%E7%9F%A5%E6%99%93%E7%9B%B4%E6%92%AD%E4%BC%9A%E8%AE%AE%E7%BA%AA%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<details class="toggle" ><summary class="toggle-button" style="">相关链接</summary><div class="toggle-content"><p><a href="https://live.juejin.cn/4354/youthcamp_3_preknow">直播/视频源地址</a></p><p><a href="https://juejin.cn/post/7083689789421682718">【第三届字节跳动青训营后端专场 Q&amp;A】</a></p><p><a href="https://juejin.cn/post/7083792721265033229">【第三届字节跳动青训营｜刷题打卡】DAY1</a></p></div></details><h1 id="青训营简介">青训营简介</h1><p>字节跳动的免费培训&amp;人才选拔项目</p><p>面向所有在校大学生</p><h1 id="后端开发-求值建议">后端开发 &amp; 求值建议</h1><h2 id="后端岗位定义、做什么、发展前景">后端岗位定义、做什么、发展前景</h2><p>后端（服务端），开发远程服务器上运行的程序，形容词：幕后大佬</p><p>字节后端的分类：业务端、中台（？）、基础组件、引擎端、基础架构支持</p><p>做什么：</p><ul><li>最终目标：服务好用户</li><li>后端更关注全体用户</li><li>保证稳定性（高可用性）、效率（业务可扩展性）</li><li>关注最终的用户体验，兜底方，对全局够了解</li></ul><p>发展前景：</p><ul><li>最近有很多负面新闻，但是大可不必担心</li><li>最近30年来互联网行业周期性变化，每次都走出来了</li><li>发展空间还很大</li><li>未来30年最好的行业还是互联网</li></ul><p>发展前景三个关键词：</p><ol><li>能力提升<br>个人硬实力与软实力（沟通）结合</li><li>核心作用<br>后端比底层更接近用户、比PM（？）更懂技术、比前端更有全局视角、比QA（？）更了解业务，能够全面地掌握所有信息，能基于此做出最全面的决策，是问题解决的核心角色，承担核心作用</li><li>适应性<br>后端适应性更强，后续发展的空间更大，更容易转到全栈，学习更多算法</li></ol><h2 id="怎么选岗位">怎么选岗位</h2><h3 id="后端与非后端">后端与非后端</h3><p>后端对计算机方面知识要求比较多，日常工作中挑战比较大</p><p>后端发展前景好，工作中有很强的满足感</p><h3 id="后端内部岗位细化">后端内部岗位细化</h3><p>有差异，但是差异不大基本目标相同，整个目标围绕高可用高吞吐，稳定性，更好地促进业务迭代，服务质量之类的</p><p>大可不必纠结细分邻域</p><h3 id="有这些区别要怎么选">有这些区别要怎么选</h3><p>兴趣第一导向，follow your heart</p><h2 id="实习的心路历程和建议">实习的心路历程和建议</h2><p>企业招聘，简历上有实现经历，更有利于人才的考察</p><p>常见误区：实习时间短，做不了太多牛逼的事情，没什么帮助</p><p>实际的实习时间是很有限的，做出一定的贡献和产出是很难的，如果要拿出一个很大的产出是有点不切实际的，更希望在实习的过程中体现个人素养，成长潜力</p><p>实习关注的三个点</p><ul><li>锻炼扎实的基础</li><li>保持旺盛的求知欲，举一反三的思考能力，充分学习熟悉环境，不要有太多心理负担</li><li>养成良好的责任心、负责精神</li></ul><p>Q1：没有时间实习的话会不会有竞争劣势？</p><p>有没有实习会有没实习的一套考察方式，有实习会有一套有实习的考查方式，不用太担心</p><p>Q2：时间非常多，要不要去很多公司刷实习经历？</p><p>没有必要如此频繁地切换实习的内容，很难做到在一件事情上有很深度的理解</p><p>建议时间充裕的话，在一个公司或一个方向上稳定专注地投入，加深理解</p><h2 id="简历及面试经验分享">简历及面试经验分享</h2><h3 id="简历">简历</h3><p>什么样的简历大概率是有面试的？</p><ul><li>有大厂实习经历（对履历进行背书）</li><li>获奖（主要是ACM或顶刊）</li><li>有创业经历（产品sence）、合作的开源项目（编程兴趣）、有深度的博客（定期储备知识、整理、分享的习惯）</li><li>历史面试中通过过两轮以上</li><li>内部人员推荐（团队内背书，有一定了解）</li></ul><p>什么样的简历会石沉大海？</p><ul><li><p>写很多的项目，但是通篇看下来，面试官不知道怎么提问（简历中没有可考察的知识点）<br>所以在写简历的时候，要简单地描述项目，重点在于你在项目里做什么，按照四大（star？）的法则去描述项目的难点，写清楚你面临的挑战以及解决方案，最好是把你用到的专业技能描述出来，这样面试官才能有针对性地进行提问 ，你也有针对性地准备这些问题的答案</p></li><li><p>专业技能的匹配度太低<br>有些人专职做数值算法（？）的然后投应用研发的岗位，面试官难以评估能力（不了解）</p></li><li><p>多次投递简历被拒，或有多次面试记录挂掉</p><p>提醒一定要准备好再投递，不要盲目投递</p></li></ul><h3 id="面试">面试</h3><p>换位思考：一个企业想要招到什么样的人</p><ul><li>初创公司：能力全面、动手能力强、干活非常快（招进来就能干活）</li><li>互联网大厂：对于应届生，公司完全有能力进行培养，这时候潜力就很重要</li></ul><p>所以问题就变成了：怎么在候选人中快速鉴别有潜力的同学</p><p>面试的过程就是打标签，技术方面的面试，3+1+1原则：</p><ul><li>3：三门基础课（编程语言、操作系统原理、计算机网络）</li><li>1：项目，在项目中涉及的技术点要做非常完备的学习<br>例：你在学校做了一个图书管理系统，可能面试官会问你图书的抄借（？）问题，然后由此引出数据库的锁或者是事务 ，然后引出分布式锁，然后分布式锁聊到 Redis，由 Redis 聊到一下主从一致性（？）或者持久化，它是一条知识链，你需要把问题研究地非常 深，在这个过程中展示知识广度和深度</li><li>1：数据结构与算法，对比八股文（看了就知道，没看就不知道），算法对潜力更有区分度，面试官能看出很多细节，比如面对问题怎么去思考、编码习惯怎么样，对编程语言是否足够熟练</li></ul><p>非技术部分（软素质）：</p><p>不要犯低级错误，研发过程要合作，例： 有一位同学聊到在校项目的时候，表示所有的项目都是他一个人搞的，其他人啥都没干，对组长和其他组员都表现出极大的不屑，也许他能力是真的很强，但是面试时要考察候选人的同理心，是否能合作，对自己的优势和劣势是否有充分的认知，然后责任心是否足够，这类软素质同样是重要的考察点</p><p>小技巧：刷面试题（应试教育产物但确实有效）</p><h2 id="工作氛围、工作日常">工作氛围、工作日常</h2><p>轻松开放平等，成就感强，有挑战性</p><p>数据驱动，关注对用户的价值的提升</p><p>要学会自己给自己提需求</p><p>非常要求解决问题的能力</p><p>（分享一本书：《成功人士的7个习惯》）</p><h1 id="青训营内容设计-学习建议">青训营内容设计 &amp; 学习建议</h1><p>特点：</p><ul><li><p>纯干货，不会有太多方法论或抽象的东西</p></li><li><p>接地气，不讲八股文，讲生产过程中遇到的实际问题，更能理解目前互联网业界面临的挑战是怎么样的，这些奇妙的设计、解决方案是怎么样设计出来的</p></li><li><p>领先性，介绍业界现在最领先、最优解的做法，尽量不去复述网上的博客，拿着10年前的解决方案给大家讲，因此不会讲太多基础的语言学习</p></li><li><p>一课一练，巩固知识</p></li></ul><p>模块：</p><ul><li>语言篇，快速回顾语言，教会怎样对性能进行调优，怎样发现问题，怎么进行高质量的编程</li><li>部署篇，温习计算机网络的知识，了解目前互联网的基础设施是怎样的 ，例：你可能听过一个面试八股文：从浏览器里敲下www.baidu.com输入回车的时候到底发生了什么，在这个课程里会了解这个八股文的全新版本，同时学习团队开放，部署的基础流程有哪些，手把手地教你把上一个章节的服务放到公网上</li><li>架构篇，揭开一堆名称的神秘面纱，再也不会被一些高大上的词忽悠，对架构会有基础的设计和判断能力</li><li>中间件（？）和存储，在各个业务场景中怎么去选择存储，怎么去使用，背后的原理是什么，甚至自己去写一个小的存储</li><li>最后的大项目</li></ul><p>师资团队：</p><p>这个不用说了，非常豪华</p><p>主要语言：</p><p>Golang（为什么不是 Java？见《名词王国里的死刑》）</p><p>课程期望：</p><p>回望过去的项目，感叹之前写的都是hello world</p><h1 id="互动答疑">互动答疑</h1><p>Q：参加不了ACM之类的比赛怎么办</p><p>A：没有关系，面试的时候都是公平的，当场考察算法能力</p><p>Q：实习时期？</p><p>A：本科建议好好学习，不要大二就出来实习了，研究生只要导师同意就行，然后实习时间不要太短，至少要3个月</p><p>Q：女生？</p><p>A：女生也有很多，比例正常，性别没有突出优势，面试上人人平等</p><p>Q：参加算法比赛对简历有提升吗？</p><p>A：获奖经历会影响简历能否通过筛选，但是到了面试人人平等，看中实际的编码能力，即使一个人拿过ACM国奖，结果面试的时候很简单的问题写不出来，换一道题还是写不出来，这时面试官就会怀疑简历作假，所以重要的是你的能力，而不是你的这些奖</p><p>Q：字节跳动用啥微服务的框架？</p><p>A：pateX（？），已开源原视频在1:14:36，专有名称太多不记了</p><p>…</p><p>（后面有点水，从原视频1小时后都是互动答疑，可以自己看）</p>]]></content>
      
      
      <categories>
          
          <category> 青训营 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节青训营 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（九）汇总数据</title>
      <link href="/2022/04/08/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%B1%87%E6%80%BB%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/08/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%B1%87%E6%80%BB%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="聚集数据">聚集数据</h1><p>我们经常需要汇总数据而不用把它们实际检索出来，这种例子有很多：</p><ul><li><p>确定表中行数（或满足某个条件或包含某个特定值的行数）</p></li><li><p>获取表中某些行的和</p></li><li><p>找出表列（或某些特定行）的最大值、最小值、平均值</p></li></ul><p>以上例子 <mark class="hl-label green">都需要汇总出表中的数据，而不需要查出数据本身</mark> ，为此 SQL 提供了 5 个<code>聚集函数（aggregate function）</code></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>AVG()</code></td><td>某列的平均值</td></tr><tr><td><code>COUNT()</code></td><td>某列的行数</td></tr><tr><td><code>MAX()</code></td><td>某列的最大值</td></tr><tr><td><code>MIN()</code></td><td>某列的最小值</td></tr><tr><td><code>SUM()</code></td><td>某列之和</td></tr></tbody></table><p>与上一篇中的数据处理函数不同，聚集函数在主要 SQL 实现中得到了相当一致的支持</p><h2 id="AVG-函数"><code>AVG()</code> 函数</h2><p><code>AVG()</code> 用于返回 <mark class="hl-label green">平均值</mark> ，它可以返回所有列的平均值，也可以返回特定行或列的平均值</p><p>下面是一个基本例子，返回 Products 表中所有产品的平均价格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082234394.jpg" alt=""></p><p>正如上文所说，<code>AVG()</code> 也可以返回特定部分的平均值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span>  vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082238580.jpg" alt=""></p><p>这一条语句与上面的不同在于，它包含了 <code>WHERE</code> 子句，只过滤出了 <code>vend_id</code> 为 <code>DLL01</code> 的产品，因此求得的平均值只是该供应商的产品的价格平均值</p><details class="toggle" ><summary class="toggle-button" style="">注意：只用于单个列</summary><div class="toggle-content"><p><code>AVG()</code> 只能用来确定单个特定数列的平均值，而且列名必须作为函数参数给出。为获得多个列的平均值，必须使用多个 <code>AVG()</code> 函数。只有一个例外是要从多个列计算出一个值时，这本篇后面会讲到</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p><code>AVG()</code> 函数忽略列值为 <code>NULL</code> 的行</p></div></details><h2 id="COUNT-函数"><code>COUNT()</code> 函数</h2><p><code>COUNT()</code> 函数进行 <mark class="hl-label green">行的计数</mark> ，可以确定表中行的数目或符合特定条件的行的数目</p><p>两种功能对应到两种使用方法：</p><ul><li>使用 <code>COUNT(*)</code> 求得所有行的数目，不管列中包含的是空值（<code>NULL</code>）还是非空值</li><li>使用 <code>COUNT(column)</code> 对特定列中具有值的进行计数，忽略 <code>NULL</code> 值</li></ul><p>下面的例子返回 <code>Customers</code> 表中顾客的总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_cust </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082257080.jpg" alt=""></p><p>下面的例子只对留了电子邮件地址的客户计数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(cust_email) <span class="keyword">AS</span> num_cust </span><br><span class="line"><span class="keyword">FROM</span> Customers;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082259839.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p>再次重复：如果不指定列表则不忽略，如果指定了列名则会忽略</p></div></details><h2 id="MAX-MIN-函数"><code>MAX() </code> /  <code>MIN()</code> 函数</h2><p>跟字面意思一样，<code>MAX()</code> 或 <code>MIN()</code>函数用于返回 <mark class="hl-label green">最大值或最小值</mark> ，并要求指定列名，例如下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082314812.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：对非数值数据使用</summary><div class="toggle-content"><p>虽然这两个函数一般用于找出最大或最小的数值或日期值，但许多（并非所有） DBMS 运行使用它们处理文本列，这时将会返回该列排序后的首行或尾行</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p>这两个函数忽略列值为 <code>NULL</code> 的行</p></div></details><h2 id="SUM-函数"><code>SUM()</code> 函数</h2><p><code>SUM()</code> 函数用来返回 <mark class="hl-label green">指定列的和</mark> </p><p>举一个例子， <code>OrderItems</code> 表包含订单中实际的物品，每个物品都有相应的数量，现在检索 20005 号订单的货物总数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(quantity) <span class="keyword">AS</span> items_ordered</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082328545.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082328560.jpg" alt=""></p><p>对照表中数据，可以看见并没有错误</p><p><code>SUM()</code> 也可以用来合计计算值，在下面的例子中，合计每项物品的<code>item_price*quantity</code>，得出订单总金额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(item_price <span class="operator">*</span> quantity) <span class="keyword">AS</span> total_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082331212.jpg" alt=""></p> <details class="toggle" ><summary class="toggle-button" style="">说明：NULL 值</summary><div class="toggle-content"><p><code>SUM()</code> 函数忽略列值为 <code>NULL</code> 的行</p></div></details><h1 id="聚集不同值">聚集不同值</h1><blockquote><p>这个功能本人感觉说大白话就是<mark class="hl-label green">去重然后再进行计算</mark> </p></blockquote><p>以上 5 个聚集函数都可以如下使用</p><ul><li>对所有行进行计算，指定 <code>ALL</code> 参数或不指定参数（因为这是默认项）</li><li>只包含不同的值，指定 <code>DISTINCT</code> 参数</li></ul><p>例如下面的例子，在去重后再求平均值，发现平均价格升高，因为有多个物品具有相同的较低价格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> prod_price ) <span class="keyword">AS</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082343558.jpg" alt=""></p> <details class="toggle" ><summary class="toggle-button" style="">注意：DISTINCT 不能用于 COUNT(*)</summary><div class="toggle-content"><p><code>DISTINCT</code> 必须使用列名，故不能用于 <code>COUNT(*)</code> ，类似地也不能用于计算或表达式</p></div></details> <details class="toggle" ><summary class="toggle-button" style="">说明：其他聚集函数</summary><div class="toggle-content"><p>处理这里的 <code>ALL</code> 和 <code>DISTINCT</code> 外，有的 DBMS 还支持其他参数，例如对查询结果的子集进行计算的 <code>TOP</code> 和 <code>TOP PERCENT</code> ，详情请参阅相应的文档</p></div></details><h1 id="组合聚集函数">组合聚集函数</h1><p>目前为止的所有聚集函数例子都只涉及单个函数，但实际上，<code>SELECT</code> 语句可以根据需要包含多个聚集函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num_items,</span><br><span class="line">       <span class="built_in">MIN</span>(prod_price) <span class="keyword">AS</span> price_min,</span><br><span class="line">       <span class="built_in">MAX</span>(prod_price) <span class="keyword">AS</span> price_max,</span><br><span class="line">       <span class="built_in">AVG</span>(prod_price) <span class="keyword">AS</span> price_avg</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204082356846.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（八）使用函数处理数据</title>
      <link href="/2022/04/07/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/07/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-中的函数">SQL 中的函数</h1><p>同许多编程语言一样，SQL 中也有函数</p><p>但有一个很重要的问题，每一个 DBMS 都有特定的函数，事实上，只有少数几个函数被所有主要 DBMS 同等地支持</p><p>下表很明显地体现了这一区别</p><table><thead><tr><th>函数</th><th>语法</th></tr></thead><tbody><tr><td>提前字符串的组成部分</td><td>DB2、Oracle、PostgreSQL 和 SQLite 使用 <code>SUBSTR()</code>；MariaDB、MySQL 和 SQL Server 使用 <code>SUBSTRING()</code></td></tr><tr><td>数据类型转换</td><td>Oracle 使用多个函数，每种类型的转换有一个函数（听上去和 C/C++ 差不多？）；DB2 和 PostgreSQL 使用 <code>CAST()</code>；MariaDB、MySQL和 SQL Server 使用 <code>CONVERT()</code></td></tr><tr><td>取当前日期</td><td>DB2 和 PostgreSQL 使用 <code>CURRENT_DATE</code>；MariaDB 和 MySQL 使用 <code>CURDATE()</code>；Oracle 使用 <code>SYSDATE()</code>；SQL Server 使用 <code>GETDATE()</code>；SQLite 使用 <code>DATE()</code></td></tr></tbody></table><p>可以看到，SQL 函数是 <mark class="hl-label red">不可移植的</mark> ，这意味着为特定 DBMS 编写的代码在其他 DBMS 中可能不可用</p><p>为了代码的可移植性，许多 SQL 程序员不赞成使用这些函数，当然缺点也是显而易见的</p><details class="toggle" ><summary class="toggle-button" style="">提示：是否应该使用函数？</summary><div class="toggle-content"><p>现在，你面临是否应该使用函数的选择。决定权在你，使用或是不使用也没有对错之分。如果你决定使用函数，应该保证做好代码注释，以便以后你或其他人能确切地知道这些 SQL 代码的含义</p></div></details><h1 id="使用函数">使用函数</h1><h2 id="文本处理函数">文本处理函数</h2><p>在上一篇中，已经使用过 <code>CONCAT()</code> 函数，下面是另一个例子，使用的是 <code>UPPER()</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="built_in">UPPER</span>(vend_name) <span class="keyword">AS</span> vend_name_up</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204071938584.jpg" alt=""></p><p>左右对比可以看到，<code>UPPER()</code> 将文本转换为大写</p><details class="toggle" ><summary class="toggle-button" style="">提示：大写、小写、大小写混合</summary><div class="toggle-content"><p>此时你应该已经知道 SQL 函数不区分大小写，因此 <code>upper()</code>，<code>UPPER()</code>，<code>Upper()</code> 都可以。随你的喜好，不过注意风格一致，不用变来变去，否则你写的代码就不好读了</p></div></details><p>下表是一些常用的文本处理函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>SUBSTR()</code> 或是 <code>SUBSTRING()</code></td><td>提取子字符串</td></tr><tr><td><code>LENGTH()</code>（<code>DATALENGTH()</code> 或 <code>LEN()</code>）</td><td>返回字符串长度</td></tr><tr><td><code>LOWER()</code> 和 <code>UPPER()</code></td><td>转换为大/小写</td></tr><tr><td><code>LTRIM()</code>、<code>RTRIM()</code> 和 <code>TRIM()</code></td><td>去除字符串左/右/两边的空格</td></tr><tr><td><code>SOUNDEX()</code></td><td>返回字符串的 <code>SOUNDEX</code> 值</td></tr></tbody></table><p>其中 <code>SOUNDEX</code> 需要做进一步解释，<mark class="hl-label green">SOUNDEX是一个将任何文本字符串转换为描述其语音表示的字母数学模式的算法，它考虑了类似的发音字符和音节，使得能对字符串进行发音比较而不是字母比较</mark> （是不是听上去很高级？）</p><p>虽然 <code>SOUNDEX</code> 不是 SQL 的概念，但是多数 DBMS 都提供对 <code>SOUNDEX</code> 的支持</p><p>下面给出一个例子：<code>Customsers</code> 表中有一个客户 <code>Kids Place</code> 联系名为 <code>Michelle Green</code>，当然这是一个拼写错误，正确的应为 <code>Michele Green</code>，该怎么办呢？显然，直接搜索肯定不会返回数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name , cust_contact  </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="operator">=</span> <span class="string">&#x27;Michael Green&#x27;</span>;</span><br></pre></td></tr></table></figure><p>但是如果使用 <code>SOUNDEX()</code> 函数进行搜索，它匹配所有发音类似于 <code>Michele Green</code> 的联系名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name , cust_contact  </span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(cust_contact) <span class="operator">=</span> SOUNDEX(<span class="string">&#x27;Michael Green&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204072015850.jpg" alt=""></p><p>可以看见，因为发音相似，两者的 <code>SOUNDEX</code> 值匹配，所以这次正确过滤出了所需的数据</p><h2 id="日期与时间处理函数">日期与时间处理函数</h2><p>日期和时间采用相应的数据类型存储在表中，每种 DBMS 都有自己的特殊形式。日期和时间值以特殊的格式存储，以便能快速和有效地排序或过滤，并节省物理存储空间</p><p>也就因为如此，日期和时间的可移植性最差（悲）</p><p>下表总结了一些最重要的 MySQL 内置日期函数</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>NOW()</code></td><td style="text-align:left">返回当前日期和时间。</td></tr><tr><td style="text-align:left"><code>CURDATE()</code></td><td style="text-align:left">返回当前日期。</td></tr><tr><td style="text-align:left"><code>CURTIME()</code></td><td style="text-align:left">返回当前时间</td></tr><tr><td style="text-align:left"><code>DATE()</code></td><td style="text-align:left">提取日期或日期时间表达式的日期部分。</td></tr><tr><td style="text-align:left"><code>DAY()</code></td><td style="text-align:left">返回月份中的一天（0-31）。</td></tr><tr><td style="text-align:left"><code>DAYNAME()</code></td><td style="text-align:left">返回工作日的名称。</td></tr><tr><td style="text-align:left"><code>MONTH()</code></td><td style="text-align:left">返回经过日期（1-12）的月份。</td></tr><tr><td style="text-align:left"><code>MONTHNAME()</code></td><td style="text-align:left">返回月份的名称。</td></tr><tr><td style="text-align:left"><code>YEAR()</code></td><td style="text-align:left">返回年份。</td></tr><tr><td style="text-align:left"><code>DATE_FORMAT()</code></td><td style="text-align:left">以其他格式显示日期和时间值。</td></tr><tr><td style="text-align:left"><code>EXTRACT()</code></td><td style="text-align:left">提取日期的一部分。</td></tr><tr><td style="text-align:left"><code>DATE_ADD()</code></td><td style="text-align:left">将指定的时间值（或间隔）添加到日期值。</td></tr><tr><td style="text-align:left"><code>DATE_SUB()</code></td><td style="text-align:left">从日期值中减去指定的时间值（或间隔）。</td></tr><tr><td style="text-align:left"><code>DATEDIFF()</code></td><td style="text-align:left">返回两个日期之间的天数</td></tr></tbody></table><h2 id="数值处理函数">数值处理函数</h2><p>数值处理函数仅处理数值数据，这些函数一般用于代数、三角或几何运算，因此不像字符串或日期时间函数使用地那么频繁</p><p>但实际上，在主要的 DBMS 中，数值函数是最一致的，下面是一些基本函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>ABS()</code></td><td>求绝对值</td></tr><tr><td><code>COS()/SIN()</code></td><td>正/余弦</td></tr><tr><td><code>EXP()</code></td><td>返回一个数的指数值</td></tr><tr><td><code>PI()</code></td><td>返回pi的值</td></tr><tr><td><code>SQRT()</code></td><td>开根号</td></tr><tr><td><code>TAN()</code></td><td>正切</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（七）创建计算字段</title>
      <link href="/2022/04/06/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E5%AD%97%E6%AE%B5/"/>
      <url>/2022/04/06/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是计算字段">什么是计算字段</h1><p>很多时候，我们所需要的并不直接是表中的数据</p><p>例如，表中存储着每种物品的价格和数量，但是实际需要的是每种物品的总价格</p><p>诚然，你可以新建一个字段（列）保存总价，每次手动计算保存，但是很明显有更好的方法</p><p>那就是在输出的时候虚拟出一个总价字段，值是价格乘以数量，这就是计算字段</p><details class="toggle" ><summary class="toggle-button" style="">字段（field）</summary><div class="toggle-content"><p>基本上与列（column）的意思相同，经常互换使用，不过数据库列一般称为列，而字段这个术语通常在计算字段这种场合下使用</p></div></details><p>需要注意的是，<mark class="hl-label green">只有数据库知道SELECT语句中哪些列是实际的表列，哪些是虚拟的计算字段。从客户端（如应用程序）来看，计算字段与其他列是一模一样的</mark> </p><p>当然，你也可以在客户端服务器上计算总价，但是在数据库服务器上完成这些工作一般要快得多</p><h1 id="拼接字段">拼接字段</h1><p><code>Vendors</code> 表包含<code>供应商名（vend_name）</code>和<code>地址信息（vend_country）</code>，现在需要做一个报表，在一列中返回这两个信息，并且要把地址用括号括起来</p><p>解决方法是把两个列拼接起来，在 <code>SQL Server</code> 中，应该使用操作符加号（<code>+</code>），在 <code>DB2</code> 、 <code>Oracle</code> 、 <code>PostgreSQL</code> 和 <code>SQLite</code> 中，应该使用两个竖杠（<code>||</code>），而在 <code>MySQL</code> 和 <code>MariaDB</code> 中，必须使用函数<code>Concat()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062121469.jpg" alt=""></p><h1 id="使用别名">使用别名</h1><p>从前面的输出可以看见，<code>SELECT</code>语句可以很好地拼接字段，但是这个新列的名字是什么呢？实际上并没有名字，它只是一个值。所以我们现在需要为它指定<code>别名（alias）</code>，这需要用到 <code>AS</code> 关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Concat(vend_name ,<span class="string">&#x27;(&#x27;</span> , vend_country , <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> vend_title</span><br><span class="line"><span class="keyword">FROM</span> Vendors</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name ;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062126197.jpg" alt=""></p><p>这样，客户端就可以直接引用 <code>vend_title</code> 这个名字，就像一个实际的表列一样</p><details class="toggle" ><summary class="toggle-button" style="">说明：AS 通常可选</summary><div class="toggle-content"><p>在很多 DBMS 中，<code>AS</code> 关键字是可选的，不过最好使用它，这被视为一条最佳实践</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：别名的其他用途</summary><div class="toggle-content"><p>别名还有其他用途，常见的用途包括在实践的表列名包含不合法的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：别名</summary><div class="toggle-content"><p>别名可以是一个单词，也可以是一个字符串。<mark class="hl-label green">如果是后者，字符串应该扩在引号中</mark> 。当你去别名的时候，<mark class="hl-label red">不应该使用表中实际的列名</mark> ，虽然这样也合法，但是许多 DBMS 实现不支持，可能会产生模糊的错误信息</p></div></details><details class="toggle" ><summary class="toggle-button" style="">说明：导出列</summary><div class="toggle-content"><p>别名有时候也会称为<code>导出列（derived column）</code>，不管怎么叫，它们所代表的是相同的东西</p></div></details><h1 id="执行算术计算">执行算术计算</h1><p>计算字段的另一常见用途是对检索出的数据进行算术计算</p><p>例如， <code>Orders</code> 表包含收到的所有订单，<code>OrderItems</code> 表包含每个订单中的各项物品，下面的语句检索订单号 20008 中的所有物品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , quantity , item_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062225651.jpg" alt=""></p><p>表中包含货物的数量和单价，我们可以利用公式算出总价</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , quantity , item_price , quantity <span class="operator">*</span> item_price <span class="keyword">AS</span> expanded_price</span><br><span class="line"><span class="keyword">FROM</span> OrderItems</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="operator">=</span> <span class="number">20008</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204062229774.jpg" alt=""></p><p>和大多数编程语言一样，<code>SQL</code> 支持加减乘除和括号</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』网球球童必知必会</title>
      <link href="/2022/04/05/%E3%80%8EOthers%E3%80%8F%E7%BD%91%E7%90%83%E7%90%83%E7%AB%A5%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
      <url>/2022/04/05/%E3%80%8EOthers%E3%80%8F%E7%BD%91%E7%90%83%E7%90%83%E7%AB%A5%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="网球计分规则">网球计分规则</h1><p>由小到大，一场网球比赛的记分结构可分为 <code>分（point）</code>、<code>局（game）</code>、<code>盘（set）</code>、<code>场（match）</code></p><h2 id="一局中的计分">一局中的计分</h2><p>根据当前局的比分的不同，可分为 <code>常规局</code> 和 <code>平局决胜局</code></p><h3 id="常规局">常规局</h3><p>在一个常规局中，计分规则如下：</p><ul><li>无得分：<code>0</code></li><li>第一分：<code>15</code></li><li>第二分：<code>30</code></li><li>第三分：<code>40</code></li><li>第四分：本局结束</li></ul><p>但是若目前双方比分为<code>40:40</code>，则需要一方净胜对手两分后才算赢得这一局</p><h3 id="平局决胜局">平局决胜局</h3><p>在平分决胜局中，使用 0、1、2、3 分等来计分，首先赢得7分并净胜对手两分的一方赢得这一局</p><p>注意：</p><ul><li>如果是无占先制则不需要净胜两分</li><li>如果是双打，则改为抢十</li></ul><h2 id="一盘中的计分">一盘中的计分</h2><p>先赢得6局并净胜对手两局的一方赢得这一盘</p><p>若当前局的比分达到 <code>6:6</code>，则进入平分决胜局，俗称：<code>抢七</code></p><h2 id="一场中的计分">一场中的计分</h2><p>本次亚运会中，采用三盘两胜制</p><h1 id="换发球及换边问题（重要）">换发球及换边问题（重要）</h1><h2 id="换发球">换发球</h2><ul><li>每一局结束都换发球</li><li>决胜局中，轮到的那一方先发球，然后 2、3 球对面发，4、5 球再换（单数分结束后换发）</li></ul><h2 id="换边（同时运动员休息）">换边（同时运动员休息）</h2><ul><li><p>单数局结束后交换场地</p></li><li><p>决胜局中，每 6 分交换场地</p></li></ul><p>同时换发和换边时，球还是传向原来一侧 ，故常规局中，12 一边，34 一边， 56 一边…，在决胜局中</p><p>1，3，5，6，7，9，11，12，13，15，17，18，19，21…局结束后传球至另一边</p><h1 id="其他细节">其他细节</h1><p>待补充</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（六）使用通配符进行过滤</title>
      <link href="/2022/04/05/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/"/>
      <url>/2022/04/05/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E4%BD%BF%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这一节将记录如何使用 <code>LIKE</code> 操作符进行通配搜索，以便对数据进行复杂过滤</p><h1 id="LIKE-操作符"><code>LIKE</code> 操作符</h1><p>前面的大小比较，或者检查某个范围的值都是对于数字来说的</p><p>而使用 <code>LIKE</code> 加上 <code>通配符（wildcard）</code>可实现对于字符串的过滤</p><h2 id="百分号（-）通配符">百分号（<code>%</code>）通配符</h2><p>最常使用的通配符是百分号（<code>%</code>） ，<mark class="hl-label green">%表示任何字符出现任意次数</mark> </p><p>例如，下面找出所有以单词<code>Fish</code>起头的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;Fish%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051038672.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：区分大小写</summary><div class="toggle-content"><p><mark class="hl-label green">根据DBMS的不同及其配置，搜索是可以区分大小写的</mark> ，经过测试，在我这里它是不区分的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051040919.jpg" alt=""></p></div></details><p>通配符可以在搜索模式的任意位置使用任意次数，例如下面使用两个通配符，它们位于模式的两端</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;%bean bag%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051046132.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">说明：请注意后面所跟的空格</summary><div class="toggle-content"><p><mark class="hl-label red">有些DBMS会使用空格来填补字段的内容</mark> ，例如某列有 50 个字符，而存储的文本为 <code>Fish bean bag toy</code> （17个字符），则为填满该列需要在文本后附加 33 个空格。这样一来试图使用<code>'F%y'</code>就无法检索出该文本（虽然在我的 MySQL 中并不会这样）。诚然，你可以使用<code>'F%y%'</code>，但是更好的方法是<mark class="hl-label green">使用函数去除空格</mark> ，这种方法在后面会讲</p></div></details><h2 id="下划线（-）通配符">下划线（<code>_</code>）通配符</h2><p>另一个常用的的就是下划线（<code>_</code>），<mark class="hl-label green">它只匹配单个字符</mark> </p><details class="toggle" ><summary class="toggle-button" style="">说明：DB2 通配符</summary><div class="toggle-content"><p><code>DB2</code> 不支持通配符 <code>_</code></p></div></details><p>举一个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id , prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_name <span class="keyword">LIKE</span> <span class="string">&#x27;__ inch teddy bear&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204051102145.jpg" alt=""></p><p>因为规定了是两个字符，所以 <code>8 inch teddy bear</code> 并没有被匹配，你可以替换成<code>%</code>来对比一下不同的效果</p><h2 id="方括号（-）通配符">方括号（<code>[]</code>）通配符</h2><p>这东西我感觉是从正则表达式里面拿过来的，作用是<mark class="hl-label green">对一个位置指定一个匹配字符集</mark> </p><details class="toggle" ><summary class="toggle-button" style="">说明：并不总是支持集合</summary><div class="toggle-content"><p>并不是所有的DBMS都支持创建集合<code>[]</code>，微软的 <code>SQL Server</code> 支持这一写法，<mark class="hl-label red">但包括我使用的MySQL在内，Oracle，DB2，SQLite都不支持</mark></p></div></details><p>例如，要找出所有以 J 或 M 开头的联系人，可进行如下查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">&#x27;[JM]%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact ;</span><br></pre></td></tr></table></figure><p>因为我这里不支持这种语法，我就不贴图了</p><p>和正则表达式中的一样，可以使用脱字符（<code>^</code>）来否定，例如可以查找不以 J 或 M 开头的联系人</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_contact</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_contact <span class="keyword">LIKE</span> <span class="string">&#x27;[^JM]%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_contact ;</span><br></pre></td></tr></table></figure><p>当然，也可以使用 <code>NOT</code> 操作符得出类似的效果，<code>^</code>唯一的优点是在使用多个 <code>WHERE</code> 子句时简化语法</p><h1 id="使用通配符的技巧">使用通配符的技巧</h1><p>以下是书中记录的一些技巧</p><ul><li><mark class="hl-label red">不要过度使用通配符</mark> ，如果其他操作符能达到相同的目的，应当使用其他操作符</li><li>在确实需要使用通配符时，也<mark class="hl-label red">尽量不要把它们用在搜索模式的开头</mark> ，这样搜起来是最慢的</li><li>仔细注意通配符的位置，通配符很容易放错位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『公告』“网址收藏”正式页面上线</title>
      <link href="/2022/04/04/%E3%80%8E%E5%85%AC%E5%91%8A%E3%80%8F%E2%80%9C%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F%E2%80%9D%E6%AD%A3%E5%BC%8F%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%BA%BF/"/>
      <url>/2022/04/04/%E3%80%8E%E5%85%AC%E5%91%8A%E3%80%8F%E2%80%9C%E7%BD%91%E5%9D%80%E6%94%B6%E8%97%8F%E2%80%9D%E6%AD%A3%E5%BC%8F%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204041145927.jpg" alt=""></p><blockquote><p>🎉经过整整一天的忙碌，<a href="/bookmarks/">『网址收藏』</a>页面终于上线了🎉</p></blockquote><p>您可以在顶部的导航栏的『更多』中找到该页面</p><p>感觉还是不够好看？但暂时也就这样了吧，还有很多事情要去做呢</p><p><s>其实大部分时间都在折腾安装<a href="https://akilar.top/posts/615e2dec#%E7%BD%91%E7%AB%99%E5%8D%A1%E7%89%87-sites">外挂标签</a></s></p>]]></content>
      
      
      <categories>
          
          <category> 公告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』接收未知个数的数据与EOF</title>
      <link href="/2022/04/03/%E3%80%8EC-C-%E3%80%8F%E6%8E%A5%E6%94%B6%E6%9C%AA%E7%9F%A5%E4%B8%AA%E6%95%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8EEOF/"/>
      <url>/2022/04/03/%E3%80%8EC-C-%E3%80%8F%E6%8E%A5%E6%94%B6%E6%9C%AA%E7%9F%A5%E4%B8%AA%E6%95%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8EEOF/</url>
      
        <content type="html"><![CDATA[<p>大多数时候，要接收的参数的个数都是已知的</p><p>但在有些时候，参数的个数是未知的，这时就需要通过判断<code>scanf()</code>的返回值是否为<code>EOF</code>来解决</p><p><code>scanf()</code>会在读到文档末尾时返回<code>EOF（End Of File）</code>，而在命令行中，则需要按下 <kbd>Ctrl</kbd> + <kbd>Z</kbd> 再按下<kbd>Enter</kbd> 来输入这一字符</p><p>因此在C中，我们可以使用下面的这一结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++count]) != EOF);</span><br></pre></td></tr></table></figure><p>执行完成后，输入的数字会保存在<code>a[]</code>中，而<code>count</code>的值就是个数</p><p>在C++中，借助<code>cin</code>还可以写得更简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (cin &gt;&gt; a[++count]);</span><br></pre></td></tr></table></figure><p>由于本人习惯将数组的0号位置用于保存数组内元素的个数，所以也经常会写成这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[++a[<span class="number">0</span>]]) != EOF);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（五）高级数据过滤</title>
      <link href="/2022/04/02/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4/"/>
      <url>/2022/04/02/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>这一节将记录如何用 <code>AND</code> 和 <code>OR</code> 操作符组合成 <code>WHERE</code> 子句，如何明确地管理求值顺序，如何使用 <code>IN</code> 和 <code>NOT</code> 操作符</p><h1 id="组合-WHERE-子句">组合 <code>WHERE</code> 子句</h1><p>在上一节中介绍的所有 WHERE 子句在过滤时使用的都是单一条件，为了进行更强的过滤控制，可以使用 <code>AND</code> 和 <code>OR</code> 组合多个条件</p><h2 id="AND-操作符"><code>AND</code> 操作符</h2><p>使用 <code>AND</code> 操作符附加条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price ,prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span><span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">AND</span> prod_price <span class="operator">&lt;=</span><span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031045060.jpg" alt=""></p><p>这个例子只包含一个 <code>AND</code> 子句，可以增加多个</p><h2 id="OR-操作符"><code>OR</code> 操作符</h2><p><s>这个肯定一眼就能看懂吧</s></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031128432.jpg" alt=""></p><h2 id="求值顺序">求值顺序</h2><p>对比 <code>AND</code> 和 <code>OR</code> 两个操作符，<code>AND</code> 的优先级更高</p><p>但是在实际使用时，<mark class="hl-label green">墙裂建议使用小括号标记优先级</mark> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> prod_price <span class="operator">&gt;=</span> <span class="number">10</span>; </span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031132628.jpg" alt=""></p><h1 id="IN-操作符"><code>IN</code> 操作符</h1><p><code>IN</code> 操作符用来指定条件范围，范围中的每个条件都可以进行匹配</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="keyword">IN</span> (<span class="string">&#x27;DLL01&#x27;</span>,<span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031136258.jpg" alt=""></p><p>你大概已经发现了，<code>IN</code>和<code>OR</code>在一些情况下有相同的功能，上面的例子也可以这样写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name , prod_price  </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> (vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span> <span class="keyword">OR</span> vend_id <span class="operator">=</span> <span class="string">&#x27;BRS01&#x27;</span>)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204031140076.jpg" alt=""></p><p>为什么要使用<code>IN</code>呢？其优点如下：</p><ul><li>在有很多合法选项时，<code>IN</code> 操作符的语法更清楚，更直观</li><li>在与其他 <code>AND</code> 和 <code>OR</code> 操作符组合使用 <code>IN</code> 时，求值顺序更容易管理</li><li><mark class="hl-label green">IN操作符一般比一组OR操作符执行地更快</mark> </li><li><mark class="hl-label green">IN的最大优点是可以包含其他SELECT语句</mark> （将在学到子查询时详细介绍） </li></ul><h1 id="NOT-操作符"><code>NOT</code> 操作符</h1><p><code>NOT</code> 操作符用于否定其后所跟的任何条件</p><p>下面的例子列出了除 <code>DLL01</code> 之外的所有供应商制造的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id <span class="operator">=</span> <span class="string">&#x27;DLL01&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p>当然，在本例中你也可以使用<code>!=</code>，对于这里这种简单的 <code>WHERE</code> 子句，使用 <code>NOT</code> 确实没有什么优势</p><p>但在更复杂的子句中，<code>NOT</code> 是非常有用的，例如在与 <code>IN</code> 联合使用时， <code>NOT</code> 可以非常简单地找出与条件列表不匹配的行</p><p>大多数 <code>DBMS</code> 允许使用 <code>NOT</code> 否定任何条件</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（四）过滤数据</title>
      <link href="/2022/04/01/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/01/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用WHERE子句">使用<code>WHERE</code>子句</h1><p>数据库一般都包含大量的数据，很少需要检索表中的所有行，通常只需要检索一部分</p><p>检索所需的数据需要指定<code>搜索条件（searsh criteria）</code>或称为<code>过滤条件（filter condition）</code></p><p>这时就需要在<code>FROM</code>子句后加上<code>WHERE</code>子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">=</span> <span class="number">3.49</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030917681.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">提示：SQL 过滤与应用过滤</summary><div class="toggle-content"><p>当然你也可以选择在接收到数据后在应用层过滤，但 <mark class="hl-label red">墙裂不建议这样做</mark> ，一来会浪费带宽，而来更加浪费时间</p></div></details><details class="toggle" ><summary class="toggle-button" style="">注意：WHERE 子句的位置</summary><div class="toggle-content"><p>在同时使用 <code>ORDER BY</code> 和 <code>WHERE</code> 子句时，应该让 <code>ORDER BY</code> 位于 <code>WHERE</code> 之后，<mark class="hl-label red">否则将产生错误</mark> （关于 <code>ORDER BY</code> ，<a href="/2022/03/29/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%92%E5%88%97%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/">请看上一篇</a>）</p></div></details><h1 id="WHERE-子句的操作符"><code>WHERE</code> 子句的操作符</h1><p>下表列出了所有操作符</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center"><code>&lt;&gt;</code></td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center"><code>!=</code></td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center"><code>!&lt;</code></td><td style="text-align:center">不小于</td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center"><code>!&gt;</code></td><td style="text-align:center">不大于</td></tr><tr><td style="text-align:center"><code>BETWEEN</code></td><td style="text-align:center">在指定的两个值之间</td></tr><tr><td style="text-align:center"><code>IS NULL</code></td><td style="text-align:center">为<code>NULL</code>值</td></tr></tbody></table><details class="toggle" ><summary class="toggle-button" style="">注意：操作符兼容</summary><div class="toggle-content"><p>表中列出的操作符有些是冗余的（如<code>&lt;&gt;</code>与<code>!=</code>，<code>!&lt;</code>与<code>&gt;=</code>），并非所有的<code>DBMS</code>都支持这些操作符（例如<code>MySQL</code>不支持<code>!&gt;</code>与<code>!&lt;</code>），请参阅你所使用的<code>DBMS</code>的文档</p></div></details><p>下面来看几个例子</p><h2 id="比较单个值">比较单个值</h2><p>列出所有价格小于 10 美元的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="operator">&lt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030938728.jpg" alt=""></p><h2 id="不匹配检查">不匹配检查</h2><p>列出所有供应商不是<code>DLL01</code>的产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id ,prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> vend_id <span class="operator">!=</span> <span class="string">&#x27;DLL01&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030940549.jpg" alt=""></p><h2 id="范围值检查">范围值检查</h2><p>要检查某个范围的值，可以使用<code>BETWEEN</code>操作符</p><p>检索价格在 5 美元和 10 美元之间的所有产品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030943490.jpg" alt=""></p><h2 id="空值检查">空值检查</h2><p>在创建表时，可以指定表中能不能有<code>空值（NULL）</code></p><p><code>NULL</code>不等于 0，空字符串，或是空格，<code>NULL</code>就是<code>NULL</code>，什么数据都没有</p><p><strong>确定值是否为 <code>NULL</code> ，不能简单地检查是否等于 <code>NULL</code> ，而必须使用 <code>IS NULL</code> 子句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name, prod_price </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">WHERE</span> prod_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030950730.jpg" alt=""></p><p>因为表中没有没有这样的行，所以没有返回数据，但是在<code>Customers</code>表中有<code>NULL</code>值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_email <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204030952792.jpg" alt=""></p><p>可见有两位顾客没有留下邮箱地址</p><details class="toggle" ><summary class="toggle-button" style="">注意：NULL 和非匹配</summary><div class="toggle-content"><p>通过过滤选择不包含指定值的所有行时，你可能希望返回含<code>NULL</code>值的行，但因为<code>NULL</code>的特殊性，<mark class="hl-label red">实际上这做不到</mark></p></div></details>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（六）组件之scroll-view滚动视图</title>
      <link href="/2022/03/31/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bscroll-view%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE/"/>
      <url>/2022/03/31/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%85%AD%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8Bscroll-view%E6%BB%9A%E5%8A%A8%E8%A7%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>小程序里很多时候都需要用到滚动视图，例如下面的这个例子里</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310848852.jpg" alt=""></p><p>这就需要用到<code>scroll-view</code>组件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310851159.jpg" alt=""></p><h1 id="scroll-view"><code>&lt;scroll-view&gt;</code></h1><p>首先来做一个横向滚动的样例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrOut&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>444<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox&quot;</span>&gt;</span>555<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scrOut</span>&#123;<span class="attribute">display</span>: flex;<span class="attribute">flex-wrap</span>: nowrap;&#125;</span><br><span class="line"><span class="selector-class">.scrBox</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: gold;<span class="attribute">margin-right</span>: <span class="number">2px</span>; <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span>;&#125;</span><br></pre></td></tr></table></figure><p><code>flex: 0 0 100px</code>表示不放大（<code>0</code>），不缩小（<code>0</code>），原始大小（<code>100px</code>），详情可以参考<a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">这篇</a></p><p>但其实上，目前它还不能滚动，因为还没有给它添加属性</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310904148.jpg" alt=""></p><h2 id="scroll-x">scroll-x</h2><p>这个属性的意义是允许横向滚动，默认为<code>false</code></p><p>将它添加到<code>&lt;scroll-view&gt;</code> 上，可以看见已经能成功滚动了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310906205.jpg" alt=""></p><h2 id="scroll-left">scroll-left</h2><p>设置默认的起始位置</p><p>例如这里每个格子的大小是<code>100px</code>，而将起始位置设置成<code>150px</code>后，应当从第2个格子的一半开始，渲染出来也是这一结果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310912230.jpg" alt=""></p><p>类似的，还有竖向滚动的样例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310917643.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;scroll2&quot;</span> <span class="attr">scroll-y</span> <span class="attr">scroll-top</span>=<span class="string">&quot;150px&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrOut2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>333<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>444<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scrBox2&quot;</span>&gt;</span>555<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll2</span>&#123;<span class="attribute">height</span>: <span class="number">350px</span>;&#125;</span><br><span class="line"><span class="selector-class">.scrBox2</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: pink;<span class="attribute">margin-bottom</span>: <span class="number">1px</span>;&#125;</span><br></pre></td></tr></table></figure><p>还有更多的属性会在学完JS后补充</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云OSS字体引用问题</title>
      <link href="/2022/03/30/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AD%97%E4%BD%93%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/30/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E5%AD%97%E4%BD%93%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>前几天把字体文件上传到阿里云OSS，但是发现不能正常引用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302303504.jpg" alt=""></p><p>今天发现需要设置跨域设置，首先前往控制台，然后来到权限管理页面，进入跨域设置</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302304734.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302304998.jpg" alt=""></p><p>添加跨域规则，允许所有来源</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302305968.jpg" alt=""></p><p>现在，字体文件可以被正常引用了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302305876.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『MySQL』如何清屏</title>
      <link href="/2022/03/30/%E3%80%8EMySQL%E3%80%8F%E5%A6%82%E4%BD%95%E6%B8%85%E5%B1%8F/"/>
      <url>/2022/03/30/%E3%80%8EMySQL%E3%80%8F%E5%A6%82%E4%BD%95%E6%B8%85%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>很多地方多说使用下面的这个命令，但在我这里没有用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear;</span><br></pre></td></tr></table></figure><p>最后发现下面这个命令有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">system</span> clear;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（三）排列检索数据</title>
      <link href="/2022/03/29/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%92%E5%88%97%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/03/29/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%92%E5%88%97%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>这一节将讲述如何使用<code>SELECT</code>的<code>ORDER BY</code>字句，根据需要排序检索出来的数据</p><p>首先，从上次的例子开始</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203300903553.jpg" alt=""></p><p>正如上篇所说，返回的数据没有特定的数据，但其实也不是随机显示的。如果不排序，数据一般将以它在表中出现的顺序显示，这有可能是数据最初添加到表中的顺序。但是如果数据随后进行过更新或删除，那么这个顺序会受到<code>DBMS</code>重用回收存储空间的方式的影响</p><p>而关系数据库设计理论认为，<mark class="hl-label red">如果不明确规定排序顺序，则不应该假定检索出的数据的顺序有任何意义</mark> </p><h1 id="排序数据">排序数据</h1><p>使用<code>ORDER BY</code>以排序数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203300913480.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">警告：ORDER BY 子句的位置</summary><div class="toggle-content"><p>请保证<code>ORDER BY</code>子句位于<code>SELECT</code>语句的最后一句，<mark class="hl-label red">否则将会出错</mark></p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：使用其他列进行排序</summary><div class="toggle-content"><p>通常，<code>ORDER BY</code>子句中使用的列将是为显示而选择的列。但是，实际上并不一定要这样，<mark class="hl-label green">用非检索的列排序数据是完全合法的</mark></p></div></details><h1 id="按多个列排序">按多个列排序</h1><p>经常需要按不止一个列进行排序，例如要显示雇员的名单，可以希望先按照姓排序，再按照名排序</p><p>要实现这一目的，只需使用逗号分开各个列名</p><p>下面的代码检索3个列，按其中的两个列进行排序 —— 先按价格，再按名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price, prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302119495.jpg" alt=""></p><h1 id="按位置排列">按位置排列</h1><p>除了指定列名之外，提供在语句中的相对列位置也可以指定排序列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2</span>,<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302129472.jpg" alt=""></p><p>可以看出，这里的输出和上面的完全相同</p><ul><li><p><code>ORDER BY 2</code> 表示按第2个检索列（<code>prod_price</code>）排序</p></li><li><p><code>ORDER BY 2,3</code> 表示先按第2个列（<code>prod_price</code>）排序，然后再按第3个列（<code>prod_name</code>）排序</p></li></ul><p>这一技巧的好处在于不需要重新输入列名，但它也有<mark class="hl-label red">缺点</mark> 。首先，不明确给出列名可能根据错误的列排序（特别是更改了<code>SELECT</code>名单时，忘记更改<code>ORDER BY</code>子句），其次，如果需要排序的列不在<code>SELECT</code>名单中，则显然不能使用这一技巧</p><details class="toggle" ><summary class="toggle-button" style="">提示：混合使用两种方法</summary><div class="toggle-content"><p>如果有必要，<mark class="hl-label green">可以选择混合使用实际列名和相对列位置</mark></p></div></details><h1 id="指定排序方向">指定排序方向</h1><p>默认的排序方向是递增（从小到大），当然，你也可以指定为递减，只需加上<code>DESC</code>关键字</p><p>例如下面将最贵的商品排在前面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302155467.jpg" alt=""></p><p>如果打算使用多个列排序，该怎么办？下面的例子以降序排序商品，再加上产品名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_price, prod_name </span><br><span class="line"><span class="keyword">FROM</span> Products </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_price <span class="keyword">DESC</span>, prod_name;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302159519.jpg" alt=""></p><p><code>DESC</code>关键字只应用到单个列上，所以你可以发现价格是单调递减的，而在同一价格中，名称是严格递增的</p><details class="toggle" ><summary class="toggle-button" style="">警告：在多个列上降序排序</summary><div class="toggle-content"><p><mark class="hl-label red">如果你想在多个列上进行降序排序，必须在每一列使用DESC关键字</mark></p></div></details><p>实际上，<code>DESC</code>是<code>DESCENDING</code>的缩写，这两个关键字都可以使用，对应的还有<code>ASC</code>与<code>ASCENDING</code>（递增），不过显然没什么用，毕竟默认就是递增的</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』Debian 10 安装 Docker</title>
      <link href="/2022/03/29/%E3%80%8ELinux%E3%80%8FDebian-10-%E5%AE%89%E8%A3%85-Docker/"/>
      <url>/2022/03/29/%E3%80%8ELinux%E3%80%8FDebian-10-%E5%AE%89%E8%A3%85-Docker/</url>
      
        <content type="html"><![CDATA[<blockquote><p>❤️本文引用自此篇：<a href="https://blog.csdn.net/zhupengfei/article/details/102739901">https://blog.csdn.net/zhupengfei/article/details/102739901</a>，感谢大佬❤️</p></blockquote><p>更新软件源并下载依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common gnupg2</span><br></pre></td></tr></table></figure><p>导入存储库的<code>GPG</code>密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -</span><br></pre></td></tr></table></figure><p>将<code>Docker</code>的存储库添加到系统的软件存储库列表中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><p>重新更新软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>确保您要从<code>Docker repo</code>而不是默认的<code>Debian repo</code>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache policy docker-ce</span><br></pre></td></tr></table></figure><p>（这里会输出一大堆东西）</p><p>下载并安装<code>Docker</code>社区版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install docker-ce</span><br></pre></td></tr></table></figure><p>安装完成后，服务应当是自动启动的，可以测试一下能否运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203302227362.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（七）阿里云 OSS 图床</title>
      <link href="/2022/03/28/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/03/28/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>😭 自<a href="https://blog.csdn.net/qq_35977139/article/details/108218431?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">GitHub图床 + jsDelivr失效</a>，与<code>Gitee</code>图床无法使用以来，就没有好用的免费图床了 😭</p></blockquote><p>我目前使用的是<code>阿里云OSS</code>来托管，需要花钱，但也不是很贵</p><h1 id="准备阿里云OSS">准备阿里云OSS</h1><h2 id="购买资源包">购买资源包</h2><p>在阿里云对象存储-&gt;<a href="https://oss.console.aliyun.com/package">资源包管理页面</a>购买资源包</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281103580.jpg" alt=""></p><p>半年也不到五块钱，还是相对便宜的</p><p>其实之后的访问之类的也需要扣费，但是也要不了多少钱，可以先冲个10块到账户里让它慢慢扣</p><h2 id="创建存储空间">创建存储空间</h2><p>然后前往<a href="https://oss.console.aliyun.com/bucket">Bucket列表</a>创建<code>Bucket</code></p><p><code>Bucket 名称</code>可以随便取，地域选择与你最近的就行，读写权限改为公共读，其他的各种服务都不用开</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281107797.jpg" alt=""></p><h2 id="新建访问密钥">新建访问密钥</h2><p>之后需要解决写入的问题，从右上角头像进入<code>AccessKey</code>管理页面，新建一个<code>Key</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281110842.jpg" alt=""></p><p>记录好ID和密码，复制到记事本里面去</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281111635.jpg" alt=""></p><h1 id="准备-PicGo">准备 PicGo</h1><h2 id="下载安装">下载安装</h2><p>首先前往<a href="https://molunerfinn.com/PicGo/">PicGo官网</a>下载</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231624056.png" alt=""></p><p>它会导到到<code>GitHub</code>上的该项目的<code>releases</code>页面，在最新版打开<code>Assets</code>列表挑选你的系统下载即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231627693.png" alt=""></p><h2 id="配置">配置</h2><p>安装后，来到图床设置阿里云OSS，填入密钥的ID和密码，空间名，和存储区域（可以在概览中看见）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281116654.jpg" alt=""></p><p>下面是我的样例，只需要填前4个</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281120028.jpg" alt=""></p><p>设置为默认图床后，图床准备完毕，每上传一张图片都能自动将链接复制到剪贴板里，直接在<code>typora</code>里粘贴即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281121802.jpg" alt=""></p><p>还有更方便的方法，你可以在 <code>typora</code> 中设置与 <code>PicGo</code> 联动，这样直接在文章中粘贴图片就能自动上传，简直不要太爽</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206222327850.png" alt="image-20220622232702790"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（二）检索数据</title>
      <link href="/2022/03/27/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/03/27/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>这一节将介绍如何使用 <code>SELECT</code> 语句从表中检索一个或多个数据列</p><p>连接<code>MySQL</code>后，首先进入我们的样例数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE test;</span><br></pre></td></tr></table></figure><h1 id="检索单个列">检索单个列</h1><p>使用 <code>SELECT ... FROM ...;</code> 结构来检索单个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281431281.jpg" alt=""></p><p>可以看见，数据内容已经检索成功（<code>prod_name</code>那一列）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281432634.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">说明：未排序数据</summary><div class="toggle-content"><p>如果没有规定排序，那么返回的数据可能没有特定的顺序。可能是按照插入的顺序返回，也可也能不会。只要返回相同数目的行，就是正常的。</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：别漏了分号</summary><div class="toggle-content"><p>多条<code>SQL</code>语句必须以英文分号（<code>;</code>）分隔。多数<code>DBMS</code>不需要在单条<code>SQL</code>语句后加分号，但加上分号也没有坏处，为了养成习惯，应当始终记得加上分号。</p></div></details><details class="toggle" ><summary class="toggle-button" style="">提示：使用空格</summary><div class="toggle-content"><p>在处理<code>SQL</code>语句时，其中的所有空格都会被会忽略，因此下面的 3 种写法是相同的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> prod_name <span class="keyword">FROM</span> Products;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">prod_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">Products;</span><br></pre></td></tr></table></figure><p>多数<code>SQL</code>开发人认为，加<code>SQL</code>语句分成多行更容易阅读和调试</p></div></details><h1 id="检索多个列">检索多个列</h1><p>使用逗号分隔各个列即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_id, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> Products;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281528341.jpg" alt=""></p><h1 id="检索所有列">检索所有列</h1><p>可以通过使用星号（<code>*</code>）做到这点</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281533850.jpg" alt=""></p><h1 id="检索不同的值">检索不同的值</h1><p>直接使用<code>SELECT</code>语句将返回所有的行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281536145.jpg" alt=""></p><p>但如果你需要去重，则可以使用<code>DISTINCT</code>关键字</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281540332.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：不能部分使用 DISTINCT</summary><div class="toggle-content"><p><code>DISTINCT</code>关键字作用于所有的列，而不仅仅是跟在后面的那一列</p></div></details><h1 id="限制结果">限制结果</h1><p><code>SELECT</code> 默认返回所有的行，但如果你只想返回第一行或一定数量的行，该怎么办呢？</p><p>在各种数据库软件中的做法是不同的，这里以<code>MySQL</code>系列举例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281549576.jpg" alt=""></p><p>当然，你还可以使用<code>OFFSET</code>指定从哪儿开始</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> prod_name</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line">LIMIT <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281551349.jpg" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">注意：第 0 行</summary><div class="toggle-content"><p><strong>第一个被检索的行是第0行，而不是第1行</strong></p><p>因此，<code>LIMIT 1 OFFSET 1</code> 会检索第2行，而不是第1行</p></div></details><details class="toggle" ><summary class="toggle-button" style="">技巧：缩写</summary><div class="toggle-content"><p><code>LIMIT y OFFSET x</code>可以缩写成<code>LIMIT x,y</code>（注意是反着的，可以记忆为从第<code>x</code>行返回<code>y</code>列）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203281555269.jpg" alt=""></p></div></details><h1 id="注释">注释</h1><p>大多数数据库都支持下面三种注释：</p><ul><li>两个连字符单行注释（<code>--</code>）</li><li>Linux风格的单行注释（<code>#</code>），但是某些<code>DBMS</code>不支持</li><li>C/C++风格注释的多行注释（<code>/* */</code>）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』BBR与锐速安装脚本</title>
      <link href="/2022/03/26/%E3%80%8ELinux%E3%80%8FBBR%E4%B8%8E%E9%94%90%E9%80%9F%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/03/26/%E3%80%8ELinux%E3%80%8FBBR%E4%B8%8E%E9%94%90%E9%80%9F%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203290804419.jpg" alt=""></p><blockquote><p>❤️这个脚本来源于<a href="https://blog.ylx.me/archives/783.html">Linux一键安装常见/最新内核脚本 锐速/BBRPLUS/BBR2 [1.3.2.104]</a>，感谢原作者❤️</p></blockquote><p>直接下载运行即可</p><hr><blockquote><p>卸载内核版</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O tcp.sh &quot;https://git.io/coolspeeda&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><blockquote><p>不卸载内核版</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O tcpx.sh &quot;https://git.io/JYxKU&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br></pre></td></tr></table></figure><hr><p>注意：安装过程中如果询问是否立即卸载内核，选择否</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『MySQL』directory to /nonexistent 报错</title>
      <link href="/2022/03/25/%E3%80%8EMySQL%E3%80%8Fdirectory-to-nonexistent%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/25/%E3%80%8EMySQL%E3%80%8Fdirectory-to-nonexistent%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自 <a href="https://www.cnblogs.com/cnwcl/p/13805643.html">https://www.cnblogs.com/cnwcl/p/13805643.html</a> ，感谢大佬🙏</p></blockquote><p>这种错误一般是 mysql 服务器异常关机导致的，解决方案如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo service mysql stop</span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo systemctl stop mysql.service</span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line">sudo systemctl start mysql.service</span><br></pre></td></tr></table></figure><p>另外一种解决方法是删除<code>mysql</code>用户并重新添加，可以见<a href="https://blog.csdn.net/weixin_40436144/article/details/112186603">此篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』文件解压缩指南</title>
      <link href="/2022/03/24/%E3%80%8ELinux%E3%80%8F%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%8C%87%E5%8D%97/"/>
      <url>/2022/03/24/%E3%80%8ELinux%E3%80%8F%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先略写，以后有空了再详细学习一下</p></blockquote><h1 id="tar">tar</h1><p>很多地方都能下载到<code>.tar</code>或<code>.tar.gz</code>文件，tar命令本来是用来备份/归档的，没有压缩功能如果后面又跟上了.<code>gz</code>或者其他压缩算法，则说明是被压缩的</p><p><code>tar</code>命令很复杂，详情可以看<a href="https://www.runoob.com/linux/linux-comm-tar.html">菜鸟教程</a>，这里先贴个<code>tldr</code>的解释，涵盖了日常用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tldr tar</span><br><span class="line"></span><br><span class="line">Archiving utility.</span><br><span class="line">Often combined with a compression method, such as gzip or bzip.</span><br><span class="line">- Create an archive from files:</span><br><span class="line">tar cf target.tar file1 file2 file3</span><br><span class="line">- Create a gzipped archive:</span><br><span class="line">tar czf target.tar.gz file1 file2 file3</span><br><span class="line">- Extract an archive <span class="keyword">in</span> a target folder:</span><br><span class="line">tar xf source.tar -C folder</span><br><span class="line">- Extract a gzipped archive <span class="keyword">in</span> the current directory:</span><br><span class="line">tar xzf source.tar.gz</span><br><span class="line">- Extract a bzipped archive <span class="keyword">in</span> the current directory:</span><br><span class="line">tar xjf source.tar.bz2</span><br><span class="line">- Create a compressed archive, using archive suffix to determine the compression program:</span><br><span class="line">tar caf target.tar.xz file1 file2 file3</span><br><span class="line">- List the contents of a tar file:</span><br><span class="line">tar tvf source.tar</span><br><span class="line">- Extract files matching a pattern:</span><br><span class="line">tar xf source.tar --wildcards <span class="string">&quot;*.html&quot;</span></span><br></pre></td></tr></table></figure><h1 id="zip">zip</h1><blockquote><p>转载至 <a href="https://www.cnblogs.com/pandabang/p/10983350.html">https://www.cnblogs.com/pandabang/p/10983350.html</a>，以后再慢慢整理</p></blockquote><table><thead><tr><th><strong>功能</strong></th><th><strong>命令行输入的命令</strong></th></tr></thead><tbody><tr><td>压缩单个文件</td><td>zip package.zip file</td></tr><tr><td>压缩多个文件</td><td>zip package.zip file1 file2</td></tr><tr><td>压缩单个文件夹</td><td>zip <em><strong>-r</strong></em> package.zip folder</td></tr><tr><td>压缩多个文件夹</td><td>zip <em><strong>-r</strong></em> package.zip folder1 folder2</td></tr><tr><td>压缩文件、文件夹</td><td>zip <em><strong>-r</strong></em> package.zip file1 folder1 file2</td></tr><tr><td>压缩时加密码</td><td>zip <em><strong>-e</strong></em> package.zip file</td></tr><tr><td>解压缩</td><td>unzip package.zip</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Others』ZTZ-96系列及ZTZ-99系列型号辨别</title>
      <link href="/2022/03/23/%E3%80%8EOther%E3%80%8FZTZ-96%E7%B3%BB%E5%88%97%E5%8F%8AZTZ-99%E7%B3%BB%E5%88%97%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/"/>
      <url>/2022/03/23/%E3%80%8EOther%E3%80%8FZTZ-96%E7%B3%BB%E5%88%97%E5%8F%8AZTZ-99%E7%B3%BB%E5%88%97%E5%9E%8B%E5%8F%B7%E8%BE%A8%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>❤️本期内容整理自B站视频<a href="https://www.bilibili.com/video/BV1Xq4y117zS?spm_id_from=333.851.header_right.history_list.click">【军盲入门】怎么区分99式和96式坦克</a></p></blockquote><blockquote><p>还没配图，等有空的时候配个图</p></blockquote><p>ZTZ-99家族：99，99一期改，99二期改，99A</p><p>ZTZ-96家族：96，96A，96B</p><h1 id="基本型">基本型</h1><p>99，96两个基本型：首上都没有爆反，99首上有V型挡浪板，96没有</p><h1 id="区分两大家族">区分两大家族</h1><p>99家族炮塔每侧都有5个烟雾发射筒，而96为6个</p><p>99家族爆反左部有一条折线，而96没有</p><p>99家族有激光压制装置</p><p>99，96家族负重轮样式不同</p><h1 id="99家族内部区分">99家族内部区分</h1><p>99一二期改车体有圆滑的弧度</p><p>99A则是一个屁股很高的梯形（有了北约翘臀，向后没俯角<s>虽然中系本来基本就没俯角</s>）</p><p>99A的激光压制装置变小了</p><p>99A的车灯像是镶嵌在车头的前端，而一、二期改像是放在上端（更靠后了，在履带板上方）</p><p>一期改头顶大鼓包（安东星人都清楚），二期改没有</p><p>一期改首上很平滑，二期改和99A有一道突出的小台阶</p><h1 id="96家族内部区分">96家族内部区分</h1><p>96A的车灯罩是圆形小铁网，96B的是方形盒子</p><p>96A的车身右侧有两个排气孔，96B没有（96B换了发动机）</p><p>96B的屁股比96A多了百叶窗</p><p>96A的第三、第四负重轮距离很近，96B的距离较远</p><blockquote><p>最后这里以后打算做一个思维导图</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『WSL』解决每次启动后自动分配 IP 的问题</title>
      <link href="/2022/03/21/%E3%80%8EWSL%E3%80%8F%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D-IP-%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/21/%E3%80%8EWSL%E3%80%8F%E8%A7%A3%E5%86%B3%E6%AF%8F%E6%AC%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D-IP-%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>众所周知，<code>WSL</code>每次运行的时候都会被虚拟网卡自动分配新的<code>IP</code></p><p>这很麻烦，因为每次连接都需要查它的<code>IP</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231453970.jpg" alt=""></p><p>根据<a href="https://docs.microsoft.com/en-us/windows/wsl/networking">官方说法</a>，如果你的<code>Windows</code>版本在<code>18945</code>之后，就支持通过<code>localhost</code>访问<code>WSL</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231457861.jpg" alt=""></p><p>但是不知道为什么我一个<code>Windows11</code>不支持这个功能，所以还得想办法</p><p>解决方法我能想到的有三种：</p><ul><li>设定固定 <code>IP</code></li><li>每次启动后重设 <code>IP</code></li><li>在 <code>Windows</code> 中自动修改<code>host</code>文件，使其指向<code>WSL</code></li></ul><p>前两种尝试后宣告失败，最后一个经大佬指点使用了一个<code>Github</code>项目成功实现</p><p>项目地址：<a href="https://github.com/shayne/go-wsl2-host">https://github.com/shayne/go-wsl2-host</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231500315.jpg" alt=""></p><p>它的总体过程是创建一个服务，以一个管理员账户的名义每次自动修改<code>host</code>文件</p><p>下载得到一个<code>wsl2host.exe</code>，使用下面的语句安装（需要管理员权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl2host.exe install</span><br></pre></td></tr></table></figure><p>之后会提示你给它一个管理员账户，输入账号密码即可</p><blockquote><p>注意：如果你使用的是微软账户，那么会遇到麻烦，需要通过下面的方法解决（<a href="https://github.com/shayne/go-wsl2-host/issues/62">来源</a>）</p></blockquote><details class="toggle" ><summary class="toggle-button" style="">点击以打开</summary><div class="toggle-content"><p>首先随便给它一个账号，然后打开<code>服务</code>页面（<code>services.msc</code>），找到<code>WSL2 Host</code>并打开</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231513050.jpg" alt=""></p><p>使用浏览手动指定账户</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231514988.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231524479.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231524306.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231524605.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231525469.png" alt=""></p><p>注意是<code>密码</code>，不是<code>PIN码</code></p></div></details><p>然后检查是否在运行，像下面的就是已经在运行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl2host.exe start</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231507093.jpg" alt=""></p><p>之后检查<code>host</code>文件（<code>C:\Windows\System32\drivers\etc\hosts</code>），看看是不是已经成功更改</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203231530898.png" alt=""></p><p>现在我这之后通过<code>ubuntu2004.wsl</code>就可以访问了，方便地很</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（五）组件之超链接</title>
      <link href="/2022/03/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%B6%85%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/03/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%94%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E8%B6%85%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>在文档的导航中找到<code>navigator</code><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203220902157.jpg" alt=""></p><h1 id="navigator"><code>&lt;navigator&gt;</code></h1><p><code>&lt;navagator&gt;</code>比<code>HTML</code>中的<code>&lt;a&gt;</code>标签，相应的，它的属性也更多，而且它是一个块级元素</p><h2 id="url">url</h2><p>还记得<code>HTML</code>中的<code>&lt;a&gt;</code>标签用的是<code>href</code>，但是在<code>WXML</code>中用的是<code>url</code>属性，尝试以下样例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">url</span>=<span class="string">&quot;/pages/logs/logs&quot;</span>&gt;</span>跳转到log页面<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意是<code>/pages/logs/logs</code>，不是<code>/pages/logs/logs.wxml</code></p><p>因为是块级元素，所以可以修改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.link</span>&#123;<span class="attribute">height</span>: <span class="number">40px</span>;&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203220916064.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203220916111.jpg" alt=""></p><h2 id="open-type">open-type</h2><p><code>open-type</code>指的是跳转方式，下面是比较常用的几个值</p><h3 id="redirect">redirect</h3><p><strong>关闭当前页面</strong>，跳转到应用内的某个页面。但是不允许跳转到 <code>tabbar</code> 页面</p><p>点击后原来的页面被销毁，无法返回，只能从左上角返回主页面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203310815987.jpg" alt=""></p><h3 id="switchTab">switchTab</h3><p>跳转到 <code>tabBar</code> 页面，并关闭其他所有非 <code>tabBar</code> 页面，<strong>并且不能携带参数</strong>（<code>tabBar</code> 页面指的是底下有一排按钮的导航页，后面会讲）</p><h3 id="reLaunch">reLaunch</h3><p>关闭所有页面，打开到应用内的某个页面（比较常用）</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（四）组件之图像媒体</title>
      <link href="/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%AA%92%E4%BD%93/"/>
      <url>/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9B%BE%E5%83%8F%E5%AA%92%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>来看媒体组件中的<code>image</code>标签</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201148535.jpg" alt=""></p><p>众所周知<code>HTML</code>中要插入图片用的是<code>img</code>，但是在<code>WXML</code>中要记住是用<code>image</code></p><h1 id="image"><code>&lt;image&gt;</code></h1><h2 id="图片路径">图片路径</h2><p>随便找几张图作样例，使用<code>src</code>属性指示图片路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203132244835.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231717952.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201159752.jpg" alt=""></p><p><code>image</code>其实不需要写一对，但是结尾的<code>/</code>不能省</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203132244835.jpg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缩放-裁剪图像">缩放/裁剪图像</h2><p>可以看见全局样式已经给图像规定了默认的长和宽，我们先覆盖这一样式</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201206887.jpg" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image&#123;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201209608.jpg" alt=""></p><p>但是图像必定是会变形的，如果想要图像完全显示，则要用<code>mode</code>属性来更改缩放模式</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201210583.jpg" alt=""></p><p>可以看见默认使用的是<code>scaleToFill</code>，这个值是不保持比例的</p><p>若使用<code>aspectFit</code>，则会将长边完全显示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201214286.jpg" alt=""></p><p>但是可以看到上下会有空白</p><p>若使用<code>aspectFill</code>，则只会把短边完全显示，超出部分会被截取</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201217164.jpg" alt=""></p><p>最常用的还是<code>widthFix</code>，宽度不变，高度自动适配</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201218847.jpg" alt=""></p><p>另外的就是裁剪模式，这个模式不会缩放图像，只会显示部分区域，一般不常用</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201221357.jpg" alt=""></p><h2 id="长按识别">长按识别</h2><p>一般的图片是不能长按识别的，而加上 <code>show-menu-by-longpress</code>属性则可以长按识别，效果如图所示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203201223983.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（三）组件之基础内容</title>
      <link href="/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
      <url>/2022/03/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>我们做小程序页面的时候，最基本的元素不过文字、图像、视频、超链接，我们将从简单向复杂的讲</p><hr><h1 id="view"><code>&lt;view&gt;</code></h1><p>这个标签可以当作是<code>HTML</code>中的<code>div</code>，它是一个块标签</p><p>从上篇的进度继续</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上篇说到WXML源于HTML，但是WXML的独特之处其实在于标签内部封装了很多的属性和方法，例如我们来看<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">view的官方文档</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192057781.jpg" alt=""></p><p>例如我们来试一下这个<code>hover-class</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开样式表，添加一行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.boxHover</span>&#123;<span class="attribute">background</span>: green;&#125;</span><br></pre></td></tr></table></figure><p>保存后发现，我们在按下去的时候，颜色变成了绿色，过了一会儿，又变回了红色</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192124615.jpg" alt=""></p><h2 id="按压时间">按压时间</h2><p>现在根据文档添加一个<code>hover-start-time</code>属性，并设置成<code>500ms</code>，这样的效果就是按下去半秒才会变色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span> <span class="attr">hover-start-time</span>=<span class="string">&quot;500&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的，也有一个<code>hover-stay-time</code>属性，表示的是过多久恢复</p><h2 id="关联父元素">关联父元素</h2><p>但修改这两个属性的默认值不是很重要（默认一般就是最好的），重要的是剩下的<code>hover-stop-propagation</code>属性，这是设定与父元素的关联的</p><p>例如，再嵌套一个<code>view</code>，并为它添加点击的样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span>&gt;</span></span><br><span class="line">  test1</span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;itemHover&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;<span class="attribute">width</span>: <span class="number">50px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background</span>: gold&#125;</span><br><span class="line"><span class="selector-class">.itemHover</span>&#123;<span class="attribute">background</span>:hotpink;&#125;</span><br></pre></td></tr></table></figure><p>这时点击大块，大块变色小块不变，而点击小块，大小块都会变色</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192144089.jpg" alt=""></p><p>这是因为<code>view</code>标签的<code>hover-stop-propagation</code>属性默认为<code>false</code>，也就是按压会传到到祖先节点，如果我们将其设置为<code>true</code>，则会阻断这一过程（或者只加上<code>hover-stop-propagation</code>而不赋值，也是可以的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192146701.jpg" alt=""></p><hr><h1 id="text"><code>&lt;text&gt;</code></h1><p>在<code>HTML</code>中有行标签和块标签，在<code>WXML</code>中块标签有<code>view</code>，而行标签是<code>text</code></p><p><code>text</code>在『基础内容』分类中</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192155761.jpg" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是一句话。<span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="tag">&lt;<span class="name">text</span>&gt;</span>我是另外一句话。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192207710.jpg" alt=""></p><h2 id="选中文本">选中文本</h2><p>第一个属性是<code>user-select</code>，众所周知一般的页面里是不能选中文字的，加上这个属性就可以选中</p><p>例如添加上一段文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">user-select</span>&gt;</span>马克思主义，英文是Marxism，是马克思主义理论体系的简称，是关于全世界无产阶级和全人类彻底解放的学说。它由马克思主义哲学、马克思主义政治经济学和科学社会主义三大部分组成，是马克思、恩格斯在批判地继承和吸收人类关于自然科学、思维科学、社会科学优秀成果的基础上于19世纪40年代创立的，并在实践中不断地丰富、发展和完善的无产阶级思想的科学体系。<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后打开预览，在手机上预览效果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192232753.jpg" alt=""></p><p>发现是可以选中的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192233083.png" alt=""></p><h2 id="显示连续空格">显示连续空格</h2><p>在很多地方，连续的空格只会显示一个，<code>space</code>属性就是为了控制这个的，它有三个合法值，一般直接用<code>ensp</code></p><table><thead><tr><th style="text-align:left">合法值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>ensp</code></td><td style="text-align:left">中文字符空格一半大小</td></tr><tr><td style="text-align:left"><code>emsp</code></td><td style="text-align:left">中文字符空格大小</td></tr><tr><td style="text-align:left"><code>nbsp</code></td><td style="text-align:left">根据字体设置的空格大小</td></tr></tbody></table><p>还是以那段文本举例</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192240142.jpg" alt=""></p><p>在加上这个属性后，就可以显示连续空格了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192241062.jpg" alt=""></p><h2 id="解码">解码</h2><p>decode属性用于转义解码，例如<code>&amp;nbsp; &amp;lt; &amp;gt; &amp;amp; &amp;apos; &amp;ensp; &amp;emsp;</code></p><p>这里就不演示了</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（二）目录结构介绍与新建页面</title>
      <link href="/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节内容源于<a href="https://www.bilibili.com/video/BV1WQ4y1T7D8?p=3">P3</a></p></blockquote><h1 id="目录结构介绍">目录结构介绍</h1><h2 id="小程序文件和传统-WEB-对比">小程序文件和传统 WEB 对比</h2><p>在小程序中，除了用于保存配置的<code>json</code>文件之外，其他大部分文件都源于传统的三板斧：<code>HTML</code>、<code>CSS</code>和<code>JS</code></p><p>但是为了区分，在小程序中<code>HTML</code>要称为<code>WXML</code>，<code>CSS</code>要称为<code>WXSS</code>，<code>JS</code>保持不变</p><table><thead><tr><th>传统 WEB</th><th>微信小程序</th></tr></thead><tbody><tr><td><code>HTML</code></td><td><code>WXML</code></td></tr><tr><td><code>CSS</code></td><td><code>WXSS</code></td></tr><tr><td><code>JS</code></td><td><code>JS</code></td></tr></tbody></table><h2 id="小程序项目结构">小程序项目结构</h2><p>一个新建的项目结构如下，具体用途在已注释中标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">miniprogram-1</span><br><span class="line">    │  app.js // 入口文件</span><br><span class="line">    │  app.json // 全局配置</span><br><span class="line">    │  app.wxss // 全局样式表</span><br><span class="line">    │  project.config.json // 项目配置（不重要）</span><br><span class="line">    │  sitemap.json // 微信索引（不重要）</span><br><span class="line">    │</span><br><span class="line">    ├─pages // 页面文件夹，一个文件夹对应一个页面</span><br><span class="line">    │  ├─index //首页</span><br><span class="line">    │  │      index.js   // 首页JS</span><br><span class="line">    │  │      index.json // 页面配置</span><br><span class="line">    │  │      index.wxml // 首页HTML</span><br><span class="line">    │  │      index.wxss // 首页CSS</span><br><span class="line">    │  │</span><br><span class="line">    │  └─logs // 这个是日志页面</span><br><span class="line">    │          logs.js</span><br><span class="line">    │          logs.json</span><br><span class="line">    │          logs.wxml</span><br><span class="line">    │          logs.wxss</span><br><span class="line">    │</span><br><span class="line">    └─utils // 公用文件夹，可以在里面放一些全局的函数方法之类的，非必须</span><br><span class="line">            util.js</span><br></pre></td></tr></table></figure><h1 id="新建页面-2">新建页面</h1><p>打开<code>/app.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;light&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weixin&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span><span class="string">&quot;black&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sitemapLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sitemap.json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在<code>&quot;pages&quot;</code>中定义了所有页面，最上面的是首页，可以更改页面顺序来更改首页</p><p>若要新建页面，只需在其中添加路径，然后保存即可，目录会自动创建</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182136002.jpg" alt=""></p><h1 id="小程序使用的语言：以WXML与WXSS为例">小程序使用的语言：以<code>WXML</code>与<code>WXSS</code>为例</h1><p>打开<code>\pages\index</code>中的<code>index.wxml</code>与<code>index.wxss</code>，先将其中的内容全部删掉</p><p>在<code>index.wxml</code>中键入以下内容，并保存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192108533.jpg" alt=""></p><p>可以看见，左侧已经渲染出来了</p><p><code>&lt;/view&gt;</code>又是什么？这不是<code>HTML</code>中的标签，这是因为<code>WXML</code>有一套自己独立的标签系统，具体内容在<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html">官方文档</a>有</p><p>这个标签类似于<code>HTML</code>中的<code>div</code></p><p>再打开<code>index.wxss</code>，我们再其中对其修改样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; <span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background</span>: red;&#125;</span><br></pre></td></tr></table></figure><p>这简直与CSS中的语法一样，对不对？可以看见左侧已经渲染出来了结果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203192113894.jpg" alt=""></p><blockquote><p>总结：微信小程序用的并不是传统的WEB三板斧，而是保留了框架，而里面的标签之类的内容都是独立的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（一）准备开发环境</title>
      <link href="/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本节内容源于<a href="https://www.bilibili.com/video/BV1WQ4y1T7D8?p=3">P1与P2</a></p></blockquote><p>开发微信小程序用的不是<code>VSCode</code>之类的主流<code>IDE</code>，而是微信自家的『微信开发者工具』</p><p>前往<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">官网下载</a>并安装</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182019875.jpg" alt=""></p><p>新建的时候选择<code>测试号</code>，并且<code>不使用云开发</code></p><p>刚新建的项目如图所示</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182018681.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发基础（〇）前言</title>
      <link href="/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/03/18/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203182005110.jpg" alt=""></p><blockquote><p>❤️新的领域，新的方向！</p></blockquote><p>由于竞赛的需要，本人需要学习微信小程序的开发~~（被迫营业了属于是~~</p><p>小程序嘛…自然基本上都是前端的内容，而我对于前端仅有的认知就是高中时学的那些三板斧，基本全忘光了</p><p>但是， <strong>人之所以能，是因为相信能</strong> ，我只能说尽力地去学吧！</p><p>这个系列基本上会是B站上<a href="https://www.bilibili.com/video/BV1WQ4y1T7D8">2020最新微信小程序开发零基础入门+项目案例【新视觉实训】</a>的笔记内容</p><p>因为平时时间很赶，也不是面向小白的，所以不会写得太详细，基本上就是给我复习看的</p><p>现在开始吧！</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『WSL』如何停止或重启 WSL</title>
      <link href="/2022/03/17/%E3%80%8EWSL%E3%80%8F%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E6%88%96%E9%87%8D%E5%90%AF-WSL/"/>
      <url>/2022/03/17/%E3%80%8EWSL%E3%80%8F%E5%A6%82%E4%BD%95%E5%81%9C%E6%AD%A2%E6%88%96%E9%87%8D%E5%90%AF-WSL/</url>
      
        <content type="html"><![CDATA[<p>在<code>WAL</code>中，使用平常的关机或重启命令都是没有用的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203162119554.jpg" alt=""></p><p>如果你需要关闭<code>WAL</code>，请在<code>Windows</code>的管理员命令行中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop LxssManager</span><br></pre></td></tr></table></figure><p>或者下面这个，这个还比较好记</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>如果需要重启，则在关闭之后再运行<code>WSL</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（一）准备环境与数据库基础</title>
      <link href="/2022/03/16/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/16/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E5%87%86%E5%A4%87%E7%8E%AF%E5%A2%83%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="准备学习环境">准备学习环境</h1><h2 id="安装-MySQL">安装 MySQL</h2><h3 id="Windows">Windows</h3><p>对于<code>Windows</code>，直接<a href="https://dev.mysql.com/downloads/windows/installer/">官网下载</a>一直下一步即可（下载下面的那个大的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172123405.jpg" alt=""></p><p>安装程序会要求您提供安装类型，这时请选择 <code>Developer Default</code>，其他直接一路默认</p><p>之后，会指导你设置<code>root</code>用户的密码</p><h3 id="Linux">Linux</h3><h4 id="下载安装-2">下载安装</h4><p>对于<code>Linux</code>，直接<code>apt</code>下载安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>然后运行服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure><p>测试是否能进入<code>MySQL</code>命令行，一开始并没有root密码，直接回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203162155606.jpg" alt=""></p><h4 id="初始化-2">初始化</h4><p>可以看见MySQL已经安装成功，接下来输入<code>exit</code>先退回<code>bash</code>，我们需要初始化一下<code>MySQL</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 退出MySQL，返回bash</span></span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure><p>初始化设计 5 个步骤：</p><ol><li><p>安装验证密码插件</p></li><li><p>设置<code>root</code>管理员在数据库中的专有密码</p></li><li><p>随后删除匿名账户，并使用<code>root</code>管理员从远程登录数据库，以确保数据库上运行的业务的安全性</p></li><li><p>删除默认的测试数据库，取消测试数据库的一系列访问权限</p></li><li><p>刷新授权列表，让初始化的设定立即生效</p></li></ol><p>下面是输出的信息，添加了简单的注释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">pi@DESKTOP-LECILAQ:~$ sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Connecting to MySQL using a blank password.</span><br><span class="line"></span><br><span class="line">VALIDATE PASSWORD COMPONENT can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD component? # 要安装验证密码插件吗?</span><br><span class="line"></span><br><span class="line">Press y|Y for Yes, any other key for No: N # 这里我选择N</span><br><span class="line">Please set the password for root here.</span><br><span class="line"></span><br><span class="line">New password: # 输入要为root管理员设置的数据库密码</span><br><span class="line"></span><br><span class="line">Re-enter new password: # 再次输入密码</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y # 删除匿名账户</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : N # 禁止root管理员从远程登录，这里我没有禁止</span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y # 删除test数据库并取消对它的访问权限</span><br><span class="line"> - Dropping test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y # 刷新授权表，让初始化后的设定立即生效</span><br><span class="line">Success.</span><br><span class="line"></span><br><span class="line">All done!</span><br><span class="line">pi@DESKTOP-LECILAQ:~$</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203162220584.jpg" alt=""></p><h4 id="允许远程连接">允许远程连接</h4><p>编辑 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 文件，把<code>bind-address</code>的值改为<code>0.0.0.0</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172236440.jpg" alt=""></p><p>之后再进入MySQL，执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;你的密码&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br></pre></td></tr></table></figure><p>重新启动，现在允许从任何位置通过<code>root</code>用户连接了</p><h2 id="安装-HeidiSQL">安装 HeidiSQL</h2><p>很多教程用的都是<code>Navicat</code>，但是它是付费的，而且太太太贵了，我又不敢用破解版，所以选择了<code>HeidiSQL</code></p><p>前往<a href="https://www.heidisql.com/download.php">官网</a>或点击<a href="https://wwd.lanzouf.com/iE33K01lwbpg">这里</a>下载</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172133221.jpg" alt=""></p><p>使用<code>HeidiSQL</code>连接到你的数据库</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172200015.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172241893.png" alt=""></p><h2 id="加载样例数据">加载样例数据</h2><blockquote><p>这里的样例来自《SQL必知必会》（第五版），点击<a href="https://wwd.lanzouf.com/i0u8V01m21fc">此链接</a>下载</p></blockquote><p>在左侧右键新建一个数据库，用于存储样例数据，我取名为<code>test</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172259588.jpg" alt=""></p><p>然后加载<code>create.sql</code>，再按上面的蓝色箭头运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172313091.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172317406.jpg" alt=""></p><p>回到<code>test</code>库，右键刷新，可以看见已经出现了数据</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172318686.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203172320937.jpg" alt=""></p><p>然后再对<code>populate.sql</code>作相同的操作，完成样例数据导入</p><h1 id="数据库的层次结构">数据库的层次结构</h1><p>由大到小，一共可以分为4层：<code>数据库</code>，<code>表</code>，<code>列</code>与<code>行</code>（或称为字段或记录）</p><h2 id="数据库（datebase）">数据库（datebase）</h2><blockquote><p>定义：保持有组织的数据的容器（通常是一个文件或一组文件）</p></blockquote><p>一台主机中可以包含诺干个数据库，例如下图中共有<code>information_schema</code>，<code>mysql</code>，<code>performance_schema</code>，<code>sys</code>和<code>test</code>5个数据库，其中<code>test</code>是我们在上一篇添加的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203221950211.jpg" alt=""></p><blockquote><p><strong>注意：误用导致混淆</strong></p><p>人们常用数据库这个术语代表他们使用的数据库软件，这是不正确的，也因此产生了许多混淆。确切地说，数据库软件应称为数据库管理系统（<code>DBMS</code>)。数据库是通过<code>DBMS</code>创建和操纵的容器，而具体它究竟是什么，形式如何，各种数据库都不一样</p></blockquote><h2 id="表（table）">表（table）</h2><blockquote><p>定义：某种特定类型数据的结构化清单</p></blockquote><p>如图，<code>test</code>库中包含了<code>Customers</code>，<code>OrderItems</code>，<code>Orders</code>，<code>Products</code>，<code>Vendors</code>5个表</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203242238209.jpg" alt=""></p><h2 id="列（column">列（column)</h2><blockquote><p>定义：表中的一个字段（也就是说<code>字段</code>和<code>列</code>是同一个意思），所有的表都是由一个或多个列组成的</p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203242244036.jpg" alt=""></p><blockquote><p>数据类型：记住，每个列都有对应的数据类型，</p></blockquote><h2 id="行（row）">行（row）</h2><blockquote><p>定义：表中的一个记录（record），也就是说<code>记录</code>和<code>行</code>是同一个意思</p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203242251753.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL 入门笔记（〇）前言</title>
      <link href="/2022/03/15/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/03/15/SQL-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022011524.jpg" alt=""></p><blockquote><p>❤️又开新坑了！！！</p></blockquote><p><code>SQL</code>是<code>Structred Query Language</code>（结构化查询语言）的缩写，是一门专门用来与数据库沟通的语言</p><p>鄙人其实早之前就想入门了，但是买了书一直都没看，居然还是崭新的~~（真的是拖延症晚期患者）~~</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203152222672.png" alt=""></p><blockquote><p>这个系列我打算以这本《SQL必知必会》为骨架，<a href="https://www.runoob.com/sql/sql-tutorial.html">菜鸟教程</a>以及其他网上资料为补充</p></blockquote><p>今天好累，刚把Python系列的集合那一篇写完，正文第一篇留到明天再写吧❤️</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> SQL 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（八）集合（Set）</title>
      <link href="/2022/03/14/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E5%90%88%EF%BC%88Set%EF%BC%89/"/>
      <url>/2022/03/14/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E9%9B%86%E5%90%88%EF%BC%88Set%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识集合">初识集合</h1><p>与数学中的集合一样，Python中<code>集合（set）</code>中每一个元素都是独一无二的，因而集合具有去重功能</p><p>Python中的集合很强大，你可以对集合轻松执行各种运算</p><h1 id="新建集合">新建集合</h1><h2 id="使用大括号">使用大括号<code>&#123;&#125;</code></h2><p>集合和字典有时很容易弄混，因为它们都是用一对花括号定义的</p><p>只不过当内容是键值对时，表示的是字典，内容是诺干单独元素时，表示的是集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">languages = &#123;<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;python&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(languages) <span class="comment"># &#123;&#x27;ruby&#x27;, &#x27;python&#x27;, &#x27;c&#x27;&#125; 这里体现了集合的去重功能</span></span><br></pre></td></tr></table></figure><h2 id="使用set">使用<code>set()</code></h2><p>使用<code>set()</code>函数可以将其他类型转换为集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;12345&quot;</span>) <span class="comment"># 字符串转集合</span></span><br><span class="line">b = <span class="built_in">set</span>([<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]) <span class="comment"># 列表转集合</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># [&#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li>集合不会以特定的顺序储存元素，反复执行上面的代码，输出元素的顺序会不同，当你使用<code>for ... in ...</code> 结构时，提取出来的元素的顺序也是不定的</li><li>当创建空集合时，必须使用<code>set()</code>，因为<code>&#123;&#125;</code>意为创建一个新字典</li></ul></blockquote><hr><h1 id="集合运算">集合运算</h1><p>在进行集合运算时，使用 <strong>集合运算符</strong> 或 <strong>集合的方法</strong> 有时可以达到相同的效果</p><p>如果你从未了解过集合运算，下面这张图可能有所帮助</p><details class="toggle" ><summary class="toggle-button" style="">点击以打开</summary><div class="toggle-content"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203142217039.png" alt=""></p></div></details><h2 id="交集：A-B">交集：<code>A &amp; B</code></h2><p>在 A 与 B 中都有的元素，等同于<code>A.intersection(B)</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a &amp; b)) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.intersection(b)))</span><br><span class="line"><span class="comment"># [&#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><p>另一个与交集有关的方法是<code>A.isdisjoint(B)</code>，如果两个集合没有交集，则返回<code>True</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a.isdisjoint(b)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(a.isdisjoint(&#123;<span class="string">&#x27;0&#x27;</span>&#125;)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="并集：A-B">并集：<code>A | B</code></h2><p>A 与 B 中的全部元素，等同于<code>A.union(B)</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a | b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.union(b)))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="补集：A-B">补集：<code>A - B</code></h2><p>在 A 中有，而不在 B 中有的元素，等同于<code>A.difference(B)</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a - b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.difference(b)))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(b - a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(b.difference(a)))</span><br><span class="line"><span class="comment"># [&#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的补集应为 <strong>广义上的补集</strong> ，包括 <strong>绝对补集</strong>（一般意义的补集）和 <strong>相对补集</strong>（差集）</p></blockquote><h2 id="对称差集：A-B">对称差集：<code>A ^ B</code></h2><p>不同时包含于 A、B 的元素（并集中除去交集），等同于<code>A.symmetric_difference(B)</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a ^ b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a.symmetric_difference(b)))</span><br><span class="line"><span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的四个集合方法可以传入多个参数，表示连续运算，如<code>A.intersection(B,C)</code></p></blockquote><h2 id="子集-真子集：A-B-A-B">子集 / 真子集：<code>A &lt;= B</code> / <code>A &lt; B</code></h2><p>其中，<code>A &lt;= B</code>等同于<code>A.issubset(B)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;123&quot;</span>) &lt; a) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;123&quot;</span>).issubset(a)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="包含-超集：A-B-A-B">包含 / 超集：<code>A &gt;= B</code> / <code>A &gt; B</code></h2><p>其中，<code>A &gt;= B</code>等同于<code>A.issuperset(B)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;1234567890&quot;</span>) &gt; a) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(<span class="string">&quot;1234567890&quot;</span>).issuperset(a)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="元素是否在集合中：in-not-in">元素是否在集合中：<code>in</code> / <code>not in</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><hr><h1 id="集合其他常用方法-函数">集合其他常用方法/函数</h1><h2 id="统计元素个数">统计元素个数</h2><h3 id="len"><code>len()</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a)) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h2 id="添加-2">添加</h2><h3 id="set-add-obj"><code>set.add(obj)</code></h3><p>将单个元素添加至集合中，如果元素已经在集合中，则不进行任何操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.add(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a)) <span class="comment"># [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="set-update-seq-seq2-seq3"><code>set.update(seq[,seq2,seq3,...])</code></h3><p>将<code>seq</code>中的元素添加至集合中，<code>seq</code>可以是是列表，元组，字典等，可以同时传入多个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.update([<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a)) <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="删除-2">删除</h2><h3 id="set-remove-obj"><code>set.remove(obj)</code></h3><p>在集合中移除一个元素，如果找不到该元素就会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.remove(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a))  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line">a.remove(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;d:\Study\Python\test.py&quot;, line 21, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     a.remove(&#x27;3&#x27;)</span></span><br><span class="line"><span class="comment"># KeyError: &#x27;3&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="set-discard-obj"><code>set.discard(obj)</code></h3><p>与前者基本相同，但找不到元素不会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.discard(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a))  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line">a.discard(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(a))  <span class="comment"># [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="set-pop-obj"><code>set.pop(obj)</code></h3><p>随机弹出一个元素，如果集合为空则会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&quot;12345&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.pop())  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h3 id="set-clear"><code>set.clear()</code></h3><p>清空集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure><h2 id="复制">复制</h2><h3 id="set-copy"><code>set.copy()</code></h3><p>返回一个集合的拷贝</p><hr><h1 id="不可变集">不可变集</h1><p>仿照列表与元组的关系，Python中集合对应着不可变集</p><p>除了内部元素不可改变，其他地方与普通集合一模一样</p><p>不可变集使用<code>frozenset()</code>创建</p><p><s>虽然我也不知道这个有什么用</s></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『杂文』在迷茫中前进</title>
      <link href="/2022/03/13/%E3%80%8E%E6%9D%82%E6%96%87%E3%80%8F%E5%9C%A8%E8%BF%B7%E8%8C%AB%E4%B8%AD%E5%89%8D%E8%BF%9B/"/>
      <url>/2022/03/13/%E3%80%8E%E6%9D%82%E6%96%87%E3%80%8F%E5%9C%A8%E8%BF%B7%E8%8C%AB%E4%B8%AD%E5%89%8D%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203132244835.jpg" alt=""></p><blockquote><p>现在时间是晚上22点36分，每日一篇的技术文肯定是写不完了，就写一篇近期的个人感想吧</p></blockquote><h1 id="很烦，很累">很烦，很累</h1><p>这几天我感觉很累，真的</p><p>从周五早上开始放假，再到现在周日晚上，我想了想，我基本就没做什么正事</p><p>玩也没有好好玩，学习也没有好好学习，属于一种不在状态的样子，做什么事情都没有劲</p><p>为什么呢？我不知道，我想找回曾经的状态——有着明确的目标，且精力充沛</p><p>但是不行，即使玩游戏也没法让自己放松</p><p>周五，周六，周日，我基本都在找我感兴趣的游戏，能让我打起精神来，寻找一个目标，然后奋力前进</p><p>但是我发现，好像所有的游戏我都玩腻了</p><p>csgo，WT，缺氧，泰坦陨落2，RA3…我在我的 steam 库里寻找哪怕能让我解闷一点的游戏，但是我找不到——我感觉我都玩腻了，没意思</p><p>周五晚，我连续打了将近8个小时的文明6，玩的是老秦，从酋邦，到商人共和国，到君主制，都法西斯政体，再到后来的联合专家统治…我沉醉其中，但这个档玩到快科技胜利的时候，我又感觉玩腻了，眼睛还贼痛</p><p>然后干什么？我不知道，我知道我给自己定的规则：不管每天有多忙，不管有多少阻碍，每天至少要写一篇博客，记录下今天都学了些什么</p><p>于是，前两天水了一篇python的，一篇gin框架的，但今天，我真的提不起劲了——就是没这个劲</p><p>我知道我在空耗时间，但我就是没劲做任何事，我讨厌虚度光阴，浪费宝贵的时间，我想摆脱这种状态，但是找不出办法</p><h1 id="重复、重复">重复、重复</h1><p>一年中，你是真的过了365天，还是过了一天，然后重复了365次？</p><p>如果是之前，我绝对会说是365天，但是我现在真的感觉是在重复</p><p>每一天，我基本都是相同的轨迹：早上7，8点去买个包子加豆奶，中午去买份9块钱的烤冷面，回宿舍刷会B站，然后睡午觉，下午随便做点事打发时间，晚上再去买个16块的烧鸭饭，或是14.9的汉堡快餐，或是去吃另一家16块的饭</p><p>毕竟现在封校，我也不能随便出去，即使能出去，我也不是很想出去，每月1500的生活费，我需要尽量将每日消费控制在30元以内，毕竟要预留资金以供随机事件支配（比如你愿望单里面的游戏突然打折），出门就意味着要花费额外的时间和金钱，而这两者都不是我想随便花费的</p><p>我平时不怎么出门运动，有时特别想去运动的时候，外面又很冷，又下雨…但是这几天杭州逐渐转暖了，学校规定的长跑也开始了，之后应该会每天去跑步的，当然，那些是明天再要考虑的事了</p><h1 id="前途一片迷茫">前途一片迷茫</h1><p>每日的重复让我乏味，我感觉每天都在学一大堆没用的东西</p><p>我为什么来学了自动化？我学的为什么不是计算机？</p><p>开学前3周算是适应期，课比较少，但明天就是第4周了，开了门叫金工实习的课</p><p>我的妈，我为什么要学这种东西？我学了有个什么用</p><p>还有什么工程经济学，还有创业基础（这个最恶心，最后还要你写什么计划书），还有一堆思政类课程（从第六周开始，每周要上3门：改革开放史，形势与政策，思想道德与法制，要写一堆报告，我也是服了）</p><p>其他剩下的也都是我感觉比较中性的课（没有太大兴趣，但也愿意认真听），比如高数大物还有专业课之类的</p><p>有没有我感兴趣的呢？基本没有</p><p>我翻了翻培养计划，后面也就数据结构与算法，还有计算机视觉这两门听上去还不错</p><p>自动化…其实就是半个软件，半个硬件的交叉学科，而我则对硬件没多大兴趣，让我去学什么数控机床，我也是服了，而写代码有关的课程又少得可怜</p><p>前路？大概是很迷茫的</p><p>我以后要去做什么工作？我不知道</p><p>要去互联网大厂吗？我不知道，我这4年如果好好抓紧时间，多在计算机这方面学习一些，或许是可以的，但是，我不知道</p><p>要去考研吗？我不知道，我买了计算机方面考研的书，但是基本还没看什么，我买来也是想看看计算机方面大概要学些什么东西，至于考研？我上学期高数才60多，还去考研？没这个能力知道吧</p><p>我现在要学些什么？我不知道，没人能告诉你你应该去学什么，我只能说，别人学了什么，你就跟着去学吧</p><p>但是，很多时候，我明显太过于急功近利了</p><p>学了这个有什么用吗？学完了貌似也没法应用到哪里，学了一半，太难了——想放弃</p><p>那去补补算法方面的能力？去刷leetcode？</p><p>我看看社团大佬的博客，DFS，BFS，动态规划…，啊，我记得高中竞赛的时候都学过，但我更加清楚地记得我现在已经全都忘了</p><p>leetcode上第一题，第一种解法，暴力枚举，还行，第二种，哈希表，学过，全忘了，不想看了</p><p>为什么不再去学？太难了，不想去学了，各种数据结构全忘了，C++STL里面一堆好用的东西都忘记怎么用了，这还怎么去刷题</p><p>又没有同行者，一个人，我没有信心去搞定那些东西</p><p>周边的人摆烂的摆烂，谈恋爱的谈恋爱，而我，独自一人</p><p>一打开朋友圈，吃的吃玩的玩，秀恩爱的秀恩爱</p><p>讲到爱情？只有初中时那段天真但很温暖的恋爱让我感觉是在恋爱，而现在……</p><h1 id="在迷茫中前进">在迷茫中前进</h1><p>生活还是要继续</p><p>今天下午，花了100多巨款买了大表哥2，打了几个小时，算是放松了会，R星的品控还是可以的</p><p>写到结尾了，一口气写了这么多东西了，也是舒畅了许多，不会再闷在心里了</p><p>在迷茫中前进，走向未知的彼岸，可喜可贺，至少我还在前进</p><p>对比其他人，我可能还算幸运，我是他们羡慕的对象</p><p>至少我高中参加过竞赛拿了省奖，折腾过Linux，有些底子，上学期数学建模也拿了个校一等，这学期又被预录取为亚运会志愿者，我是他们羡慕的人</p><p>至少我在杭电助手后端部这个大家庭，我能看见所有的项目源码，里面大佬云集，经常讨论着我都看不懂的问题，我以后肯定能学会很多</p><p>至少我还年轻，我还没到19岁，我才大一，不像有些人大学混完4年，一事无成，都不知道自己学了些什么</p><p>我想，如果我能保持住每日一文的习惯，每天不管写些什么，前途定会逐渐明朗</p><p>不写了，明天又是早八，明天又会是新的一天</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（七）字典（Dictionary）</title>
      <link href="/2022/03/12/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%AD%97%E5%85%B8%EF%BC%88Dictionary%EF%BC%89/"/>
      <url>/2022/03/12/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E5%AD%97%E5%85%B8%EF%BC%88Dictionary%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识字典">初识字典</h1><p><code>字典（Dictionary）</code>类似于C++中的<code>Map</code>，内部都是键值对，用于创建一类对象对另一类对象的映射</p><p>但不同的是，字典中的映射类型是不固定的（键与键之间，值与值之间的类型可以不相同）</p><p>值可以取任何数据类型（甚至可以嵌套字典），但键必须是不可变的，如字符串，数字</p><h1 id="创建字典">创建字典</h1><p>使用大括号<code>&#123;&#125;</code>创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">personInfo = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;swimming&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(personInfo) <span class="comment"># &#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 18, &#x27;hobby&#x27;: [&#x27;reading&#x27;, &#x27;running&#x27;, &#x27;swimming&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="技巧：写成多行">技巧：写成多行</h2><p>在某些场景下，写成多行能让内容更加清晰明了，例如这里统计几个人最喜欢的编程语言</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="访问字典">访问字典</h1><h2 id="键-值">键-&gt;值</h2><h3 id="一般写法">一般写法</h3><p>使用中括号<code>[]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">personInfo = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;hobby&#x27;</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;running&#x27;</span>, <span class="string">&#x27;swimming&#x27;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(personInfo[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># Tom</span></span><br><span class="line"><span class="built_in">print</span>(personInfo[<span class="string">&#x27;age&#x27;</span>]) <span class="comment"># 18</span></span><br><span class="line"><span class="built_in">print</span>(personInfo[<span class="string">&#x27;hobby&#x27;</span>]) <span class="comment"># [&#x27;reading&#x27;, &#x27;running&#x27;, &#x27;swimming&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="使用get-方法">使用<code>get()</code>方法</h3><p>上面的写法满足绝大多数情况，但是有时可能会引发问题：<strong>指定的键不存在时会直接报错</strong></p><p>而某些情况是不能完全确定一个键是有没有对应的值的，这时就要用到<code>get()</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">personInfo = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;job&#x27;</span>: <span class="string">&#x27;student&#x27;</span>&#125;</span><br><span class="line">job = personInfo.get(<span class="string">&#x27;job&#x27;</span>, <span class="string">&quot;Tom didn&#x27;t have a job yet!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(job) <span class="comment"># student</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> personInfo[<span class="string">&#x27;job&#x27;</span>]</span><br><span class="line">job = personInfo.get(<span class="string">&#x27;job&#x27;</span>, <span class="string">&quot;Tom didn&#x27;t have a job yet!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(job) <span class="comment"># Tom didn&#x27;t have a job yet!</span></span><br></pre></td></tr></table></figure><p><code>get()</code>的第一个参数是要查询的键，第二个参数是键不存在时返回的默认值</p><h2 id="遍历">遍历</h2><p>这里以上面的 <strong>最喜欢的编程语言</strong> 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历所有键值对">遍历所有键值对</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key , value <span class="keyword">in</span> favoriteLanguages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Key: &#x27;</span>+key+<span class="string">&#x27; Value: &#x27;</span>+value)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Key: jen Value: python</span><br><span class="line">Key: sarch Value: c</span><br><span class="line">Key: edward Value: ruby</span><br><span class="line">Key: phil Value: python</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="遍历所有键">遍历所有键</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favoriteLanguages.keys():</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jen</span><br><span class="line">sarch</span><br><span class="line">edward</span><br><span class="line">phil</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="toggle" ><summary class="toggle-button" style="">技巧：排序</summary><div class="toggle-content"><p>从<code>Python3.7</code>开始，将以插入元素的顺序遍历，但我们也可以重新排序，例如下面的方法</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favoriteLanguages.keys()):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edward</span><br><span class="line">jen</span><br><span class="line">phil</span><br><span class="line">sarch</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></details><h3 id="遍历所有值">遍历所有值</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> favoriteLanguages.values():</span><br><span class="line">    <span class="built_in">print</span>(language)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">c</span><br><span class="line">ruby</span><br><span class="line">python</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><details class="toggle" ><summary class="toggle-button" style="">技巧：剔除重复项</summary><div class="toggle-content"><p>我们可以运用<code>集合（set）</code>的性质来剔除重复项</p><p>集合将在下一篇中讲解</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favoriteLanguages.values()):</span><br><span class="line">    <span class="built_in">print</span>(language)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python</span><br><span class="line">ruby</span><br><span class="line">c</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></details><h1 id="添加键值对">添加键值对</h1><p>直接使用<code>字典名[键]=值</code>即可</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br><span class="line"></span><br><span class="line">favoriteLanguages[<span class="string">&#x27;mike&#x27;</span>] = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;, &#x27;mike&#x27;: &#x27;java&#x27;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="修改键值对">修改键值对</h1><p>同样，直接使用<code>字典名[键]=值</code>即可</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br><span class="line"></span><br><span class="line">favoriteLanguages[<span class="string">&#x27;jen&#x27;</span>] = <span class="string">&#x27;java&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">&#123;&#x27;jen&#x27;: &#x27;java&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="删除键值对">删除键值对</h1><p>使用<code>del 字典名[键]</code></p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">输出</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favoriteLanguages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarch&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> favoriteLanguages[<span class="string">&#x27;jen&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(favoriteLanguages)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;jen&#x27;: &#x27;python&#x27;, &#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br><span class="line">&#123;&#x27;sarch&#x27;: &#x27;c&#x27;, &#x27;edward&#x27;: &#x27;ruby&#x27;, &#x27;phil&#x27;: &#x27;python&#x27;&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（十）Cookie 与 Session</title>
      <link href="/2022/03/11/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89Cookie-%E4%B8%8E-Session/"/>
      <url>/2022/03/11/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89Cookie-%E4%B8%8E-Session/</url>
      
        <content type="html"><![CDATA[<h1 id="初识-Cookie">初识 Cookie</h1><p><code>HTTP</code> 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页 面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何关系的。如果我们要实现多个页面之间共享数据的话我们就可以使用 <code>Cookie</code> 或者 <code>Session</code> 实现</p><p><code>cookie</code> 存储于访问者计算机的浏览器中，可以让我们用同一个浏览器访问同一个域名的时候共享数据</p><p><code>Cookie</code> 能实现的简单功能：</p><ul><li><p>保持用户登录状态</p></li><li><p>保存用户浏览记录</p></li></ul><hr><h1 id="使用-Cookie">使用 Cookie</h1><h2 id="设置-Cookie">设置 Cookie</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.SetCookie(name <span class="type">string</span>, value <span class="type">string</span>, maxAge <span class="type">int</span>, path <span class="type">string</span>, domain <span class="type">string</span>, secure <span class="type">bool</span>, httpOnly <span class="type">bool</span>)</span><br></pre></td></tr></table></figure><ul><li><p><code>maxAge</code>：过期时间</p><ul><li>大于<code>0</code>，设置过期时间，单位为秒</li><li>小于<code>0</code>，删除本<code>Cookie</code></li><li>等于<code>0</code>，设置为当关闭浏览器时过期</li></ul></li><li><p><code>path</code>：<code>Cookie</code>的路径</p></li><li><p><code>domain</code>：作用域，若要在多个二级域名中使用，如<code>a.example.com</code>和<code>b.example.com</code>，则要写成<code>.example.com</code></p></li><li><p><code>secure</code>：为<code>True</code>时，仅在<code>HTTPS</code>中生效</p></li><li><p><code>httpOnly</code>：用于防止客户端脚本通过<code>document.cookie</code>属性访问<code>Cookie</code>，有助于保护<code>Cookie</code>不被跨站脚本攻击窃取或篡改</p></li></ul><h2 id="读取-Cookie">读取 Cookie</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie, err := con.Cookie(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="样例">样例</h1><p><code>defaultRouters.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;test/controllers/homePage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">defaultRouters := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/&quot;</span>, homePage.HomePageController&#123;&#125;.Index)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/news&quot;</span>, homePage.HomePageController&#123;&#125;.News)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/user&quot;</span>, homePage.HomePageController&#123;&#125;.User)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/login&quot;</span>, homePage.HomePageController&#123;&#125;.Login)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/logout&quot;</span>, homePage.HomePageController&#123;&#125;.Logout)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>homePageController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homePage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HomePageController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Login(con *gin.Context) &#123;</span><br><span class="line">con.SetCookie(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;已登录&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Logout(con *gin.Context) &#123;</span><br><span class="line">username, _ := con.Cookie(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.SetCookie(<span class="string">&quot;username&quot;</span>, username, <span class="number">-1</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">username, _ := con.Cookie(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;用户：&quot;</span>+username)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> News(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203111010190.jpg" alt=""></p><hr><h1 id="初识-Session">初识 Session</h1><p><code>Session</code>技术与<code>Cookie</code>类似，最大的不同是<code>Cookie</code>是存储在客户端的，而<code>Session</code>是存储在服务端的</p><p>当客户端浏览器第一次访问服务器并发送请求时，服务器端会创建一个 <code>session</code> 对象，生成 一个类似于 <code>key,value</code> 的键值对，然后将 <code>value</code> 保存到服务器 将 <code>key(cookie)</code>返回到浏览器(客户端)。浏览器下次访问时会携带 <code>key(cookie)</code>，找到对应的 <code>session(value)</code></p><h1 id="安装-session-包">安装 session 包</h1><p>gin是不集成session的，只能用第三方的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/gin-contrib/sessions</span><br></pre></td></tr></table></figure><hr><h1 id="样例-2">样例</h1><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;test/models&quot;</span></span><br><span class="line"><span class="string">&quot;test/routers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.SetFuncMap(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;unixToDate&quot;</span>: models.UnixToDate,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line"></span><br><span class="line">store := cookie.NewStore([]<span class="type">byte</span>(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line"></span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">routers.DefaultRoutersInit(r)</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">routers.AdminRoutersInit(r)</span><br><span class="line"><span class="comment">//api 路由</span></span><br><span class="line">routers.ApiRoutersInit(r)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>homePageController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> homePage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HomePageController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Login(con *gin.Context) &#123;</span><br><span class="line"><span class="comment">// con.SetCookie(&quot;username&quot;, &quot;张三&quot;, 0, &quot;/&quot;, &quot;127.0.0.1&quot;, false, true)</span></span><br><span class="line">session := sessions.Default(con)</span><br><span class="line">session.Options(sessions.Options&#123;</span><br><span class="line">MaxAge: <span class="number">3600</span> * <span class="number">6</span>, <span class="comment">//6h</span></span><br><span class="line">&#125;)</span><br><span class="line">session.Set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>)</span><br><span class="line">session.Save()</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;已登录&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Logout(con *gin.Context) &#123;</span><br><span class="line">session := sessions.Default(con)</span><br><span class="line">session.Clear()</span><br><span class="line">session.Save()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">session := sessions.Default(con)</span><br><span class="line">username := session.Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c HomePageController)</span></span> News(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203121427501.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203121432176.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（九）文件上传</title>
      <link href="/2022/03/10/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/10/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="单文件上传">单文件上传</h1><h2 id="定义模板">定义模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/admin/doUpload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        文  件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>enctype=&quot;multipart/form-data&quot;</code>不能漏</p><h2 id="添加控制器">添加控制器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> DoUpload(con *gin.Context) &#123;</span><br><span class="line">username := con.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">file, err := con.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">con.JSON(http.StatusInternalServerError, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dst := path.Join(<span class="string">&quot;./static/upload&quot;</span>, file.Filename)</span><br><span class="line">fmt.Println(dst)</span><br><span class="line">con.SaveUploadedFile(file, dst)</span><br><span class="line">con.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27;,uploaded!&quot;</span>, file.Filename),</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件的保存文件夹应当提前创建好</p><h2 id="配置路由">配置路由</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adminRouters.POST(<span class="string">&quot;/doUpload&quot;</span>, admin.AdminController&#123;&#125;.DoUpload)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100821313.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100820294.jpg" alt=""></p><hr><h1 id="多文件上传">多文件上传</h1><p>对于多文件，可以拆成多个单文件分别手动处理，也可以按照如下的方式</p><h2 id="模板">模板</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;文件上传&lt;/h2&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/admin/doUpload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        用户名： &lt;input <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;用户名&quot;</span>&gt; &lt;br&gt; &lt;br&gt;</span><br><span class="line">        文  件<span class="number">1</span>：&lt;input <span class="keyword">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file[]&quot;</span>&gt;&lt;br&gt; &lt;br&gt;</span><br><span class="line">        文  件<span class="number">2</span>：&lt;input <span class="keyword">type</span>=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file[]&quot;</span>&gt;&lt;br&gt; &lt;br&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="控制器">控制器</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> DoUpload(con *gin.Context) &#123;</span><br><span class="line">username := con.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line"></span><br><span class="line">form, _ := con.MultipartForm()</span><br><span class="line">files := form.File[<span class="string">&quot;file[]&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">dst := path.Join(<span class="string">&quot;./static/upload&quot;</span>, file.Filename)</span><br><span class="line">con.SaveUploadedFile(file, dst)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">con.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;文件上传成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100840392.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203100840479.jpg" alt=""></p><hr><h1 id="检查后缀并按日期保存">检查后缀并按日期保存</h1><p>在上面的例子中，保存文件时文件名都没有修改，这将带来两个缺点：</p><ul><li>太乱了</li><li>同名文件会被覆盖</li></ul><p>于是，按时间保存就非常有必要，下面将以上传图片为例来演示</p><p>总体思路：</p><ol><li>获取上传的文件</li><li>获取后缀名，判断是否是图片</li><li>创建图片保存目录</li><li>生成文件名称</li><li>保存文件</li></ol><p>首先在<code>tools.go</code>中添加两个全局方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUnix</span><span class="params">()</span></span> <span class="type">int64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time.Now().Unix()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDay</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">template := <span class="string">&quot;20060102&quot;</span></span><br><span class="line"><span class="keyword">return</span> time.Now().Format(template)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>adminController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> DoUpload(con *gin.Context) &#123;</span><br><span class="line">username := con.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1获取上传的文件</span></span><br><span class="line">file, _ := con.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2获取后缀名，判断是否是图片</span></span><br><span class="line">extName := path.Ext(file.Filename)</span><br><span class="line">allowExtMap := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">bool</span>&#123;</span><br><span class="line"><span class="string">&quot;.jpg&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;.png&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;.gif&quot;</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;.jpge&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, ok := allowExtMap[extName]; !ok &#123;</span><br><span class="line">con.String(http.StatusOK, <span class="string">&quot;文件类型不合法&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3创建图片保存目录</span></span><br><span class="line">day := models.GetDay()</span><br><span class="line">dir := <span class="string">&quot;./static/upload/&quot;</span> + day + <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(dir, <span class="number">0666</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4生成文件名称</span></span><br><span class="line">filename := strconv.FormatInt(models.GetUnix(), <span class="number">10</span>) + extName</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5保存文件</span></span><br><span class="line">con.SaveUploadedFile(file, dir+filename)</span><br><span class="line"></span><br><span class="line">con.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>:  <span class="string">&quot;文件上传成功&quot;</span>,</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203102234289.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203102234109.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』main 函数的参数</title>
      <link href="/2022/03/09/%E3%80%8EC-C-%E3%80%8Fmain-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/"/>
      <url>/2022/03/09/%E3%80%8EC-C-%E3%80%8Fmain-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>也许你在某些地方会见到这种写法的<code>main</code>函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>int argc, char *argv[]</code>的含义是接收从命令行调用时附加的参数</p><p>其中，<code>int argc</code>用于统计参数的总个数，<code>char *argv[]</code>则依次保存这些参数</p><p><code>argc</code>的值至少为<code>1</code>，即使你没有附加任何参数，因为<code>arge[0]</code>会保存着当前程序的名称或完整路径</p><p>为什么是或呢？<code>arge[]</code>其实保存的是这一行中的所有参数，如果当前程序是在<code>PATH</code>中的（或当前文件夹，<code>Windows</code>环境下），就可以仅凭名称调用</p><p>下面的程序能依次打印接收的参数，你可以借此学习如何使用这一机制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;argument&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; argv[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;total argument:&quot;</span> &lt;&lt; argc;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203092146916.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（六）元组（Tuple）</title>
      <link href="/2022/03/08/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E5%85%83%E7%BB%84%EF%BC%88Tuple%EF%BC%89/"/>
      <url>/2022/03/08/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E5%85%83%E7%BB%84%EF%BC%88Tuple%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>元组（Tuple）</code>与列表及其相似，只是元组的内容不能更改，可以认为是列表的常量版本</p></blockquote><h1 id="创建元组">创建元组</h1><p>使用小括号<code>()</code>将各个元素括起来即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> )</span><br></pre></td></tr></table></figure><p>实际上，小括号不是必须的，最初的元组定义就是使用逗号分隔元素即可，小括号只是为了美观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tup3 = <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>   <span class="comment">#  不需要括号也可以</span></span><br></pre></td></tr></table></figure><p>所以当元组中只包含一个元素时，<strong>必须</strong> 在元素后面添加逗号，否则括号会被当作运算符使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 不加逗号，类型为整型</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">50</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(tup1)     <span class="comment"># 加上逗号，类型为元组</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>创建只包含一个元素的元组通常没有意义，但自动生成的元组可能只有一个元素</p><p>另外，你还可以通过<code>tuple()</code>将其他结构转换为元组</p><h1 id="修改元组">修改元组</h1><p>虽然元组的内容不能更改，但是可以给元组整体重新赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions) <span class="comment"># (200, 50)</span></span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions) <span class="comment"># (400, 100)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』关键字 inline：内联函数</title>
      <link href="/2022/03/07/%E3%80%8EC-C-%E3%80%8F%E5%85%B3%E9%94%AE%E5%AD%97-inline%EF%BC%9A%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/07/%E3%80%8EC-C-%E3%80%8F%E5%85%B3%E9%94%AE%E5%AD%97-inline%EF%BC%9A%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>之前参加竞赛时，总是会看见一些大佬的函数前面加上个<code>inline</code>，比如下面的快读：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">   <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">   <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问之，则曰：</p><p>“这样会运行快一点”</p><p>但是我一直都没搞懂，为什么说这样运行就会快一点</p><hr><p>今天特地查了一下，这个<code>inline</code>是内联函数的标识符，那内联函数又是什么？</p><blockquote><p>如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方</p></blockquote><p>这样一来，优点就显而易见了：普通函数都是单独保存的，当你调用函数时，要先通过指针跳到函数的位置再运行，而内联函数直接就嵌在调用该函数的地方（类似于宏替换），省去了寻址步骤，自然更快</p><p>也许你可能会问，一个寻址要耗多少时间呢？但其实对于非常简单的函数来说（如两个<code>int</code>求较大值），寻址的时间占比就很大，而这种简单的函数往往又是比较常用的，一来二去，寻址时间就又被放大了</p><p>但缺点也是显而易见的：增加内存消耗，并且内联函数中不能递归调用自己</p><blockquote><p>所以，只有短小简单，调用又十分频繁的函数才适合作为内联函数</p></blockquote><p>使用起来很简单，在函数头前面加上个<code>inline</code>就行，但有一点要注意，<code>inline</code>修饰的函数要当场给出其原型，并且<code>inline</code>在声明的时候是没有用的，只有定义的时候才有用</p><p>这个写法是无效的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个写法是有效的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS：C++ 的类里面的成员函数会被默认为内敛函数</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（五）列表（List）</title>
      <link href="/2022/03/07/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E5%88%97%E8%A1%A8%EF%BC%88List%EF%BC%89/"/>
      <url>/2022/03/07/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89%E5%88%97%E8%A1%A8%EF%BC%88List%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><code>列表（List）</code>是Python中最基本的数据结构，与C中的数组类似</p><h1 id="创建列表">创建列表</h1><p>使用中括号<code>[]</code>将各个元素括起来即可，元素类型可不相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">list3 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>]</span><br><span class="line">list4 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br></pre></td></tr></table></figure><hr><h1 id="访问列表中的值">访问列表中的值</h1><h2 id="索引">索引</h2><p>列表的索引和切片与字符串的一样</p><p>使用<code>列表[下标]</code>来索引单个元素</p><table><thead><tr><th><code>list</code></th><th>‘red’</th><th>‘green’</th><th>‘blue’</th><th>‘yellow’</th><th>‘white’</th></tr></thead><tbody><tr><td>从前往后数</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>从后往前数</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[<span class="number">0</span>] ) <span class="comment"># red</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[<span class="number">1</span>] ) <span class="comment"># green</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[<span class="number">2</span>] ) <span class="comment"># blue</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[-<span class="number">1</span>] ) <span class="comment"># white</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[-<span class="number">2</span>] ) <span class="comment"># yellow</span></span><br><span class="line"><span class="built_in">print</span>( <span class="built_in">list</span>[-<span class="number">3</span>] ) <span class="comment"># blue</span></span><br></pre></td></tr></table></figure><h2 id="切片">切片</h2><p>使用<code>变量[起始位置:终止位置:步长]</code>来截取部分列表</p><p><strong>注意：</strong></p><ul><li>左闭右开规则（顾头不顾尾）</li><li>某个位置不指定的时候默认取最后或最前</li><li>步长可选，默认为<code>1</code></li><li>切片的时候起始位置和终止位置都超出的时候不会进行报错，但是索引会报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>:-<span class="number">2</span>]) <span class="comment"># [&#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment"># [&#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[-<span class="number">1</span>::-<span class="number">1</span>]) <span class="comment"># [&#x27;black&#x27;, &#x27;white&#x27;, &#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;red&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="For-循环遍历">For 循环遍历</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]: </span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 输出 1 2 3</span></span><br></pre></td></tr></table></figure><hr><h1 id="列表操作符">列表操作符</h1><h2 id="组合：">组合：<code>+</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] + [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="重复：">重复：<code>*</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] * <span class="number">2</span>) <span class="comment"># [1, 2, 3, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="元素是否存在于列表中：in-not-in">元素是否存在于列表中：<code>in</code> / <code>not in</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="number">3</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span> (<span class="number">3</span> <span class="keyword">not</span> <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><hr><h1 id="列表常用方法-函数">列表常用方法/函数</h1><h2 id="求长">求长</h2><h3 id="len-list"><code>len(list)</code></h3><p>返回列表的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">list</span>)) <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><h2 id="添加">添加</h2><h3 id="list-append-obj"><code>list.append(obj)</code></h3><p>在末尾添加新元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.append(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;white&#x27;, &#x27;black&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="list-insert-pos-obj"><code>list.insert(pos,obj)</code></h3><p>使用下标在任意位置添加元素，在<code>pos</code>位置及其之后的元素都会往后移一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.insert(<span class="number">4</span>,<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;, &#x27;white&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="list-extend-seq"><code>list.extend(seq)</code></h3><p>在末尾一次性追加另一个序列，<code>seq</code>可以是列表、元组、集合、字典，若为字典,则仅会将键(key)作为元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;white&#x27;</span>,<span class="string">&#x27;black&#x27;</span>]</span><br><span class="line">list1.extend(list2)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;white&#x27;, &#x27;black&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="修改">修改</h2><p>使用下标修改，注意下标不能超出范围（你不能通过下标来增加新元素）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>[<span class="number">4</span>] = <span class="string">&#x27;black&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;yellow&#x27;, &#x27;black&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="删除">删除</h2><h3 id="del-list-pos"><code>del list[pos]</code></h3><p>使用<code>del</code>语句根据删除元素，可以使用索引，也可以使用切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;, &#x27;white&#x27;]</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;yellow&#x27;, &#x27;white&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="list-pop-pos"><code>list.pop(pos)</code></h3><p>删除的同时弹出元素，默认为最后一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.pop()) <span class="comment"># yellow</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="list-remove-obj"><code>list.remove(obj)</code></h3><p>移除列表中某个值的第一个匹配项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.remove(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br></pre></td></tr></table></figure><p>配合<code>while</code>循环可以删除所有匹配项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>,  <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">list</span>.remove(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="list-clear"><code>list.clear()</code></h3><p>清空列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># []</span></span><br></pre></td></tr></table></figure><h2 id="查找">查找</h2><h3 id="list-index-obj-start-end"><code>list.index(obj[,start[,end]])</code></h3><p>返回查找对象的第一个索引位置，如果找不到则会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.index(<span class="string">&#x27;blue&#x27;</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h3 id="max-min-list"><code>max/min(list)</code></h3><p>查找列表中的最大（小）值，全数字比较数字大小，全字符串依次比较<code>ASCII</code>大小，混杂则无法比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="built_in">list</span>)) <span class="comment"># yellow</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="built_in">list</span>)) <span class="comment"># blue</span></span><br></pre></td></tr></table></figure><h2 id="计数">计数</h2><h3 id="list-count-obj"><code>list.count(obj)</code></h3><p>如字面义，统计元素出现次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>.count(<span class="string">&#x27;blue&#x27;</span>)) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h2 id="排序">排序</h2><h3 id="list-sort-key-func-reverse-True"><code>list.sort([key=func][,reverse=True])</code></h3><p>默认为从小到大，添加<code>reverse=True</code>可以反转，可添加<code>key=func</code>自定义关键词</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myFunc</span>(<span class="params">e</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">len</span>(e)</span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.sort(key=myFunc,reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>但是仅靠<code>key=func</code>不足以满足更为复杂的需求，例如在C++中，经常要给结构体先按变量<code>A</code>排序，再按变量<code>B</code>排序</p><p>这时就要引入<code>functools</code>模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myFunc</span>(<span class="params">str1, str2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(str1) != <span class="built_in">len</span>(str2):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(str1) - <span class="built_in">len</span>(str2)</span><br><span class="line">    <span class="keyword">elif</span> str1 &gt; str2:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;black&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.sort(key=functools.cmp_to_key(myFunc))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;, &#x27;green&#x27;, &#x27;white&#x27;, &#x27;yellow&#x27;]</span></span><br></pre></td></tr></table></figure><p>注意，与C++中<code>sort(a,a+6,myFunc);</code>不同，自定义函数返回的不是<code>bool</code>值，而是正负数</p><blockquote><p>相关阅读：<a href="https://docs.python.org/zh-cn/3/howto/sorting.html#sortinghowto">排序指南</a>、<a href="https://www.zhihu.com/question/30389643">python3 为什么取消了sort方法中的cmp参数？</a></p></blockquote><h3 id="list-sorted-key-func-reverse-True"><code>list.sorted([key=func][,reverse=True])</code></h3><p>与<code>list.sort()</code>基本相同，但这个方法不会更改原列表，只会返回一个排序好的列表</p><h2 id="反转">反转</h2><h3 id="list-reverse"><code>list.reverse()</code></h3><p>会对列表的元素进行反向排序，该方法没有返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>]</span><br><span class="line"><span class="built_in">list</span>.reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;white&#x27;, &#x27;yellow&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;red&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="转换">转换</h2><h3 id="list-seq"><code>list(seq)</code></h3><p>将元组或字符串转换为列表（元组在<a href="/2022/03/08/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E5%85%83%E7%BB%84%EF%BC%88Tuple%EF%BC%89/">下一篇</a>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">list</span>(<span class="string">&quot;HelloWorld&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>) <span class="comment"># [&#x27;H&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;W&#x27;, &#x27;o&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h1 id="嵌套列表">嵌套列表</h1><p>列表之间允许嵌套</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list1.append(list2)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 2, 3, [4, 5, 6]]</span></span><br></pre></td></tr></table></figure><h1 id="引用或不引用">引用或不引用</h1><p>在前面的嵌套操作中，<code>list1</code>中嵌套了一个<code>list2</code>，当<code>list2</code>发生变化时，<code>list1</code>也会跟着变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">list1.append(list2)</span><br><span class="line">list2.append(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(list1) <span class="comment"># [1, 2, 3, [4, 5, 6, 7]]</span></span><br></pre></td></tr></table></figure><p>又或者，再创建一个<code>list3</code>，并把<code>list2</code>赋值给<code>list3</code>，当<code>list2</code>发生变化时，<code>list3</code>也会跟着变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list3 = list2</span><br><span class="line"><span class="built_in">print</span>(list3) <span class="comment"># [4, 5, 6, 7]</span></span><br><span class="line">list2.append(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(list3) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>这就是引用，在某些场景下，这也不失为一个好功能，但有时你会想避免出现这样的状况，有下面几种解决方法：</p><ul><li><p>使用切片</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list4 = list2[:]</span><br><span class="line"><span class="built_in">print</span>(list4) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br><span class="line">list2.append(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(list4) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></li><li><p><code>copy()</code>方法</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list4 = list2.copy()</span><br><span class="line"><span class="built_in">print</span>(list4) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br><span class="line">list2.append(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(list4) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></li><li><p>深拷贝</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">list4 = copy.deepcopy(list2)</span><br><span class="line"><span class="built_in">print</span>(list4) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br><span class="line">list2.append(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(list4) <span class="comment"># [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="数字列表">数字列表</h1><h2 id="range-函数"><code>range()</code>函数</h2><p>使用<code>range()</code>可以轻松地生成一系列数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>就像你猜想的一样，它是左闭右开的，所以并不会输出 5</p><h2 id="使用range-创建数组列表">使用<code>range()</code>创建数组列表</h2><p>配合<code>list()</code>，可以将<code>range()</code>的结果转换为列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>使用<code>range()</code>时，还可以指定步长</p><p>例如这里打印 1~10 的偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(numbers) <span class="comment"># [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>使用<code>range()</code>能够创建几乎所有的数集，例如创建一个列表，包含 1~10 的平方</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    squares.append(value**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(squares) <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><h2 id="对数字列表执行简单的统计">对数字列表执行简单的统计</h2><p>你可以轻松地找出数字列表中的最大值、最小值和总和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(digits)) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(digits)) <span class="comment"># 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(digits)) <span class="comment"># 45</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（八）自定义 Model</title>
      <link href="/2022/03/06/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89-Model/"/>
      <url>/2022/03/06/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89-Model/</url>
      
        <content type="html"><![CDATA[<h1 id="关于-Model">关于 Model</h1><p>如果我们的应用非常简单的话，我们可以在 <code>Controller</code> 里面处理常见的业务逻辑。但是如果我们 <strong>有一个功能想在多个控制器、或者多个模板里面复用</strong> 的话，那么我们就可以把公共的功能单独抽取出来作为一个<code>模块（Model）</code></p><h1 id="封装一个-Model">封装一个 Model</h1><p>新建 <code>models/tools.go</code>，并在里面实现一个<code>Unix</code>时间戳转日期时间的功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnixToDate</span><span class="params">(timestamp <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">t := time.Unix(<span class="type">int64</span>(timestamp), <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> t.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调用-Model">调用 Model</h1><h2 id="在控制器中调用">在控制器中调用</h2><p>以<code>\controllers\admin\adminController.go</code>为例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">date := models.UnixToDate(<span class="number">1646554975</span>)</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;转换后的日期和时间是：&quot;</span>+date)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203061626937.jpg" alt=""></p><h2 id="在模板文件中调用">在模板文件中调用</h2><p>注意顺序，注册模板函数需要在加载模板上面</p><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;test/models&quot;</span></span><br><span class="line"><span class="string">&quot;test/routers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.SetFuncMap(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;unixToDate&quot;</span>: models.UnixToDate,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">routers.DefaultRoutersInit(r)</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">routers.AdminRoutersInit(r)</span><br><span class="line"><span class="comment">//api 路由</span></span><br><span class="line">routers.ApiRoutersInit(r)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>\controllers\admin\adminController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AdminController <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseController</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.HTML(<span class="number">200</span>, <span class="string">&quot;admin/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;now&quot;</span>: <span class="number">1646554975</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">username, _ := con.Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">con.String(<span class="number">200</span>, username.(<span class="type">string</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Article(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻列表&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>\templates\admin\index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;admin/index.html&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;.now | unixToDate&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203061652202.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（四）字符串（String）</title>
      <link href="/2022/03/05/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88String%EF%BC%89/"/>
      <url>/2022/03/05/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88String%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="初识字符串">初识字符串</h1><p>字符串就是一串字符，有短字符串（单行字符串）和长字符串（多行字符串）两种书写形式</p><blockquote><p>与C不同，在Python中没有单个字符的类型，单个字符也按字符串处理</p></blockquote><h2 id="短字符串（单行字符串）">短字符串（单行字符串）</h2><p>简单地使用引号括起来，单引号和双引号均可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;This is a string&quot;</span></span><br><span class="line"><span class="string">&#x27;This is also a string&#x27;</span></span><br></pre></td></tr></table></figure><p>这种灵活性运允许你在字符串中包含引号和撇号，只要确保不与首尾两端的引号冲突</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;I told my friend,&quot;Python is my favorite language!&quot;&#x27;</span></span><br><span class="line"><span class="string">&quot;The language &#x27;Python&#x27; is name after Monty Python, not the snake.&quot;</span></span><br><span class="line"><span class="string">&quot;One of Python&#x27;s strengths is its fiverse and supportive community.&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>Tip：<a href="/2022/03/02/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/#%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%88%86%E5%A4%9A%E8%A1%8C">续行符</a>（反斜杠<code>\</code>）在字符串中也可以使用，故短字符串也可以写成多行</p></blockquote><h2 id="长字符串（多行字符串）">长字符串（多行字符串）</h2><p>之前介绍 Python 多行注释时提到使用三个引号（单引号、双引号都行）来包含多行注释内容，这其实是长字符串的写法</p><p>只是由于在长字符串中可以放置任何内容，如果所定义的长字符串没有赋值给任何变量，那么这个字符串就相当于被解释器忽略了，也就相当于注释掉了</p><p>实际上，使用三个引号括起来的长字符串完全可以赋值给变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;&#x27;&#x27;&quot;Let&#x27;s go fishing&quot;, said Mary.</span></span><br><span class="line"><span class="string">&quot;OK, Let&#x27;s go&quot;, said her brother.</span></span><br><span class="line"><span class="string">they walked to a lake&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>当程序中有大段文本内容要定义成字符串时，优先推荐使用长字符串形式，因为这种形式非常强大，可以让字符串中包含任何内容，既可包含单引号，也可包含双引号</p><blockquote><p>Tip：长字符串也允许被写在一行里</p></blockquote><h1 id="转义字符">转义字符</h1><p>Python中的转义字符大体与C中的相同</p><table><thead><tr><th style="text-align:left">转义字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>\</code>(在行尾时)</td><td style="text-align:left">续行符</td></tr><tr><td style="text-align:left"><code>\\</code></td><td style="text-align:left">反斜杠符号</td></tr><tr><td style="text-align:left"><code>\'</code></td><td style="text-align:left">单引号</td></tr><tr><td style="text-align:left"><code>\&quot;</code></td><td style="text-align:left">双引号</td></tr><tr><td style="text-align:left"><code>\a</code></td><td style="text-align:left">响铃</td></tr><tr><td style="text-align:left"><code>\b</code></td><td style="text-align:left">退格</td></tr><tr><td style="text-align:left"><code>\n</code></td><td style="text-align:left">换行</td></tr><tr><td style="text-align:left"><code>\v</code></td><td style="text-align:left">纵向制表符</td></tr><tr><td style="text-align:left"><code>\t</code></td><td style="text-align:left">横向制表符</td></tr><tr><td style="text-align:left"><code>\r</code></td><td style="text-align:left">回车，将光标移到本行开头</td></tr><tr><td style="text-align:left"><code>\f</code></td><td style="text-align:left">换页</td></tr><tr><td style="text-align:left"><code>\yyy</code></td><td style="text-align:left">八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td></tr><tr><td style="text-align:left"><code>\xyy</code></td><td style="text-align:left">十六进制数，以 \x 开头，y 代表的字符，例如：\x0a 代表换行</td></tr></tbody></table><h1 id="原始字符串">原始字符串</h1><p>上述两种字符串默认都是启用转义的，这也会带来一些很麻烦的情况</p><p>比如打印一条 <code>Windows</code> 的路径 <code>D:\study\python\tuple</code>，其中的反斜杠需要写两次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;D:\\study\\python\\tuple&quot;</span>)</span><br></pre></td></tr></table></figure><p>这很烦人，此时可借助于原始字符串来解决这个问题</p><p>原始字符串以<code>r</code>或<code>R</code>开头，这样字符串中就不会把反斜杠当成特殊字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;D:\study\python\tuple&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是，原始字符串在处理<strong>同时包含两种引号的字符串</strong>时会遇到麻烦，例如打印这个句子：<code>&quot;Let's go&quot;, said Charlie</code></p><p>正常情况下的两个版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&quot;Let\&#x27;s go&quot;, said Charlie&#x27;</span>)  <span class="comment"># &quot;Let&#x27;s go&quot;, said Charlie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\&quot;Let&#x27;s go\&quot;, said Charlie&quot;</span>) <span class="comment"># &quot;Let&#x27;s go&quot;, said Charlie</span></span><br></pre></td></tr></table></figure><p>但在使用原始字符串时，就没有能正常输出的方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;&quot;Let&#x27;</span>s go<span class="string">&quot;, said Charlie&#x27;)   # 语法错误</span></span><br><span class="line"><span class="string">print(r&quot;</span><span class="string">&quot;Let&#x27;s go&quot;</span>, said Charlie<span class="string">&quot;)   # 语法错误</span></span><br><span class="line"><span class="string">print(r&#x27;&quot;</span>Let\<span class="string">&#x27;s go&quot;, said Charlie&#x27;</span>)  <span class="comment"># &quot;Let\&#x27;s go&quot;, said Charlie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;\&quot;Let&#x27;s go\&quot;, said Charlie&quot;</span>) <span class="comment"># \&quot;Let&#x27;s go\&quot;, said Charlie</span></span><br></pre></td></tr></table></figure><p>一种解决方案是将引号单独写，再拼接到一起，但这未免过于麻烦了</p><p>另外一种是使用长字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;&quot;Let&#x27;s go&quot;, said Charlie&#x27;&#x27;&#x27;</span>) <span class="comment">#&quot;Let&#x27;s go&quot;, said Charlie</span></span><br></pre></td></tr></table></figure><p>原始字符串+长字符串的写法也是被允许的，这样你就不需要管转义，也不需要管引号了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;&#x27;&#x27;&quot;Let&#x27;s go&quot;, said Charlie \n\t\\&#x27;&#x27;&#x27;</span>) <span class="comment">#&quot;Let&#x27;s go&quot;, said Charlie \n\t\\</span></span><br></pre></td></tr></table></figure><h1 id="访问字符串中的值">访问字符串中的值</h1><h2 id="索引字符串">索引字符串</h2><p>使用<code>变量[下标]</code>来索引单个字符</p><p>下标可以<strong>从前往后数</strong>（头是<code>0</code>，往后递增）也可以<strong>从后往前数</strong>（尾是<code>-1</code>，往前递减，倒数第<code>x</code>个就是<code>-x</code>）</p><table><thead><tr><th><code>s = &quot;Hello&quot;</code></th><th>‘H’</th><th>‘e’</th><th>‘l’</th><th>‘l’</th><th>‘o’</th></tr></thead><tbody><tr><td>从前往后数</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td></tr><tr><td>从后往前数</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><p><strong>注意：</strong> 不要以为能用索引的方法编辑字符串</p><p><strong>样例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>]) <span class="comment"># H</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>]) <span class="comment"># e</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>]) <span class="comment"># l</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>]) <span class="comment"># l</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">4</span>]) <span class="comment"># o</span></span><br></pre></td></tr></table></figure><h2 id="截取字符串">截取字符串</h2><p>使用<code>变量[起始位置:终止位置:步长]</code>来截取部分字符串</p><p><strong>注意：</strong></p><ul><li>左闭右开规则（顾头不顾尾）</li><li>某个位置不指定的时候默认取最后或最前</li><li>步长可选，默认为<code>1</code></li><li>切片的时候起始位置和终止位置都超出的时候不会进行报错，但是索引会报错</li></ul><p><strong>样例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>]) <span class="comment"># Hello</span></span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>]) <span class="comment"># Hello</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:]) <span class="comment"># Hello</span></span><br><span class="line"><span class="built_in">print</span>(s[:]) <span class="comment"># Hello</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment"># ell</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment"># el</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>::-<span class="number">1</span>]) <span class="comment">#olleH</span></span><br></pre></td></tr></table></figure><h1 id="拼接字符串">拼接字符串</h1><h2 id="字符串与字符串拼接">字符串与字符串拼接</h2><p>使用<code>+</code>来拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;World&quot;</span></span><br><span class="line">s3 = s1 + s2</span><br><span class="line"><span class="built_in">print</span>(s3) <span class="comment"># HelloWorld</span></span><br></pre></td></tr></table></figure><h2 id="数字与字符串拼接">数字与字符串拼接</h2><p>数字不能直接与字符串拼接，必须先用<code>str()</code>或<code>repr()</code>转换为字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">b = <span class="string">&quot;456&quot;</span></span><br><span class="line">c = <span class="built_in">str</span>(a) + b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 123456</span></span><br></pre></td></tr></table></figure><p>二者的不同是：<code>str()</code>用于将值转化为适于人阅读的形式，而<code>repr()</code>转化为供解释器读取的形式</p><h1 id="格式化字符串">格式化字符串</h1><h2 id="格式符">%格式符</h2><p>与C中的<code>printf()</code>十分类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;今天是%d月%d日,天气%s&quot;</span> % (<span class="number">3</span>, <span class="number">5</span>, <span class="string">&quot;阴&quot;</span>)</span><br><span class="line"><span class="string">&#x27;今天是3月5日,天气阴&#x27;</span></span><br></pre></td></tr></table></figure><p>详细信息请看<a href="http://c.biancheng.net/view/2177.html">Python格式化字符串（格式化输出）</a></p><h2 id="format-方法"><code>.format()</code>方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;jerry&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.<span class="built_in">format</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))  <span class="comment">#按照位置顺序进行填充</span></span><br><span class="line">输出 jerry1,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;jerry&#123;2&#125;,&#123;0&#125;,&#123;1&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.<span class="built_in">format</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>))  <span class="comment">#按照索引值进行填充</span></span><br><span class="line">输出 jerryc,a,b</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;jerry&#123;a&#125;,&#123;b&#125;,&#123;c&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name.<span class="built_in">format</span>(a=<span class="number">1</span>,c=<span class="number">2</span>,b=<span class="number">3</span>))  <span class="comment">#按照关键字进行填充</span></span><br><span class="line">输出 jerry1,<span class="number">3</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="f-string">f-string</h2><p><code>Python3.6</code>后引入了<code>f-string</code> ，称之为字面量格式化字符串</p><p><code>f-string</code> 格式化字符串以 <code>f</code> 开头，后面跟着字符串，字符串中的表达式用大括号 <code>&#123;&#125;</code> 包起来，它会将变量或表达式计算后的值替换进去，不用再去判断使用 <code>%s</code>，还是 <code>%d</code></p><p>引用<a href="https://www.runoob.com/python3/python3-string.html#f-string">菜鸟教程</a>中的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;Hello <span class="subst">&#123;name&#125;</span>&#x27;</span>  <span class="comment"># 替换变量</span></span><br><span class="line"><span class="string">&#x27;Hello Runoob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>&#x27;</span>         <span class="comment"># 使用表达式</span></span><br><span class="line"><span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f&#x27;<span class="subst">&#123;w[<span class="string">&quot;name&quot;</span>]&#125;</span>: <span class="subst">&#123;w[<span class="string">&quot;url&quot;</span>]&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">&#x27;Runoob: www.runoob.com&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="字符串运算符">字符串运算符</h1><p>下表实例变量 <code>a</code> 值为字符串 <code>&quot;Hello&quot;</code>，<code>b</code> 变量值为 <code>&quot;Python&quot;</code></p><table><thead><tr><th>操作符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td><code>+</code></td><td>字符串连接</td><td><code>a + b</code> 输出结果： <code>HelloPython</code></td></tr><tr><td><code>*</code></td><td>重复输出字符串</td><td><code>a*2</code> 输出结果：<code>HelloHello</code></td></tr><tr><td><code>[]</code></td><td>通过索引获取字符串中字符</td><td><code>a[1]</code> 输出结果 <code>e</code></td></tr><tr><td><code>[ : ]</code></td><td>截取字符串</td><td><code>a[1:4]</code> 输出结果 <code>ell</code></td></tr><tr><td><code>in</code></td><td>成员运算符 - 如果字符串中包含给定的字符返回 <code>True</code></td><td><code>'H' in a</code> 输出结果 <code>True</code></td></tr><tr><td><code>not in</code></td><td>成员运算符 - 如果字符串中不包含给定的字符返回 <code>True</code></td><td><code>'M' not in a</code> 输出结果 <code>True</code></td></tr><tr><td><code>==</code>、!=</td><td>两个字符串是否完全相等</td><td><code>a!=b</code> 输出结果 <code>True</code></td></tr><tr><td><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code> 、<code>&lt;=</code></td><td>依次比较<code>ACSII</code>码</td><td><code>a&lt;b</code> 输出结果 <code>True</code></td></tr></tbody></table><h1 id="字符串常用方法-函数">字符串常用方法/函数</h1><blockquote><p>注意，因为字符串是不可编辑的，所以下面的删除、替换之类的都指的是<strong>返回修改完的新串</strong>，而<strong>旧串保存不变</strong></p></blockquote><h2 id="长度">长度</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><code>len(str)</code></td><td>字符串长度</td></tr><tr><td><code>len(str.encode([code]))</code></td><td>字符串按<code>code</code>编码后的字节数，默认为 <code>UTF-8</code></td></tr></tbody></table><h2 id="大小写">大小写</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>str.capitalize()</code></td><td>本字符串首字母大写</td></tr><tr><td><code>str.title()</code></td><td>所有单词首字母大写</td></tr><tr><td><code>str.upper()</code></td><td>所有字母大写</td></tr><tr><td><code>str.lower()</code></td><td>所有字母小写</td></tr></tbody></table><h2 id="查找与替换">查找与替换</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>str.find(sub[,start[,end]])</code></td><td>返回首次找到的位置或<code>-1</code>（找不到）</td></tr><tr><td><code>str.rfind(sub[,start[,end]])</code></td><td>同上，但是是从右往左找</td></tr><tr><td><code>str.index(sub[,start[,end]])</code></td><td>同<code>find()</code>，但是找不到的话直接报错</td></tr><tr><td><code>str.rindex(sub[,start[,end]])</code></td><td>同上，但是是从右往左找</td></tr><tr><td><code>str.count(sub[,start[,end]])</code></td><td>返回找到的次数</td></tr><tr><td><code>str.replace(old,new [,max])</code></td><td>返回把<code>old</code>替换为<code>new</code>，不超过<code>max</code>次的新字符串</td></tr></tbody></table><h2 id="左-右-居中对齐">左/右/居中对齐</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>str.ljust(width[, fillchar])</code></td><td>左对齐，在右侧使用<code>fillchar</code>字符填充至<code>width</code>宽度，默认是空格</td></tr><tr><td><code>str.rjust(width[, fillchar])</code></td><td>同上，但是是右对齐</td></tr><tr><td><code>str.center(width[, fillchar])</code></td><td>同上，但是是居中对齐</td></tr></tbody></table><h2 id="开头-结尾">开头/结尾</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>str.startswith(sub[,start[,end]])</code></td><td>检查<code>str[start:end]</code>是否以<code>sub</code>开头</td></tr><tr><td><code>str.endswith()(sub[,start[,end]])</code></td><td>同上，但是是结尾</td></tr><tr><td><code>str.strip([chars])</code></td><td>删除左右两端的<code>chars</code>字符，可多个，默认空格制表符换行之类的空白字符</td></tr><tr><td><code>str.lstrip([chars])</code></td><td>同上，但是仅左端</td></tr><tr><td><code>str.rstrip([chars])</code></td><td>同上，但是仅右端</td></tr></tbody></table><h2 id="根据关键词分割-合并">根据关键词分割/合并</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>str.split([sep][,maxsplit])</code></td><td>用<code>seq</code>分割字符串，默认空白字符，最多切<code>maxsplit</code>次，返回一个已经切好的列表</td></tr><tr><td><code>str.join(iterable)</code></td><td>上面的逆过程，<code>iterable</code>可以是列表或元组等，<code>str</code>是要插入的分隔符（串），返回合并好的新串</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（七）路由中间件</title>
      <link href="/2022/03/04/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E8%B7%AF%E7%94%B1%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2022/03/04/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89%E8%B7%AF%E7%94%B1%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="初识中间件">初识中间件</h1><p>从最简单的模板开始</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，只有一个函数处理根目录下的路由</p><p>然而其实也可以传递多个函数，它们将被依次执行，<strong>最后一个函数前面触发的方法都可以称为中间件</strong></p><p>中间件适合处理一些公共的业务逻辑，比如<strong>登录认证</strong>、<strong>权限校验</strong>、<strong>数据分页</strong>、 <strong>记录日志</strong>、<strong>耗时统计</strong>等</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我是一个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, initMiddleware, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见，在处理路由时，先执行了中间件，再响应了页面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203041801970.jpg" alt=""></p><h1 id="Next-方法"><code>.Next()</code>方法</h1><p>在中间件中调用<code>.Next()</code>方法可以递归调用下一个中间件或最终函数</p><h2 id="例1：统计一个请求的执行时间">例1：统计一个请求的执行时间</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">start := time.Now().UnixNano()</span><br><span class="line">ctx.Next()</span><br><span class="line">end := time.Now().UnixNano()</span><br><span class="line">fmt.Println(end - start)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, initMiddleware, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second) <span class="comment">//休眠1秒</span></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203042246591.jpg" alt=""></p><h2 id="例2：多个中间件的递归执行">例2：多个中间件的递归执行</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MiddlewareOne</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;第一个中间件开始&quot;</span>)</span><br><span class="line">ctx.Next()</span><br><span class="line">fmt.Println(<span class="string">&quot;第一个中间件结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MiddlewareTwo</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;第二个中间件开始&quot;</span>)</span><br><span class="line">ctx.Next()</span><br><span class="line">fmt.Println(<span class="string">&quot;第二个中间件结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, MiddlewareOne, MiddlewareTwo, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203042252517.jpg" alt=""></p><h1 id="Abort-方法"><code>.Abort()</code>方法</h1><p>在中间件中调用<code>.Next()</code>方法可以终止该请求的剩余处理程序</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MiddlewareOne</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;第一个中间件开始&quot;</span>)</span><br><span class="line">ctx.Abort()</span><br><span class="line">fmt.Println(<span class="string">&quot;第一个中间件结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MiddlewareTwo</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;第二个中间件开始&quot;</span>)</span><br><span class="line">ctx.Next()</span><br><span class="line">fmt.Println(<span class="string">&quot;第二个中间件结束&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, MiddlewareOne, MiddlewareTwo, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203042258393.jpg" alt=""></p><h1 id="全局中间件">全局中间件</h1><p>在引擎上调用<code>.Use()</code>方法可以配置全局中间件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我是一个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">r.Use(initMiddleware) <span class="comment">//配置全局中间件</span></span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/test1&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面1&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/test2&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;测试页面2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203042319235.jpg" alt=""></p><h1 id="在路由分组中配置中间件">在路由分组中配置中间件</h1><p>还记得之前的<a href="/2022/01/24/gin-ru-men-bi-ji-wu-lu-you-fen-zu-he-lu-you-wen-jian-chou-chi/">路由分组</a>吗？</p><p>在<code>\routers\adminRouters.go</code>中，我们之前是这样写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;test/controllers/admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func AdminRoutersInit(r *gin.Engine) &#123;</span><br><span class="line">//后台路由</span><br><span class="line">adminRouters := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/&quot;</span>, admin.AdminController&#123;&#125;.Index)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/user&quot;</span>, admin.AdminController&#123;&#125;.User)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/article&quot;</span>, admin.AdminController&#123;&#125;.Article)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，需要为<code>adminRouters</code>这个路由组配置中间件，一共有两种写法</p><h2 id="写法1：">写法1：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我是一个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">adminRouters := r.Group(<span class="string">&quot;/admin&quot;</span>, initMiddleware) <span class="comment">//配置中间件</span></span><br><span class="line">&#123;</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/&quot;</span>, admin.AdminController&#123;&#125;.Index)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/user&quot;</span>, admin.AdminController&#123;&#125;.User)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/article&quot;</span>, admin.AdminController&#123;&#125;.Article)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写法2：">写法2：</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我是一个中间件&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">adminRouters := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">adminRouters.Use(initMiddleware) <span class="comment">//配置中间件</span></span><br><span class="line">&#123;</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/&quot;</span>, admin.AdminController&#123;&#125;.Index)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/user&quot;</span>, admin.AdminController&#123;&#125;.User)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/article&quot;</span>, admin.AdminController&#123;&#125;.Article)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中间件和对应控制器之间共享数据">中间件和对应控制器之间共享数据</h1><p>在中间件中可以设置键值对（<code>.Set()</code>方法），供其他中间件或控制器读取（<code>.Get()</code>方法）</p><p><code>\routers\adminRouters.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;test/controllers/admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我是一个中间件&quot;</span>)</span><br><span class="line">ctx.Set(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;张三&quot;</span>) <span class="comment">//设置数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">adminRouters := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">adminRouters.Use(initMiddleware)</span><br><span class="line">&#123;</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/&quot;</span>, admin.AdminController&#123;&#125;.Index)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/user&quot;</span>, admin.AdminController&#123;&#125;.User)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/article&quot;</span>, admin.AdminController&#123;&#125;.Article)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>\controllers\admin\adminController.go</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AdminController <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseController</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;后台首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">username, _ := con.Get(<span class="string">&quot;username&quot;</span>) <span class="comment">//获取数据</span></span><br><span class="line">con.String(<span class="number">200</span>, username.(<span class="type">string</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Article(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻列表&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203042355309.jpg" alt=""></p><h1 id="中间件注意事项">中间件注意事项</h1><h2 id="默认中间件">默认中间件</h2><p><code>gin.Default()</code>默认使用了 <code>Logger</code> 和 <code>Recovery</code> 中间件</p><ul><li><code>Logger</code> 中间件将日志写入 <code>gin.DefaultWriter</code>，即使配置了 <code>GIN_MODE=release</code></li><li><code>Recovery</code> 中间件会 <code>recover</code> 任何 <code>panic</code>，如果有 <code>panic</code> 的话，会写入 <code>500</code> 响应码</li></ul><p>如果不想使用上面两个默认的中间件，可以使用 <code>gin.New()</code>新建一个没有任何默认中间件的路由</p><h2 id="中间件中使用-goroutine">中间件中使用 <code>goroutine</code></h2><p>当在中间件或 handler 中启动新的 goroutine 时，不能使用原始的上下文（c *gin.Context）， 必须使用其只读副本（c.Copy()）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initMiddleware</span><span class="params">(ctx *gin.Context)</span></span> &#123;</span><br><span class="line">ctxCp:=ctx.Copy()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span> <span class="params">()</span></span>  &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（三）数字（Number）</title>
      <link href="/2022/03/03/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E5%AD%97%EF%BC%88Number%EF%BC%89/"/>
      <url>/2022/03/03/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%E6%95%B0%E5%AD%97%EF%BC%88Number%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="三种数">三种数</h1><p>Python 支持三种不同的数值类型：</p><ol><li><p><strong>整型(<code>int</code>)</strong> ： 通常被称为是整型或整数，是正或负整数，不带小数点</p></li><li><p><strong>浮点型(<code>float</code>)</strong> ： 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示<code>2.5e2</code></p></li><li><p><strong>复数(<code>complex</code>)</strong> ： 复数由实数部分和虚数部分构成，可以用<code>a + bj</code><strong>（注意是<code>j</code>）</strong>,或者<code>complex(a,b)</code>表示，<code> a</code>和<code>b</code>都将以浮点型存储</p></li></ol><h2 id="相互转换">相互转换</h2><ul><li><strong><code>int(x)</code></strong> 将<code>x</code>转换为一个整数。</li><li><strong><code>float(x)</code></strong> 将<code>x</code>转换到一个浮点数。</li><li><strong><code>complex(x)</code></strong> 将<code>x</code>转换到一个复数，实数部分为 <code>x</code>，虚数部分为 <code>0</code></li><li><strong><code>complex(x, y)</code></strong> 将 <code>x</code> 和 <code>y</code> 转换到一个复数，实数部分为 <code>x</code>，虚数部分为 <code>y</code></li></ul><p>PS：</p><ul><li><code>Python3</code> 中的数字是<strong>没有限制大小的！</strong></li><li><code>Python3</code> 中没有 <code>Python2</code> 的 <code>long</code> 类型，整型简化成只剩一个<code>int</code>类型</li><li><code>布尔(bool)</code>是<code>int</code>的子类型</li></ul><h2 id="数中的下划线">数中的下划线</h2><p>在<code>Python3.6+</code>中书写很大的数时，可以在任意位置加入下划线，使数字更清晰易读</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">universe_age= <span class="number">14_000_000_000</span></span><br></pre></td></tr></table></figure><p>当然，Python并不会把下划线也存进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(universe_age)</span><br><span class="line"><span class="number">14000000000</span></span><br></pre></td></tr></table></figure><p>这种方法对整数和浮点数都适用</p><h1 id="七种运算">七种运算</h1><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">含义</th><th style="text-align:center">例子</th><th style="text-align:center">运行结果</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加</td><td style="text-align:center">3+1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减</td><td style="text-align:center">40-2</td><td style="text-align:center">38</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘</td><td style="text-align:center">3*2</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除</td><td style="text-align:center">6/3</td><td style="text-align:center">2.0</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">整除</td><td style="text-align:center">3//2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂</td><td style="text-align:center">2**3</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">求余</td><td style="text-align:center">7%2</td><td style="text-align:center">1</td></tr></tbody></table><p>PS，在整数和浮点数的运算中：</p><ul><li>混合运算的结果总是浮点数</li><li>任意两个数相除（<code>/</code>），结果总是浮点数</li></ul><h1 id="简化运算符">简化运算符</h1><p>这个与C中的规则相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以简化为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>其他的举一反三</p><h1 id="二进制、八进制、十六进制">二进制、八进制、十六进制</h1><h2 id="表示法">表示法</h2><p>Python中这三个进制的标识方法与C中的不完全相同，表示这三个进制的数必须以<code>0</code>开头，然后分别跟着不同进制的字母</p><ul><li>二进制 ： <code>b</code>，<code>0b110011</code></li><li>八进制： <code>o</code>， <code>0o56432</code></li><li>十六进制： <code>x</code>，<code>0xF765A</code></li></ul><h2 id="相互转换-2">相互转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0b110011</span>)  <span class="comment">#输出二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0o123</span>)    <span class="comment">#输出八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">0xF1A</span>)    <span class="comment">#输出十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">12</span>))  <span class="comment">#十进制转二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;10110&quot;</span>,<span class="number">2</span>))   <span class="comment">#二进制转十进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">54321</span>))   <span class="comment">#十进制转十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;0x35AE&quot;</span>,<span class="number">16</span>))    <span class="comment">#十六进制转十进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">0xF35E</span>))     <span class="comment">#十六进制转二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">12345</span>))   <span class="comment">#十进制转八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;76532&quot;</span>,<span class="number">8</span>))   <span class="comment">#八进制转十进制</span></span><br></pre></td></tr></table></figure><h1 id="相关函数-2">相关函数</h1><h2 id="数学函数（from-math-import-）">数学函数（<code>from math import *</code>）</h2><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td><code>abs(x)</code></td><td>绝对值</td></tr><tr><td><code>fabs(x)</code></td><td>浮点数的绝对值</td></tr><tr><td><code>ceil(x)</code></td><td>向上取整</td></tr><tr><td><code>floor(x)</code></td><td>向下取整</td></tr><tr><td><code>log(x)</code></td><td>以<code>e</code>为底取对数</td></tr><tr><td><code>log(x,y)</code></td><td>以<code>y</code>为底取<code>x</code>的对数</td></tr><tr><td><code>max/min(x,y,...)</code></td><td>取最大值/最小值</td></tr><tr><td><code>sqrt(x)</code></td><td>开根号</td></tr><tr><td><code>round(x[,n])</code></td><td>四舍五入，精度<code>n</code>可选</td></tr><tr><td><code>sin(x)</code></td><td><code>x</code>的正弦值</td></tr><tr><td><code>cos(x)</code></td><td><code>x</code>的余弦值</td></tr><tr><td><code>tan(x)</code></td><td><code>x</code>的正切值</td></tr><tr><td><code>asin(x)</code></td><td><code>x</code>的反余弦（弧度）</td></tr><tr><td><code>acos(x)</code></td><td><code>x</code>的反余弦（弧度）</td></tr><tr><td><code>atan(x)</code></td><td><code>x</code>的反正切（弧度）</td></tr><tr><td><code>atan2(x,y)</code></td><td>给定的 <code>x</code> 及 <code>y</code> 坐标值的反正切值</td></tr><tr><td><code>hypot(x,y)</code></td><td>欧几里德范数 <code>sqrt(x*x + y*y)</code></td></tr><tr><td><code>degrees(x)</code></td><td>弧度转角度</td></tr><tr><td><code>radians(x)</code></td><td>角度转弧度</td></tr></tbody></table><h2 id="随机数函数（from-random-import-）">随机数函数（<code>from random import *</code>）</h2><p>Python中取随机不需要事先设定种子，当然你也可以手动重新设定</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td><code>random()</code></td><td>在<code>[0,1)</code>中取一个随机数</td></tr><tr><td><code>choice(seq)</code></td><td>在<code>seq</code>中随机挑选一个元素，<code>seq</code>可以是列表，元组或字符串，例：<code>choice(range(10))</code></td></tr><tr><td><code>randrange([x,]y[,z])</code></td><td>在<code>[x,y)</code>内取一个<code>z</code>的倍数，<code>x</code>和<code>z</code>默认为<code>1</code></td></tr><tr><td><code>uniform(x,y)</code></td><td>在<code>[x,y]</code>中随机取一个浮点数</td></tr><tr><td><code>shuffle(list)</code></td><td>随机打乱一个列表</td></tr><tr><td><code>seed([x])</code></td><td>改变随机数生成器的种子</td></tr></tbody></table><h1 id="数学常量">数学常量</h1><table><thead><tr><th style="text-align:left">常量</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>pi</code></td><td style="text-align:left">圆周率<code>π</code></td></tr><tr><td style="text-align:left"><code>e</code></td><td style="text-align:left">欧拉常数<code>e</code></td></tr></tbody></table><h1 id="有趣的问题：0-1-0-2≠0-3">有趣的问题：<code>0.1+0.2≠0.3</code></h1><p>初中的时候对Python为数不多的认识之一就是听说在Python里<code>0.1</code>加上<code>0.2</code>不等于<code>0.3</code>（笑）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span>+<span class="number">0.2</span>)</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>但实际上，这个不是Python的特性，所有语言在处理浮点数时都会发生这样的情况，详情可以查看<a href="https://www.bilibili.com/video/BV1xq4y1D7Ep">这个视频</a>和<a href="https://0.30000000000000004.com/">这个网站</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（二）基础语法</title>
      <link href="/2022/03/02/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/03/02/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="标识符">标识符</h1><p>Python中的标识符规则与C中的类似，但不完全相同</p><ul><li>标识符只能由数字、字母和下划线组成，并且开头不能是数字</li><li>标识符不能与保留字冲突</li><li>标识符对大小写敏感</li><li>在<code>Python3</code>中，汉字也可以作为标识符，但不建议使用</li></ul><p>标识符前后的下划线有特殊含义</p><ul><li>以单下划线开头的标识符（如 <code>_width</code>），表示不能直接访问的类属性，其无法通过<code>from...import*</code>的方式导入</li><li>以双下划线开头的标识符（如<code>__add</code>）表示类的私有成员</li><li>以双下划线作为开头和结尾的标识符（如<code> __init__</code>），是专用标识符</li></ul><h1 id="保留字">保留字</h1><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 <code>keyword</code> 模块，可以输出当前版本的所有关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;__peg_parser__&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><h1 id="注释">注释</h1><h2 id="单行注释">单行注释</h2><p>单行注释以<code>#</code>开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="多行注释">多行注释</h2><p>多行注释用三个单引号 <code>'''</code> 或者三个双引号 <code>&quot;&quot;&quot;</code> 将注释括起来，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个单引号</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号 </span></span><br><span class="line"><span class="string">这是多行注释，用三个双引号</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="简单输入输出">简单输入输出</h1><p>使用 <code>input()</code> 和 <code>print()</code> 实现简单输入输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>);</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>注意<code>print</code> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <code>end=&quot;&quot;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;World&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="缩进">缩进</h1><p>Python的一大特色就是用缩进来标识代码结构，而不是和C一样使用大括号</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)    <span class="comment"># 缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure><p>同时，不要混用 Tab 和空格，虽然有时它们看起来是一样的，这会让程序无法运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204291625676.jpg" alt=""></p><h1 id="引入模块和函数">引入模块和函数</h1><p>在 Python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块</p><ul><li>将整个模块导入，格式为： <code>import somemodule</code></li><li>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></li><li>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></li><li>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></li></ul><h1 id="变量与赋值">变量与赋值</h1><p>Python 中的变量不需要声明，但每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的“类型”是变量所指的内存中对象的类型</p><h2 id="给单个变量赋值">给单个变量赋值</h2><p>与C中的规则一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">counter = <span class="number">100</span>          <span class="comment"># 整型变量</span></span><br><span class="line">miles   = <span class="number">1000.0</span>       <span class="comment"># 浮点型变量</span></span><br><span class="line">name    = <span class="string">&quot;HelloWorld&quot;</span>     <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (counter)</span><br><span class="line"><span class="built_in">print</span> (miles)</span><br><span class="line"><span class="built_in">print</span> (name)</span><br></pre></td></tr></table></figure><h2 id="多个变量赋值">多个变量赋值</h2><p>这点跟Golang有异曲同工之妙</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;HelloWorld&quot;</span></span><br></pre></td></tr></table></figure><h1 id="基本数据类型">基本数据类型</h1><p><code>Python3</code> 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p><code>Python3</code> 的六个标准数据类型中：</p><ul><li><p><strong>不可变数据（3 个）：</strong> Number（数字）、String（字符串）、Tuple（元组）</p></li><li><p><strong>可变数据（3 个）：</strong> List（列表）、Dictionary（字典）、Set（集合）</p></li></ul><blockquote><p>这里的不可变数据说的是部分内容不可变，比如说数字只能被整体重新赋值，而没有改变其中一部分的说法</p></blockquote><h2 id="确定变量所指的对象类型">确定变量所指的对象类型</h2><h3 id="使用type-来查询">使用<code>type()</code>来查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c, d = <span class="number">20</span>, <span class="number">5.5</span>, <span class="literal">True</span>, <span class="number">4</span>+<span class="number">3j</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">type</span>(a), <span class="built_in">type</span>(b), <span class="built_in">type</span>(c), <span class="built_in">type</span>(d))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;float&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt; &lt;<span class="keyword">class</span> <span class="string">&#x27;complex&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="使用isinstance-来判断">使用<code>isinstance()</code>来判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">111</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(a, <span class="built_in">int</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>isinstance()</code>会认为子类是一种父类类型，例如<code>bool</code>是<code>int</code>的子类型</p></blockquote><h1 id="判断与循环">判断与循环</h1><h2 id="If">If</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;condition_1&gt;:</span><br><span class="line">    &lt;statement_1&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;condition_2&gt;:</span><br><span class="line">    &lt;statement_2&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statement_3&gt;</span><br></pre></td></tr></table></figure><h2 id="For">For</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><p><code>break</code>和<code>continue</code>在<code>for</code>中有效，<code>else</code>为可选</p><h2 id="While">While</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;condition&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><p><code>break</code>和<code>continue</code>在<code>While</code>中有效，<code>else</code>为可选</p><h1 id="一句话分多行">一句话分多行</h1><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以在行末使用续行符（反斜杠<code>\</code>）来实现多行语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><p>在 <code>[]</code>, <code>&#123;&#125;</code>, 或 <code>()</code> 中的多行语句，不需要使用反斜杠 <code>\</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h1 id="一行中写多句话">一行中写多句话</h1><p>使用<code>;</code>分割即可，但为什么要写在一行呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>;b=<span class="number">2</span>;c=a+b;<span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 入门笔记（一）搭建环境</title>
      <link href="/2022/03/02/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/03/02/Python-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022011524.jpg" alt=""></p><blockquote><p>❤️又开新坑了！！！</p></blockquote><p>高中的时候学过一段时间的<code>Python3</code>，但是很快就忘了，究其原因还是光看不练，很快就会忘个精光</p><p>这次边学边做笔记，应该能学到很多知识</p><p>基本框架源于<a href="https://www.runoob.com/python3/python3-tutorial.html">菜鸟教程</a></p><h1 id="Python-简介">Python 简介</h1><p>Python是一门解释性语言，简单易学，上手容易</p><p>虽然在我的认知里在正式场合里用到Python的情况不多，但作为著名的胶水语言，还是有必要去学一学的</p><h1 id="环境搭建">环境搭建</h1><p>前往<a href="https://www.python.org/downloads/windows/">官网</a>下载并安装Python</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022033058.jpg" alt=""></p><p>再在<code>VSCode</code>中安装Python的扩展</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022034859.jpg" alt=""></p><blockquote><p>如果你从未使用过<code>VScode</code>，请安装中文插件和<code>CodeRunner</code>，参考<a href="/2021/12/31/cc-vscode-huan-jing-pei-zhi/">这篇</a></p></blockquote><p>新建文件，就可以开始Python学习了，将下面的代码复制进去，按下<kbd>Ctrl</kbd> + <kbd>Alt</kbd> +  <kbd>N</kbd>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HelloWorld&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203022059786.jpg" alt=""></p><p>看，你已经成功运行了第一个Python程序了！</p><p>当然，作为一门解释性语言，除了写完一整个程序然后运行（脚本式），还可以一句话一句话地与编译器对话来运行（交互式）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204281630205.jpg" alt=""></p><p>你也可以直接运行 Python 来在命令行中进行交互式编程</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204281631560.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Python3 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（六）自定义控制器和控制器的继承</title>
      <link href="/2022/03/02/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E5%88%B6%E5%99%A8%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
      <url>/2022/03/02/Gin-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E5%88%B6%E5%99%A8%E5%92%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义控制器">自定义控制器</h1><p>在对路由分组后，我们对控制器也可以进行分组</p><p>首先新建<code>controllers</code>文件夹，然后在其中按业务逻辑创建控制器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TEST</span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│  main.go</span><br><span class="line">│</span><br><span class="line">├─controllers</span><br><span class="line">│  ├─admin</span><br><span class="line">│  │      adminController.go</span><br><span class="line">│  │</span><br><span class="line">│  ├─api</span><br><span class="line">│  │      apiController.go</span><br><span class="line">│  │</span><br><span class="line">│  └─homePage</span><br><span class="line">│          homePageController.go //因为default是关键字</span><br><span class="line">│</span><br><span class="line">└─routers</span><br><span class="line">        adminRouters.go</span><br><span class="line">        apiRouters.go</span><br><span class="line">        defaultRouters.go</span><br></pre></td></tr></table></figure><p>以<code>/controllers/admin/adminController.go</code>为例，编辑控制器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AdminController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;后台首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;设置用户&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Article(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻列表&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去到<code>routers/adminRouters.go</code>中重新配置路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;test/controllers/admin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AdminRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">adminRouters := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/&quot;</span>, admin.AdminController&#123;&#125;.Index)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/user&quot;</span>, admin.AdminController&#123;&#125;.User)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/article&quot;</span>, admin.AdminController&#123;&#125;.Article)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意不是<code>admin.AdminController&#123;&#125;.Index()</code>，这表示执行这个方法，而不是绑定到这个方法上</p><h1 id="控制器的继承">控制器的继承</h1><p>上面之所以选择加一个结构体然后用它的方法，不是多此一举的，就是利用结构体的特性来继承父结构体的方法</p><p>这里定义两个全局的方法，用于返回成功和失败的消息</p><p>新建<code>\controllers\admin\baseController.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BaseController <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c BaseController)</span></span> Success(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c BaseController)</span></span> Error(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;失败&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在<code>adminController.go</code>中嵌套<code>BaseController struct</code>，并继承和调用它的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AdminController <span class="keyword">struct</span> &#123;</span><br><span class="line">BaseController</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Index(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;后台首页&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> User(con *gin.Context) &#123;</span><br><span class="line">c.Success(con)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c AdminController)</span></span> Article(con *gin.Context) &#123;</span><br><span class="line">con.String(<span class="number">200</span>, <span class="string">&quot;新闻列表&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看见控制器已经成功继承</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021942993.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 版 Minecraft 加模组开服教程</title>
      <link href="/2022/03/01/Java-%E7%89%88-Minecraft-%E5%8A%A0%E6%A8%A1%E7%BB%84%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/"/>
      <url>/2022/03/01/Java-%E7%89%88-Minecraft-%E5%8A%A0%E6%A8%A1%E7%BB%84%E5%BC%80%E6%9C%8D%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012300453.png" alt=""></p><blockquote><p>❤️这几天宿舍4个人一起联机玩 MC 打暮色森林 Mod，特记录本次开服记录，</p></blockquote><p>（因为暮色森林的新版本变化不大，最终 Boss 还没有出，还多了一堆 bug，所以决定使用<code>1.12.2</code>版本）</p><h1 id="客户端准备">客户端准备</h1><h2 id="安装-Java-环境">安装 Java 环境</h2><p>前往<a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">Java官网</a>下载并安装，或者点击<a href="https://wwd.lanzouf.com/iwm4n00uu8la">此链接</a></p><p>客户端统一使用<a href="http://hmcl.huangyuhui.net/">HMCL启动器</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012039476.png" alt=""></p><p>首先先将下载源改成<code>官方</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012326250.png" alt=""></p><p>在游戏列表中下载安装<code>1.12.2</code>版本和Forge（因为我的 Java 一直没更新，所以就安了个比较旧的 Forge ）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012329613.png" alt=""></p><h2 id="下载并安装-Mod">下载并安装 Mod</h2><p>打开<a href="https://www.mcmod.cn/">mc百科</a>官网寻找 Mod，这里收录了大量 Mod，真的墙裂推荐</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012339580.jpg" alt=""></p><p>打开Mod页面，以<a href="https://www.mcmod.cn/class/61.html">暮色森林</a>为例，点击<code>Mod下载</code>，找到需要的版本并下载，同时记一下<code>运行环境</code>里服务器是不是也需要装</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012342269.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012345685.jpg" alt=""></p><p>点击文件夹图标，打开mod文件夹，复制进去即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012332072.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012349676.jpg" alt=""></p><p>（另外推荐几个辅助性Mod，可以点击<a href="https://wwd.lanzouf.com/iHl1i00uvt8j">此链接</a>下载）</p><p>至此，客户端配置完成，你可以点击<code>导出整合包</code>分享给你的小伙伴了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203012352697.jpg" alt=""></p><h1 id="服务端准备">服务端准备</h1><blockquote><p>本人环境：Debian 9.9，Java 1.8.0_322</p></blockquote><h1 id="安装-Java-环境-2">安装 Java 环境</h1><p>这里图方便，建议直接<code>apt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install default-jdk</span><br></pre></td></tr></table></figure><p>如果后面你发现 java 报错什么的，大概率是版本的问题，那就要去官网下了</p><h1 id="下载-Forge">下载 Forge</h1><blockquote><p>因Java的跨平台性，我选择先在本地配置好，再打包用<a href="https://www.filezilla.cn/">FileZilla</a>发送到服务器上，<strong>本步骤需保持网络通畅</strong></p></blockquote><p>前往<a href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.12.2.html">Forge官网</a>下载所需的版本，版本应与客户端的版本相同，页面加载不出来请看<a href="https://jingyan.baidu.com/article/b2c186c8d5ed79c46ef6ffbc.html">这篇</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203020900955.jpg" alt=""></p><p>下载后，在命令行中运行，选择<code>安装服务端</code>，并指定安装路径（如果你已经有了一个原版服务器，那直接在它身上安装即可）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203020902820.jpg" alt=""></p><p><code>Forge</code>会自动下载官方的服务器文件，如果网卡，可以前往<a href="https://mcversions.net/">mcversions</a>下载，再将文件重命名为<code>minecraft_server.1.xx.x.jar</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203020905791.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203020905665.jpg" alt=""></p><p>现在安装完毕，<code>installer</code>可以删掉了，直接运行<code>forge-1.12.2-14.23.5.2800-universal.jar</code>，不要从官方服务器启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar forge-1.12.2-14.23.5.2800-universal.jar</span><br></pre></td></tr></table></figure><p>第一次很正常地提示要同意最终用户协议，打开<code>eula.txt</code>编辑即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021438596.jpg" alt=""></p><p>可以看见已经已经成功运行</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021446597.jpg" alt=""></p><p>先输入<code>stop</code>停止服务器，打开<code>server.properties</code>，将<code>online-mode</code>设置为<code>false</code>，同时把服务器也要安装的 Mod 复制到<code>mods</code>文件夹中</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021448185.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021451916.jpg" alt=""></p><p>再次成功运行，没有报错</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021452899.jpg" alt=""></p><p>尝试从本机连接，成功登录</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021454978.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203021500204.jpg" alt=""></p><p>现在，你可以将它传输到服务器上运行了，可以使用<a href="/2022/02/15/%E3%80%8ELinux%E3%80%8Fscreen-%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/">screen</a>更加方便地运行服务器</p><blockquote><p>如果你中途有无法解决的困难，可以通过<a href="https://wwd.lanzouf.com/iaWZi00vm3bi">此链接</a>下载配置好的客户端和服务端</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』Nginx 配置 SSL 证书</title>
      <link href="/2022/02/28/%E3%80%8ELinux%E3%80%8FNginx-%E9%85%8D%E7%BD%AE-SSL-%E8%AF%81%E4%B9%A6/"/>
      <url>/2022/02/28/%E3%80%8ELinux%E3%80%8FNginx-%E9%85%8D%E7%BD%AE-SSL-%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="申请并下载证书">申请并下载证书</h1><p>首先，前往<a href="https://freessl.cn/">https://freessl.cn/</a>注册账号，根据指示填写域名，点击<code>创建免费的SSL证书</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205042329571.png" alt=""></p><p><code>CSR生成</code>选择<code>离线生成</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202282201846.png" alt=""></p><p>点击生成后，会提示先安装<a href="https://keymanager.org/">KeyManager</a>，根据指示安装即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202282203562.png" alt=""></p><p>根据指示一直走，可以看见证书已经出现在了<code>KeyManager</code>里，点击<code>导出证书</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202282243395.png" alt=""></p><p>选择<code>Nginx</code>并导出</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202282207334.png" alt=""></p><p>打开压缩包，可以看见有两个格式的文件：<code>.crt</code>和<code>.key</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202205042329793.png" alt=""></p><h1 id="配置服务器">配置服务器</h1><p>现在需要将证书上传至服务器，位置任意，例如我这里放在了<code>/root/ssl</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202282216327.png" alt=""></p><p>接下来编辑<code>Nginx</code>的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204012229454.png" alt=""></p><p>在<code>server</code>把80端口的那部分改成下面几行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#监听 443 端口 （HTTPS用的是443）</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="comment">#添加证书</span></span><br><span class="line"><span class="attribute">ssl_certificate</span>     /root/ssl/www-nickxu-top-0223222924_chain.crt;</span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /root/ssl/www-nickxu-top-0223222924_key.key;</span><br></pre></td></tr></table></figure><p>然后再开一个<code>server</code>来处理80端口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">server_name</span> www.nickxu.top;  </span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;  <span class="comment">#重定向至https协议</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的配置文件：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># You should look at the following URL&#x27;s in order to grasp a solid understanding</span></span><br><span class="line"><span class="comment"># of Nginx configuration files in order to fully unleash the power of Nginx.</span></span><br><span class="line"><span class="comment"># https://www.nginx.com/resources/wiki/start/</span></span><br><span class="line"><span class="comment"># https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/</span></span><br><span class="line"><span class="comment"># https://wiki.debian.org/Nginx/DirectoryStructure</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In most cases, administrators will remove this file from sites-enabled/ and</span></span><br><span class="line"><span class="comment"># leave it as reference inside of sites-available where it will continue to be</span></span><br><span class="line"><span class="comment"># updated by the nginx packaging team.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file will automatically load configuration files provided by other</span></span><br><span class="line"><span class="comment"># applications, such as Drupal or Wordpress. These applications will be made</span></span><br><span class="line"><span class="comment"># available underneath a path with that package name, such as /drupal8.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default server configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">server_name</span> www.nickxu.top;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSL configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line"><span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line"><span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line"><span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line"><span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="attribute">ssl_certificate</span>     /root/ssl/www-nickxu-top-0223222924_chain.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /root/ssl/www-nickxu-top-0223222924_key.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /var/www/html;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line"><span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> www.nickxu.top;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line"><span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line"><span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line"><span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass PHP scripts to FastCGI server</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line"><span class="comment">#include snippets/fastcgi-php.conf;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## With php-fpm (or other unix sockets):</span></span><br><span class="line"><span class="comment">#fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;</span></span><br><span class="line"><span class="comment">## With php-cgi (or other tcp sockets):</span></span><br><span class="line"><span class="comment">#fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line"><span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line"><span class="comment">#deny all;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Virtual Host configuration for example.com</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can move that to a different file under sites-available/ and symlink that</span></span><br><span class="line"><span class="comment"># to sites-enabled/ to enable it.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#server &#123;</span></span><br><span class="line"><span class="comment">#listen 80;</span></span><br><span class="line"><span class="comment">#listen [::]:80;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#server_name example.com;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#root /var/www/example.com;</span></span><br><span class="line"><span class="comment">#index index.html;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#location / &#123;</span></span><br><span class="line"><span class="comment">#try_files $uri $uri/ =404;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启，可以看见已经成功启用了<code>SSL</code>证书</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202282236850.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（六）PicGO + Gitee 图床（已废弃）</title>
      <link href="/2022/02/23/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AD%EF%BC%89PicGO-+-Gitee-%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/02/23/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AD%EF%BC%89PicGO-+-Gitee-%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从2022年3月25日开始，<code>Gitee</code>静止了图片外链访问，所以此方法已废弃，搭建图床请看下一篇</p></blockquote><p>写文章免不了要涉及到图片的问题，本人推荐使用<code>PicGO+Gitee</code>来实现一个免费图床，是真的好用</p><h1 id="准备-Gitee-储存库">准备 Gitee 储存库</h1><p><code>Gitee</code>可以看作是国内的<code>GitHub</code>，前往官网<a href="https://gitee.com/signup?from=homepage">注册账号</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231632465.png" alt=""></p><p>注册完，点击右上角的加号新建仓库，名称任意</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231633039.png" alt=""></p><p>记得设置<code>readme</code>文件，并创建<code>master</code>分支</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231640603.png" alt=""></p><p>成功创建后，进入你的仓库，在选项卡中找到最右边的<code>管理</code>，再到最底下将其设置为<code>开源</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231641094.jpeg" alt=""></p><p>在右上角的<code>头像</code>处找到<code>设置</code>，再在左侧找到<code>私人令牌</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231643317.png" alt=""></p><p>起个名字之后，点击提交</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231645825.png" alt=""></p><p>记住你的令牌，并好好保管</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231646745.png" alt=""></p><p>至此，云端储存库准备完毕</p><h1 id="下载和安装-PicGo">下载和安装 PicGo</h1><p>首先前往<a href="https://molunerfinn.com/PicGo/">PicGo官网</a>下载</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231624056.png" alt=""></p><p>它会导到到<code>GitHub</code>上的该项目的<code>releases</code>页面，在最新版打开<code>Assets</code>列表挑选你的系统下载即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231627693.png" alt=""></p><p>安装后启动，在插件设置中搜索并安装<code>gitee-uploader</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231648522.png" alt=""></p><p>再到图床设置里找到<code>gitee</code>，填入<code>路径</code>，<code>分支</code>和<code>令牌</code>即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231651492.png" alt=""></p><p>现在，图床准备完毕，每上传一张图片都能自动将链接复制到剪贴板里，直接在<code>typora</code>里粘贴即可</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231652958.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（五）日常写作</title>
      <link href="/2022/02/20/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E6%97%A5%E5%B8%B8%E5%86%99%E4%BD%9C/"/>
      <url>/2022/02/20/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E6%97%A5%E5%B8%B8%E5%86%99%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>前面的内容主要讲了如何搭建这个环境，后面两篇讲解平时是怎么写文章的</p><p>文章一律使用<code>markdown</code>文档，后缀名为<code>.md</code></p><p>使用<code>hexo new &quot;文章名称&quot;</code>在<code>source\_posts</code>中创建文件后，就能直接打开开始写作了</p><h1 id="Front-matter">Front-matter</h1><p>每篇文章的开头都有一个<code>Front-matter</code>，用于保存这篇文章的信息，详情请看<a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔(二) 主題頁面</a></p><p>一般情况下，我们只需要关注<code>title</code>、<code>date</code>、<code>tags</code>、<code>categories</code>这4个参数</p><ul><li><code>title</code>：文章标题</li><li><code>date</code>：写作时间，还有一个相关参数是<code>updated</code>，但不需要加，编译器会把<code>md</code>文件的修改时间作为更新时间</li><li><code>tags</code>：文章标签，语法为<code>tags: [A,B]</code>，这样就为这个文章添加了<code>A</code>，<code>B</code>2个标签</li><li><code>categories</code>：文章分类，语法为<code>categories: [A,B]</code>，这表示本文属于<code>A</code>分类下的<code>B</code>子类</li></ul><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202222259575.png" alt=""></p><blockquote><p>在目前的<code>Typora</code>中有<code>bug</code>，在普通模式下书写正文开头几个字会卡到<code>Front-matte</code>r里，所以正文的开头只能在源代码模式下写</p></blockquote><h1 id="Markdown-语法">Markdown 语法</h1><p><code>Markdown</code>是一种轻量化标记语言，语法简单，并且上手容易</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202222239333.jpg" alt=""></p><p><code>Markdown</code>编辑器我首推<a href="https://www.typora.net/">Typora</a>，网上也有很多<a href="https://pandao.github.io/editor.md/">在线编辑器</a>，可供练习使用</p><p>考虑<code>Markdown</code>的语法已经广为人知，所以我折叠此部分以节省空间</p><details class="toggle" ><summary class="toggle-button" style="">Markdown 基本语法</summary><div class="toggle-content"><h2 id="标题">标题</h2><p>使用<code>#</code>来设置标题，有多少个<code>#</code>就是第多少级标题</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题</span></span><br><span class="line"><span class="section">##### 这是五级标题</span></span><br><span class="line"><span class="section">###### 这是六级标题</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><p>见本文中的标题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="字体效果">字体效果</h2><p>原版中共有3种字体效果：加粗、倾斜、删除，可以相互叠加</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**这是加粗的文字**</span></span><br><span class="line"><span class="emphasis">*这是倾斜的文字*</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*这是斜体加粗的文字*</span>**</span></span><br><span class="line">~~这是加删除线的文字~~</span><br><span class="line">~~<span class="emphasis">*这是斜体删除的文字*</span>~~</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em></p><p><em><strong>这是斜体加粗的文字</strong></em></p><p><s>这是加删除线的文字</s></p><p><s><em>这是斜体删除的文字</em></s></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用">引用</h2><p>使用<code>&gt;</code>添加引用效果，允许嵌套</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是引用的内容</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><blockquote><p>这是引用的内容</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表">列表</h2><p>列表允许嵌套</p><h3 id="无序列表">无序列表</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 内容1</span><br><span class="line"><span class="bullet">-</span> 内容2</span><br><span class="line"><span class="bullet">-</span> 内容3</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><ul><li>内容1</li><li>内容2</li><li>内容3</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="有序列表">有序列表</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 内容1</span><br><span class="line"><span class="bullet">2.</span> 内容2</span><br><span class="line"><span class="bullet">3.</span> 内容3</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><ol><li>内容1</li><li>内容2</li><li>内容3</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分割线">分割线</h2><p>三个或者三个以上的<code>-</code>或者<code>*</code>都可以</p><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接">链接</h2><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">百度</span>](<span class="link">https://www.baidu.com/</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><p><a href="https://www.baidu.com/">百度</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="图片">图片</h2><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](<span class="link">https://www.nickxu.top/static/favicon.jpg</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><p><img src="https://www.nickxu.top/static/favicon.jpg" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="表格">表格</h2><p>Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行</p><p>自定义对齐方式：</p><ul><li><p><code>-:</code>内容和标题栏居右对齐</p></li><li><p><code>:-</code>内容和标题栏居左对齐</p></li><li><p><code>:-:</code>内容和标题栏居中对齐</p></li></ul><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>不建议自己来敲，<code>Typora</code>自带插入表格，而且也有很多<a href="https://www.tablesgenerator.com/markdown_tables">在线表格生成网站</a></p><h2 id="代码">代码</h2><h3 id="行内代码">行内代码</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在C++中如果要使用<span class="code">`cin`</span>或者<span class="code">`cout`</span>，应当先设置命名空间，如：<span class="code">`using namespace std;`</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><p>在C++中如果要使用<code>cin</code>或者<code>cout</code>，应当先设置命名空间，如：<code>using namespace std;</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="代码块">代码块</h3><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```cpp</span></span><br><span class="line"><span class="code">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="code">using namespace std;</span></span><br><span class="line"><span class="code">int main()</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    cout&lt;&lt;&quot;Hello World!&quot;;</span></span><br><span class="line"><span class="code">    return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></div></details><h1 id="标签外挂">标签外挂</h1><blockquote><p>你也许看过这篇<a href="https://tzy1997.com/articles/0xiipgum/">基于Butterfly的外挂标签引入</a>，但其中的安装方法并不适用于现在的版本，故本节只讨论原版的标签外挂</p></blockquote><p>在<code>Butterfly</code>主题中，还自带一些额外的组件提供更多功能和<code>UI</code>方面的强化</p><p>它们并不是标准的<code>markdown</code>格式，所以被称为<code>标签外挂（Tag Plugins）</code></p><p>本人仅记录自己常用的几个，在<a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">官方文档</a>中有更为详细的信息</p><h2 id="折叠栏（Toggle）"><a href="https://butterfly.js.org/posts/4aa8abbe/#tag-hide">折叠栏（Toggle）</a></h2><ul><li><p>代码：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 点击以打开 %&#125;</span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure></li><li><p>预览：</p>  <details class="toggle" ><summary class="toggle-button" style="">点击以打开</summary><div class="toggle-content"><p>内容</p></div></details></li></ul><h2 id="选项卡（Tabs）"><a href="https://butterfly.js.org/posts/4aa8abbe/#Tabs">选项卡（Tabs）</a></h2><ul><li><p>代码：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs 样例 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 代码  --&gt;</span><br><span class="line"></span><br><span class="line">这里是代码</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 预览  --&gt;</span><br><span class="line"></span><br><span class="line">这里是预览</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></li><li><p>预览：</p>  <div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">代码</button></li><li class="tab"><button type="button" data-href="#样例-2">预览</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><p>这里是代码</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><p>这里是预览</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li></ul><h2 id="时间轴（timeline）"><a href="https://butterfly.js.org/posts/4aa8abbe/#timeline">时间轴（timeline）</a></h2><ul><li><p>代码：</p>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></li><li><p>预览：</p>  <div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（四）Twikoo 评论系统</title>
      <link href="/2022/02/19/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89Twikoo-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/02/19/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89Twikoo-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇内容主要源于：</p><ul><li><a href="https://twikoo.js.org/">Twikoo 官方文档</a></li><li><a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">Butterfly 安裝文檔(四) 主題配置-2</a></li></ul></blockquote><details class="toggle" ><summary class="toggle-button" style="">更新记录</summary><div class="toggle-content"><div class="timeline "><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-04-09</p></div></div><div class='timeline-item-content'><p>更正了一个小错误，增加了图片上传功能教程与更新教程</p></div></div></div></div></details><p>毫不夸张地说，<code>Twikoo</code> 是我用过最好的静态博客评论系统</p><details class="toggle" ><summary class="toggle-button" style="">预览效果</summary><div class="toggle-content"><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202191929080.png" alt=""></p></div></details><p>除了评论功能，还可以记录文章阅读量</p><p>搭建过程包括准备<strong>数据库</strong>和<strong>云函数</strong>，还有<strong>修改主题配置文件</strong></p><h1 id="配置数据库和云函数">配置数据库和云函数</h1><blockquote><p>墙裂建议观看<a href="https://www.bilibili.com/video/BV1Fh411e7ZH?share_source=copy_web">官方视频教程</a>，我也是看了这个视频才成功的</p></blockquote><h2 id="MongoDB">MongoDB</h2><p>使用<code>MongoDB</code>数据库来存储数据，先<a href="https://www.mongodb.com/zh-cn/cloud/atlas/register">注册 MongoDB 账号</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192018884.png" alt=""></p><p>创建免费数据库，类型选择<code>Shared</code>，区域选择 <code>AWS / N. Virginia (us-east-1)</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192027642.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192027861.png" alt=""></p><p>（因为我已经创建过一个了，所以图中显示要付费）</p><p>点击<code>Connect</code>按钮</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192033114.png" alt=""></p><p>选择<strong>允许所有 IP 地址的连接</strong>，并<strong>创建数据库用户</strong>（我这里是已经完成了的）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192033599.png" alt=""></p><p>连接方式选择中间的<code>Connect your application</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192206943.png" alt=""></p><p>记录下<strong>连接字符串</strong>，等下使用时记得将其中的 <code>&lt;password&gt;</code> 修改为刚刚设置的用户密码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192045462.png" alt=""></p><h2 id="vercel">vercel</h2><p>使用<code>vercel</code>来运行云函数，先<a href="https://vercel.com/signup">注册 vercel 账号</a>，可以选择从<code>GitHub</code>之类的登录，也可以选择通过邮箱注册</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192107152.png" alt=""></p><p>点击<a href="https://vercel.com/import/project?template=https://github.com/imaegoo/twikoo/tree/dev/src/vercel-min">此链接</a>把项目代码部署到你的代码托管网站上去，一般直接选<code>GitHub</code>（没有<code>GitHub</code>账号的先去注册）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192100750.png" alt=""></p><p>新建一个储存库用来保存代码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192106159.png" alt=""></p><p>完成后，在导航栏选择<code>Setting</code>，在左侧选择<code>Environment Variables</code>，添加变量<code>MONGODB_URI</code>，值输入刚才的<strong>连接字符串</strong>，记得修改 <code>&lt;password&gt;</code> 为数据库用户密码</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192124025.png" alt=""></p><p>导航栏中选择<code>Deployments</code>，重新部署一下</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192151123.png" alt=""></p><p>回到<code>Overview</code>，可以看见<code>云函数运行正常</code>字样，在右边的<code>域名（DOMAINS）</code>里挑一个记录下你的域名</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192132473.png" alt=""></p><p>这一整条 <code>URL</code>就是你的 <code>环境 ID</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192137972.png" alt=""></p><h1 id="修改主题配置文件">修改主题配置文件</h1><blockquote><p>摘自 <a href="https://butterfly.js.org/posts/ceeb73f/#%E8%A9%95%E8%AB%96">Butterfly 安裝文檔(四) 主題配置-2</a></p></blockquote><p>打开<code>_config.butterfly.yml</code>，找到评论那块，改成使用<code>twikoo</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202192144013.png" alt=""></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comments System</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">twikoo</span> <span class="comment"># Valine,Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in post&#x27;s top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><p>再在下方找到<code>Twikoo</code>并设置，下面是我的样例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Twikoo</span></span><br><span class="line"><span class="comment"># https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span> <span class="string">https://twikoo-notsprog.vercel.app/</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">ap-shanghai</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><p>重启<code>Hexo</code>，能看见评论系统已启用</p><details class="toggle" ><summary class="toggle-button" style="">前车之鉴</summary><div class="toggle-content"><ul><li><p>如果你配置好后发现是这个样子，很可能是因为 <code>Butterfly</code> 主题的版本过低导致的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091615572.png" alt=""></p></li></ul></div></details><h1 id="开启图床支持（可选）">开启图床支持（可选）</h1><blockquote><p>本节内容源自<a href="https://twikoo.js.org/faq.html#vercel-%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87">官方文档</a></p></blockquote><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091459894.jpg" alt=""></p><p>这里我选择直接嫖杜老师的 <code>api</code> 了，毕竟感觉也不会有多少图片</p><p>当然，如果有一天支持了阿里云 OSS 之类的，我会迁过去，毕竟总是白嫖别人的不好意思</p><p>打开设置页面-&gt; 插件，启用 <code>7bu</code> 图床，把 <code>token</code>（<code>e3113626842a06ccf273ecbaa2b1f431</code>） 粘贴进去，然后保存，刷新页面</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091503489.jpg" alt=""></p><p>可以看到已经成功实现了图片上传功能</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091505864.jpg" alt=""></p><h1 id="更新-Twikoo">更新 Twikoo</h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091506589.jpg" alt=""></p><p>如你所见， <code>Twikoo</code> 时常会进行更新，关于更新了什么，可以到<a href="https://github.com/imaegoo/twikoo/releases">releases</a>页面进行查看</p><blockquote><p>以下操作源于<a href="https://twikoo.js.org/quick-start.html#%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0">官方文档</a></p></blockquote><p>首先打开<a href="https://vercel.com/dashboard">vercel的仪表盘页面</a>，并进入你的项目页面，之后点击下面的储存库地址</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091512829.jpg" alt=""></p><p>编辑<code>package.json</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091513685.jpg" alt=""></p><p>改为最新的版本号</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091513991.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091513859.jpg" alt=""></p><p>等待<code>Vercel</code>编译完成，就完成了更新</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091513899.jpg" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202204091514470.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（三）Butterfly 主题</title>
      <link href="/2022/02/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89Butterfly-%E4%B8%BB%E9%A2%98/"/>
      <url>/2022/02/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89Butterfly-%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇内容主要源于：</p><ul><li><a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 官方安装文档</a></li><li><a href="https://tzy1997.com/articles/hexo541u/">Hexo+Butterfly主题美化 | 唐先森の博客</a></li></ul></blockquote><h1 id="安装">安装</h1><p>在你的博客根目录下载主题并安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>然后在<code>theme</code>目录可以找到新的<code>butterfly</code>主题（默认主题<code>landscape</code>其实可以删掉了）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032141299.png" alt=""></p><p>在<code>_config.yml</code>中更改主题为butterfly</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172217943.png" alt=""></p><p>测试，可以看见新主题已安装</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172355695.jpeg" alt=""></p><h1 id="官方配置">官方配置</h1><p>在<code>\themes\butterfly</code>中找到主题配置文件<code>_config.yml</code>，复制一个副本出来，重命名为<code>_config.butterfly.yml</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172232054.png" alt=""></p><p>在把它剪贴到博客根目录，就跟<code>_config.landscape.yml</code>的格式一样</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172233577.png" alt=""></p><p>Hexo 中，根目录下的<code>_config.butterfly.yml</code>会比<code>\themes\butterfly\_config.yml的</code>优先级更高，这样做是为了避免在将来更新主题时，把已经配置好的配置文件一并覆盖了</p><blockquote><p>注意，不要弄混<strong>博客配置文件</strong>（<code>_config.yml</code>）和<strong>主题配置文件</strong>（<code>_config.butterfly.yml</code>）</p></blockquote><p>打开<code>_config.butterfly.yml</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172247528.png" alt=""></p><p>这个主题很强大，所以配置文件也很长，接近1000行（所以请善用搜索功能）</p><p>但不用担心，作者每个部分都用分割线分好了，非常规整，而且很多地方都有中文注释（大佬 <a href="https://github.com/jerryc127">Jerry</a> 是香港同胞！）</p><p>下面挑重点讲，并附上我自己的配置</p><h2 id="Main-menu-navigation（导航菜单）">Main menu navigation（导航菜单）</h2><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172254330.png" alt=""></p><p>如上图所示，首页的导航菜单可以指向各子页面（那个搜索不在这里设置，下面会讲），先讲解子页面如何创建</p><h3 id="新建页面">新建页面</h3><blockquote><p>下面的内容简化于 <a href="https://butterfly.js.org/posts/dc584b87/">Butterfly 安裝文檔(二) 主題頁面</a></p></blockquote><p>在<code>soure</code>中的每一个文件夹，就对应一个页面（当然<code>_posts</code>和<code>_draft</code>除外）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172342357.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172343010.png" alt=""></p><p>使用<code>hexo new page &lt;title&gt;</code>来新建页面，例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>打开<code>source/about/index.md</code>，就可以像我一样编辑<code>关于</code>页面了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202180018953.png" alt=""></p><p><code>关于</code>、<code>留言板</code>、<code>todo-list</code>之类的属于普通页面，但<code>归档</code>、<code>标签</code>、<code>分类</code>属于特殊页面</p><p>归档页面（archives）是内建的，不需要创建</p><p>标签页面（tag）在创建后，需要在表头加上<code>type: &quot;tags&quot;</code>和<code>layout: &quot;tags&quot;</code>，而内容留空：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2022-02-05 18:29:52</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line"><span class="section">layout: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>分类页面（categories）同理：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2022-02-05 18:30:37</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line"><span class="section">layout: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>至此，几个页面创建完毕，下面需要修改配置文件</p><h3 id="修改配置文件">修改配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Main menu navigation (導航目錄)</span></span><br><span class="line"><span class="comment"># see https://butterfly.js.org/posts/4aa8abbe/#導航菜單</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章||fas</span> <span class="attr">fa-book:</span></span><br><span class="line">    <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">    <span class="attr">ToDo:</span> <span class="string">/todo/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-list-alt</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/contact/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comments</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">页面名称</span>&#125;<span class="string">:</span> &#123;<span class="string">路径</span>&#125; <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-&#123;图标名称&#125;</span></span><br><span class="line">&#123;<span class="string">二级菜单名称</span>&#125;<span class="string">||fas</span> <span class="string">fa-&#123;图标名称&#125;:</span></span><br><span class="line">  &#123;<span class="string">二级页面名称</span>&#125;<span class="string">:</span> &#123;<span class="string">路径</span>&#125; <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-&#123;图标名称&#125;</span></span><br><span class="line"> <span class="string">...</span></span><br></pre></td></tr></table></figure><p>图标用的是 <a href="https://fontawesome.com/v5/search">Font Awesome</a> 的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202172331617.png" alt=""></p><p>注意：因为 JsDelivrCND 在国内寄了，故这些图标是在国内是没法正常显示的，需要在主题配置文件的最底下把 CDN 全部改成本地</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CDN</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work</span></span><br><span class="line"><span class="comment"># 非必要請不要修改</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="comment"># The CDN provider of internal scripts (主題內部 js 的 cdn 配置)</span></span><br><span class="line">  <span class="comment"># option: local/jsdelivr</span></span><br><span class="line">  <span class="comment"># Dev version cannot choose jsdelivr (dev版的主題不能設置為 jsdelivr)</span></span><br><span class="line">  <span class="attr">internal_provider:</span> <span class="string">local</span></span><br><span class="line">  <span class="comment"># The CDN provider of third party scripts (第三方 js 的 cdn 配置)</span></span><br><span class="line">  <span class="comment"># option: local/jsdelivr</span></span><br><span class="line">  <span class="comment"># when set it to local, you need to install hexo-butterfly-extjs</span></span><br><span class="line">  <span class="attr">third_party_provider:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206182144265.png" alt="image-20220618214441155"></p><p>并且按照提示还要安装 <code>hexo-butterfly-extjs</code> 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-extjs</span><br></pre></td></tr></table></figure><p>提示：如果你没有两个 local ，请升级主题版本</p><h2 id="VSearch-搜索">VSearch (搜索)</h2><blockquote><p>如果配置完后无法正常使用，请尝试运行<code>hexo clean</code></p></blockquote><p>先安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>修改配置文件，启用下面的<code>local_search</code>就可以了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search (搜索)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Algolia search</span></span><br><span class="line"><span class="attr">algolia_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202181731910.png" alt=""></p><p>导航菜单的搜索按钮已可以使用</p><h2 id="Image-图片设置">Image (图片设置)</h2><p>设置头像和各种背景，注释可以说是非常详尽了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Image (圖片設置)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Favicon（網站圖標）</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/favicon.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable all banner image</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202230023824.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202230023069.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of archive page</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202230023069.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of tag page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> tag page, not tags page (子標籤頁面的 top_img)</span></span><br><span class="line"><span class="attr">tag_img:</span> <span class="string">https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202230023069.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of tag page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - tag name: xxxxx</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of category page not setting, it will show the top_img</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> category page, not categories page (子分類頁面的 top_img)</span></span><br><span class="line"><span class="attr">category_img:</span> <span class="string">https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202230023069.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The banner image of category page</span></span><br><span class="line"><span class="comment"># format:</span></span><br><span class="line"><span class="comment">#  - category name: xxxxx</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># the position of cover in home page (封面顯示的位置)</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  <span class="attr">default_cover:</span> <span class="string">https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202230023069.jpg</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment"># Replace Broken Images (替換無法顯示的圖片)</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">/img/friend_404.gif</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;Page Not Found&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># Home Page</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">false</span> <span class="comment"># true or false 主頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章頁日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br></pre></td></tr></table></figure><h2 id="Background-effects-背景特效">Background effects (背景特效)</h2><p>这里算是官方美化了，项目有很多，我只设置了几个</p><h3 id="静止彩带背景">静止彩带背景</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># canvas_ribbon (靜止彩帶背景)</span></span><br><span class="line"><span class="comment"># See: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="默认暗黑模式">默认暗黑模式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default display mode (網站默認的顯示模式)</span></span><br><span class="line"><span class="comment"># light (default) / dark</span></span><br><span class="line"><span class="attr">display_mode:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><h3 id="首页循环打字">首页循环打字</h3><p>这个要往下翻，找到<code>subtitle</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體） https://api.btstu.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果有英文逗號&#x27; , &#x27;,請使用轉義字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文雙引號&#x27; &quot; &#x27;,請使用轉義字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">今日事&amp;#44;今日毕</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Never</span> <span class="string">put</span> <span class="string">off</span> <span class="string">till</span> <span class="string">tomorrow</span> <span class="string">what</span> <span class="string">you</span> <span class="string">can</span> <span class="string">do</span> <span class="string">today</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">折腾就是快乐</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Suffering</span> <span class="string">is</span> <span class="string">happiness</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">人之忌&amp;#44;在好为人师</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">The</span> <span class="string">taboo</span> <span class="string">of</span> <span class="string">a</span> <span class="string">person</span> <span class="string">is</span> <span class="string">liking</span> <span class="string">to</span> <span class="string">be</span> <span class="string">others</span> <span class="string">teacher</span></span><br></pre></td></tr></table></figure><h1 id="个人美化">个人美化</h1><blockquote><p>本节内容源于 <a href="https://tzy1997.com/articles/hexo541u/">Hexo+Butterfly主题美化 | 唐先森の博客</a>，墙裂建议阅读原文</p></blockquote><h2 id="新建文件">新建文件</h2><p>现在需要添加自己的 css 和 js 文件来美化</p><p>在<code>themes\butterfly\source\js</code>中创建<code>my.js</code>，在<code>themes\butterfly\source\css</code>中创建<code>my.styl</code>（<code>styl</code>编译之后就成了<code>css</code>）</p><p>以后自己的<code>js</code>和<code>css</code>就统一加在这里了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202181750776.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202181751626.png" alt=""></p><h2 id="引用文件">引用文件</h2><p>回到主题配置文件，搜索找到下方的片段，加上自己的文件链接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span></span><br><span class="line"><span class="comment"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">data-pjax</span> <span class="string">defer</span> <span class="string">src=&quot;/js/my.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="我的配置">我的配置</h2><p>下面是我的配置，上面的原文里可以找到更多美化代码</p><p><code>my.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  主页面气泡</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: tzy1997</span></span><br><span class="line"><span class="comment"> * @Date: 2020-12-15 20:55:25</span></span><br><span class="line"><span class="comment"> * @LastEditors: tzy1997</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2021-01-12 19:02:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 气泡</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bubble</span>(<span class="params"></span>) &#123;</span><br><span class="line">        $(<span class="string">&#x27;#page-header&#x27;</span>).<span class="title function_">circleMagic</span>(&#123;</span><br><span class="line">            <span class="attr">radius</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">density</span>: <span class="number">.2</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;rgba(255,255,255,.4)&#x27;</span>,</span><br><span class="line">            <span class="attr">clearOffset</span>: <span class="number">0.99</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;! <span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">        p.<span class="property">fn</span>.<span class="property">circleMagic</span> = <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> o, a, n, r, e = !<span class="number">0</span>,</span><br><span class="line">                i = [],</span><br><span class="line">                d = p.<span class="title function_">extend</span>(&#123; <span class="attr">color</span>: <span class="string">&quot;rgba(255,0,0,.5)&quot;</span>, <span class="attr">radius</span>: <span class="number">10</span>, <span class="attr">density</span>: <span class="number">.3</span>, <span class="attr">clearOffset</span>: <span class="number">.2</span> &#125;, t),</span><br><span class="line">                l = <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; e = !(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> &gt; a) &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">s</span>(<span class="params"></span>) &#123; o = l.<span class="property">clientWidth</span>, a = l.<span class="property">clientHeight</span>, l.<span class="property">height</span> = a + <span class="string">&quot;px&quot;</span>, n.<span class="property">width</span> = o, n.<span class="property">height</span> = a &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">h</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> r.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, o, a), i) i[t].<span class="title function_">draw</span>();</span><br><span class="line">                <span class="title function_">requestAnimationFrame</span>(h)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> t = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params"></span>) &#123; t.<span class="property">pos</span>.<span class="property">x</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * o, t.<span class="property">pos</span>.<span class="property">y</span> = a + <span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>(), t.<span class="property">alpha</span> = <span class="number">.1</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * d.<span class="property">clearOffset</span>, t.<span class="property">scale</span> = <span class="number">.1</span> + <span class="number">.3</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>(), t.<span class="property">speed</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>(), <span class="string">&quot;random&quot;</span> === d.<span class="property">color</span> ? t.<span class="property">color</span> = <span class="string">&quot;rgba(&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">255</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;, &quot;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">0</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;, &quot;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">0</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="string">&quot;, &quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toPrecision</span>(<span class="number">2</span>) + <span class="string">&quot;)&quot;</span> : t.<span class="property">color</span> = d.<span class="property">color</span> &#125;</span><br><span class="line">                t.<span class="property">pos</span> = &#123;&#125;, <span class="title function_">e</span>(), <span class="variable language_">this</span>.<span class="property">draw</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; t.<span class="property">alpha</span> &lt;= <span class="number">0</span> &amp;&amp; <span class="title function_">e</span>(), t.<span class="property">pos</span>.<span class="property">y</span> -= t.<span class="property">speed</span>, t.<span class="property">alpha</span> -= <span class="number">5e-4</span>, r.<span class="title function_">beginPath</span>(), r.<span class="title function_">arc</span>(t.<span class="property">pos</span>.<span class="property">x</span>, t.<span class="property">pos</span>.<span class="property">y</span>, t.<span class="property">scale</span> * d.<span class="property">radius</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, !<span class="number">1</span>), r.<span class="property">fillStyle</span> = t.<span class="property">color</span>, r.<span class="title function_">fill</span>(), r.<span class="title function_">closePath</span>() &#125;</span><br><span class="line">            &#125;! <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                o = l.<span class="property">offsetWidth</span>, a = l.<span class="property">offsetHeight</span>,</span><br><span class="line">                    <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> t = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">                        t.<span class="property">id</span> = <span class="string">&quot;canvas&quot;</span>, t.<span class="property">style</span>.<span class="property">top</span> = <span class="number">0</span>, t.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="number">0</span>, t.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&quot;absolute&quot;</span>, l.<span class="title function_">appendChild</span>(t), t.<span class="property">parentElement</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&quot;hidden&quot;</span></span><br><span class="line">                    &#125;(), (n = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>)).<span class="property">width</span> = o, n.<span class="property">height</span> = a, r = n.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="number">0</span>; t &lt; o * d.<span class="property">density</span>; t++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> e = <span class="keyword">new</span> f;</span><br><span class="line">                    i.<span class="title function_">push</span>(e)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">h</span>()</span><br><span class="line">            &#125;(), <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, c, !<span class="number">1</span>), <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, s, !<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(jQuery);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用气泡方法</span></span><br><span class="line">    <span class="title function_">bubble</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------</span></span><br><span class="line"><span class="comment">// 手机侧边栏默认不展开 </span></span><br><span class="line"><span class="keyword">var</span> mobile_sidebar_menus = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sidebar-menus&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (mobile_sidebar_menus) &#123;</span><br><span class="line">    <span class="keyword">var</span> menus_item_child = mobile_sidebar_menus.<span class="title function_">getElementsByClassName</span>(</span><br><span class="line">        <span class="string">&quot;menus_item_child&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">var</span> menus_expand = mobile_sidebar_menus.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;expand&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; menus_item_child.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        menus_item_child[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>my.styl</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ----我添加的----</span></span><br><span class="line"><span class="comment">// 修改字体 -------------------------------------------------------</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;tzy&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">    <span class="attribute">src</span>: url(<span class="string">&#x27;https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/ZhuZiAWan.woff2&#x27;</span>);</span><br><span class="line">    <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-class">.gitcalendar</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: tzy <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部优化 -------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.categoryBar-list</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clock-row</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*3s为加载动画的时间，1为加载动画的次数，ease-in-out为动画效果*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-header</span>,</span><br><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">animation</span>: imgblur <span class="number">2s</span> <span class="number">1</span> ease-in-out;</span><br><span class="line">    <span class="attribute">animation</span>: imgblur <span class="number">2s</span> <span class="number">1</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> imgblur &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: blur(<span class="number">5px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: blur(<span class="number">0px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*适配使用-webkit内核的浏览器 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> imgblur &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">filter</span>: blur(<span class="number">5px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">filter</span>: blur(<span class="number">0px</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.table-wrap</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: .<span class="number">6rem</span> auto .<span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标签外挂 网站卡片 start */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-card-group</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto .<span class="number">1rem</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-card-group</span> <span class="selector-class">.info</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.site-card-group</span> <span class="selector-class">.site-card</span> <span class="selector-class">.info</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f0f0f0</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span> <span class="selector-class">.site-card-group</span> <span class="selector-class">.site-card</span> <span class="selector-class">.info</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-card-group</span> <span class="selector-class">.info</span> <span class="selector-class">.desc</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码块颜色 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.highlight</span> pre <span class="selector-class">.addition</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00bf03</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』screen 命令用法</title>
      <link href="/2022/02/15/%E3%80%8ELinux%E3%80%8Fscreen-%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/"/>
      <url>/2022/02/15/%E3%80%8ELinux%E3%80%8Fscreen-%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Why">Why</h1><p>也许你遇到过使用<code>telnet</code>或<code>SSH</code>远程登录<code>linux</code>,运行一些程序。如果这些程序需要运行很长时间(几个小时)，而程序运行过程中出现网络故障，或者客户机故障，这时候客户机与远程服务器的链接将终端，并且远程服务器没有正常结束的命令将被迫终止。</p><p>又比如你<code>SSH</code>到主机上后，开始批量的<code>scp</code>命令，如果这个<code>ssh</code>线程断线了，<code>scp</code>进程就中断了。在远程服务器上正在运行某些耗时的作业，但是工作还没做完快要下班了，退出的话就会中断操作了，如何才好呢？</p><hr><h1 id="What">What</h1><p><code>GNU Screen</code>是一款由<code>GNU</code>计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。</p><p><code>GNU Screen</code>可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p><ul><li><p>会话恢复</p><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。</p></li><li><p>多窗口</p><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。</p></li><li><p>会话共享</p><p>Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p></li></ul><hr><h1 id="How">How</h1><h2 id="先安装">先安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install screen</span><br></pre></td></tr></table></figure><h2 id="常用指令">常用指令</h2><ul><li><p>创建一个<code>screen</code>会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen</span><br></pre></td></tr></table></figure></li><li><p>创建会话时给一个名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>离开当前会话（在会话内）</p><kbd>Ctrl</kbd> +  <kbd>A</kbd> 再按下  <kbd>D</kbd></li><li><p>列出所有会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -<span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li><li><p>连接一个会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -r <span class="variable">$&#123;能匹配上作业编号或内容的字段&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>强制连接会话（已经有人连接了，或上次连接时没有正常退出）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -rd <span class="variable">$&#123;能匹配上作业编号或内容的字段&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在外部发送指令到会话内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -x -S <span class="variable">$&#123;能匹配上作业编号或内容的字段&#125;</span> -p 0 -X stuff <span class="string">&quot;你想输入的指令&quot;</span></span><br><span class="line">screen -x -S <span class="variable">$&#123;能匹配上作业编号或内容的字段&#125;</span> -p 0 -X stuff $<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>删除所有会话</p><p>我一般直接<code>sudo reboot</code>完事 😂</p></li></ul><hr><p>参考资料：</p><ul><li><a href="https://www.runoob.com/linux/linux-comm-screen.html">Linux screen命令 | 菜鸟教程</a></li><li><a href="http://linux.51yip.com/search/screen">screen linux 命令 在线中文手册</a></li><li><a href="https://blog.csdn.net/u011606714/article/details/53471532">用bash脚本创建screen并向其发送命令。_冷江-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（二）部署至个人站点或 GitHub Pages</title>
      <link href="/2022/02/14/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E9%83%A8%E7%BD%B2%E8%87%B3%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%E6%88%96-GithubPages/"/>
      <url>/2022/02/14/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E9%83%A8%E7%BD%B2%E8%87%B3%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%E6%88%96-GithubPages/</url>
      
        <content type="html"><![CDATA[<p>现在我们需要把静态文件上传到公网上，让所有人都能访问</p><p>打开<code>_config.yml</code>，拉到最底下，找到<code># Deployment</code>那一块，现在我们需要配置这里</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141122786.png" alt=""></p><p>按照<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">官方文档</a>有很多种方法，一般情况下只用得着两种：<code>SFTP</code>和<code>Git</code></p><p><code>SFTP</code>推送至个人服务器是付费方案，<code>Git</code>推送至<code>GitHub</code>是免费方案</p><h1 id="法一：SFTP">法一：SFTP</h1><p>租过个人服务器的都是有<code>Linux</code>经验的，这里我就简单点说</p><h2 id="安装Web服务器">安装<code>Web</code>服务器</h2><p>一般用<code>Nginx</code>或者<code>Apache</code>就行，这里以<code>Nginx</code>为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h2 id="配置本地文件">配置本地文件</h2><p>先安装<code>hexo-deployer-sftp</code>依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-sftp --save</span><br></pre></td></tr></table></figure><p>查阅<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html#SFTP">官方文档</a>来配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">sftp</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&lt;host&gt;</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">&lt;user&gt;</span></span><br><span class="line">  <span class="attr">pass:</span> <span class="string">&lt;password&gt;</span></span><br><span class="line">  <span class="attr">remotePath:</span> [<span class="string">remote</span> <span class="string">path</span>]</span><br><span class="line">  <span class="attr">port:</span> [<span class="string">port</span>]</span><br><span class="line">  <span class="attr">privateKey:</span> [<span class="string">path/to/privateKey</span>]</span><br><span class="line">  <span class="attr">passphrase:</span> [<span class="string">passphrase</span>]</span><br><span class="line">  <span class="attr">agent:</span> [<span class="string">path/to/agent/socket</span>]</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th><th style="text-align:left">默认值</th></tr></thead><tbody><tr><td style="text-align:left">host</td><td style="text-align:left">远程主机的地址</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">user</td><td style="text-align:left">使用者名称</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">pass</td><td style="text-align:left">密码</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">remotePath</td><td style="text-align:left">远程主机的根目录</td><td style="text-align:left">/</td></tr><tr><td style="text-align:left">port</td><td style="text-align:left">端口</td><td style="text-align:left">22</td></tr><tr><td style="text-align:left">privateKey</td><td style="text-align:left">ssh私钥的目录地址</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">passphrase</td><td style="text-align:left">（可省略）ssh私钥的密码短语</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">agent</td><td style="text-align:left">ssh套接字的目录地址</td><td style="text-align:left">$SSH_AUTH_SOCK</td></tr></tbody></table><p>如果是用私钥的我就不说了，如果是只用账户和密码的需要注意下，密码是需要用双引号括起来的，否则无法部署</p><p>例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">sftp</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">xxx.xxx.xxx.xxx</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">pass:</span> <span class="string">&quot;yourpassword&quot;</span></span><br><span class="line">  <span class="attr">remotePath:</span> <span class="string">/var/www/html</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><p>保存好之后，执行下面的命令，看看能不能成功部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h1 id="法二：GitHub-Pages">法二：GitHub Pages</h1><h2 id="首先安装-git">首先安装 git</h2><p>前往 <a href="https://git-scm.com/download/win">git 官网</a> 下载并安装<code>git</code>，或者使用 <a href="https://wwd.lanzoup.com/iHSWh00236cj">网盘链接</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141050457.png" alt=""></p><h2 id="注册-GitHub-账号并创建个人仓库">注册 GitHub 账号并创建个人仓库</h2><blockquote><p>由于众所周知的原因，建议使用魔法上网</p></blockquote><p>登录 <a href="https://github.com/">https://github.com</a> 注册账号，点击<code>右上角的加号</code>-&gt;<code>New repository</code>来新建仓库</p><p>仓库名称为<code>你的用户名.github.io</code>，如<code>NOTSPROG.github.io</code>，下方的<code>Add a README file</code>记得勾上</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141136494.png" alt=""></p><h2 id="生成-SSH-密钥">生成 SSH 密钥</h2><p>在<code>CMD</code>中使用<code>ssh-keygen</code>生成密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>然后根据提示一路填下去就行</p><p>之后打开你的用户目录，进入里面的<code>.ssh</code>文件夹，会发现有<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）两个文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141205918.png" alt=""></p><h2 id="将公钥添加到-GitHub">将公钥添加到 GitHub</h2><p>打开<a href="https://github.com/">GitHub</a>，点击右上角<code>头像</code>-&gt;<code>Setting</code>-&gt;左侧 <code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>，或者点击<a href="https://github.com/settings/ssh/new">此链接</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141210536.png" alt=""></p><p>用记事本打开<code>id_rsa.pub</code>，把里面的内容复制进去，然后随便取一个<code>title</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141218024.png" alt=""></p><h2 id="配置本地文件并部署">配置本地文件并部署</h2><p>首先安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后修改<code>_config.yml</code>，<code>repository</code>就填你的仓库地址，分支选择<code>main</code></p><p>例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/NOTSPROG/NOTSPROG.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>保存好之后，执行下面的命令，看看能不能成功部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>每次在本地推送完后，还要等待<code>GitHub</code>反应过来部署到他家的服务器上</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203061456877.png" alt=""></p><p>完成之后在浏览器中访问<code>你的用户名.github.io</code>，看看能不能看见你的网页（当然，我这里已经配置了<code>butterfly</code>主题）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202141236760.png" alt=""></p><details class="toggle" ><summary class="toggle-button" style="">前车之鉴</summary><div class="toggle-content"><ul><li><p>部署至<code>GitHub</code>不能太过频繁，否则会造成<code>443</code>错误并被锁定一段时间</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203061835162.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203061834617.png" alt=""></p></li><li><p>尽量不要挂着梯子部署，不然会有以下错误</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203061841807.png" alt=""></p></li></ul></div></details><h2 id="配置自定义域名（可选）">配置自定义域名（可选）</h2><p>如果你觉得<code>你的用户名.github.io</code>这个用户名不够高级，那么你可以自己去<a href="https://wanwang.aliyun.com/domain">阿里云</a>、<a href="https://dnspod.cloud.tencent.com/">腾讯云</a>之类的地方租一个域名</p><p>当然，这是要花钱的，不过廉价的域名也还算便宜，我的域名花了大概200块就租了10年</p><p>打开解析域名的界面，添加<code>CNAME</code>记录，全部指向你的<code>GitHub Pages</code>域名</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072103703.png" alt=""></p><p>然后打开你的<code>Github</code>仓库-&gt;<code>Settings</code>-&gt;<code>Pges</code>，在下方的<code>Custom domain</code>填上你的域名并保存</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072104881.png" alt=""></p><p>之后你会发现根目录下有一个<code>CNAME</code>文件，内容是你的域名</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072107512.jpg" alt=""></p><p>但是当你在本地<code>hexo d</code>的时候，<code>Github</code>上的<code>CNAME</code>就会消失（因为你本地没有这个文件）</p><p>所以我们在本地也需要创建一个<code>CNAME</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072112809.jpg" alt=""></p><p>再生成、部署一次，<code>CNAME</code>应该还是在的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>等<code>Github</code>的反应完之后，用的就是你的自定义域名了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072118241.jpg" alt=""></p><h1 id="安装-SSL-证书">安装 SSL 证书</h1><p>没有安装<code>SSL</code>证书时，你的网站使用的是<code>HTTP</code>协议，连接没有加密，会显示为<code>不安全</code></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072121074.jpg" alt=""></p><p>而安装了<code>SSL</code>证书之后，网站使用的就是<code>HTTPS</code>协议，连接会被加密，图标会变成一把锁</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072124957.jpg" alt=""></p><p>我之前嫌麻烦，一直懒得配置SSL证书~~（又不是不能用）~~</p><p>但是每当同学看我的博客的时候，都会有人问我：</p><p>“你这博客为什么不安全啊？”</p><p>我晕…每次都要解释一句，这是连接不安全，又不是我的网站不安全</p><p>但是最后为了面子还是去弄了一个，总结教程如下：</p><ul><li><p>使用个人站点的话请移步<a href="/2022/02/28/%E3%80%8ELinux%E3%80%8FNginx-%E9%85%8D%E7%BD%AE-SSL-%E8%AF%81%E4%B9%A6/">『Linux』Nginx 配置 SSL 证书</a></p></li><li><p>如果是<code>Github Page</code>的话，勾选下面的<code>Enforce HTTPS</code> 就可以了，<code>GitHub</code>过一会儿会给你弄好的</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072137309.jpg" alt=""></p></li></ul><h1 id="添加你的网站地址">添加你的网站地址</h1><p>部署到个人站点或者<code>Github Pages</code>后，就可以在<code>_config.yml</code>中正大光明地写上你的网站地址了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202203072134543.jpg" alt=""></p><p><a href="/2022/02/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89Butterfly-%E4%B8%BB%E9%A2%98/">下一篇</a>，将讲述如何配置并美化<code>butterfly</code>主题</p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（一）Hexo 框架</title>
      <link href="/2022/02/13/Hexo%20+%20Butterfly%20%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89Hexo-%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/02/13/Hexo%20+%20Butterfly%20%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89Hexo-%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="先安装-Node-js">先安装 Node.js</h1><p>因为<code>Hexo</code>依赖于<code>Node.js</code>运行，所以我们需要先安装<code>Node.js</code></p><p>前往<a href="https://nodejs.org/zh-cn/">官网</a>下载安装长期维护版即可，如果使用最新版本的软件时出现问题，可以尝试<a href="https://wwd.lanzoup.com/idrDk001ga0d">我使用的版本</a></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032142235.png" alt=""></p><p>安装完成后，按下 <kbd>Windows</kbd> + <kbd>R</kbd> 打开运行，输入<code>CMD</code>并回车，打开命令提示符</p><p>依次输入下面的命令查询版本号，如果能查询到版本号，那么就算安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206032142698.png" alt=""></p><h1 id="安装-Hexo">安装 Hexo</h1><p>现在可以安装<code>Hexo</code>了，使用下面的命令来安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>可能会出现几个报错，可以忽略</p><p>老规矩，查一下版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202132039187.png" alt=""></p><p>这样<code>Hexo</code>就算是安装完了</p><h1 id="初始化博客目录">初始化博客目录</h1><p>现在需要准备一个目录来存放你的博客文件，例如我使用<code>D:\Hexo</code>，然后需要在命令行中使用<code>cd</code>移动至这个目录，如果不在C盘，则还需要加上<code>/d</code>参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /d D:/Hexo</span><br></pre></td></tr></table></figure><p>在这个目录下使用<code>hexo init 你的博客名字</code>初始化你的博客目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init MyBlog</span><br></pre></td></tr></table></figure><p>在我的例子中，现在<code>D:/Hexo/MyBlog</code>就是<code>博客目录</code>了，此后执行<code>Hexo</code>命令时默认在此目录中执行，现在切进去安装依赖，并初始<code>public</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ./MyBlog</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>打开这个目录，可以看见已经初始化了一些文件，挑几个重点的说</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202132122683.png" alt=""></p><ul><li><code>source</code>：页面与文章目录，内部的<code>_posts</code>文件夹里存放着你的文章（你会发现里面已经有了一个<code>hello-world.md</code>）</li><li><code>themes</code>：主题目录</li><li><code>public</code>：存放生成的静态网页，部署就是把里面的内容复制到云端</li><li><code>_config.yml</code>：<strong>此博客的配置文件</strong>（注意不要和之后的<strong>主题配置文件</strong>搞混）</li></ul><h1 id="试运行">试运行</h1><p>输入<code>hexo s</code>启动<code>hexo</code>自带的网页服务器，再在浏览器中打开 <a href="http://localhost:4000">http://localhost:4000</a> 预览页面效果</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202132140504.png" alt=""></p><p>成功了！</p><p>按下<kbd>Ctrl</kbd> + <kbd>C</kbd> 以停止</p><p>现在了解几个<code>Hexo</code>命令</p><ul><li><code>hexo generate</code>：在<code>public</code>目录中生成静态网页文件</li><li><code>hexo clean</code>：清空缓存和<code>public</code>目录，遇到一些问题时可以尝试运行此命令</li><li><code>hexo server</code>：启动预览服务器（实时更新，刷新网页即可）</li><li><code>hexo deploy</code>：从<code>_config.yml</code>中读取设置部署至远程站点，详情等到下一篇讲</li><li><code>hexo new &quot;My New Post&quot;</code>：在<code>./source/_posts</code>中创建新文章，引号内写标题，也可以选择不使用此命令自己手动新建文件</li></ul><p>在上面的命令中，<code>generate</code>、<code>clean</code>等单词可以只写首字母，而一般生成文件和部署是连一起操作的，所以一般就只需要记下面两个</p><p>启动实时预览：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>生成文件并且部署至远程站点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>在命令行中可以使用方向键<kbd>↑</kbd> <kbd>↓</kbd> 来切换到最近执行的命令，这样修改、预览、再修改就变得十分方便</p><h1 id="配置网站信息">配置网站信息</h1><p>打开<code>_config.yml</code>，现在需要配置一些基本的网站信息，也就是开头的<code># Site</code>中的内容</p><ul><li><p><code>title</code>：博客标题</p></li><li><p><code>subtitle</code>：副标题，可以不填</p></li><li><p><code>description</code>：描述，会在作者栏的下面显示</p></li><li><p><code>keywords</code>：关键词</p></li><li><p><code>author</code>：作者名称</p></li><li><p><code>language</code>：语言</p></li><li><p><code>timezone</code>：时区</p></li></ul><p>例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">NX</span> <span class="string">の</span> <span class="string">博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;折腾就是快乐&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Nick</span> <span class="string">Xu</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br></pre></td></tr></table></figure><p>PS：<a href="https://hexo.io/zh-cn/docs/configuration.html">_config.yml官方文档</a></p><p>下一篇将讲述如何部署到远程站点，使其他人也能访问到你的博客网站</p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Butterfly 建站指南（〇）前言</title>
      <link href="/2022/02/13/Hexo%20+%20Butterfly%20%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/"/>
      <url>/2022/02/13/Hexo%20+%20Butterfly%20%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202202231717952.jpg" alt=""></p><blockquote><p>恭喜你发现了宝藏！🎉🎉🎉</p></blockquote><p>本系列是这个博客网站的搭建教程，个人的踩坑经历也会一并记录</p><p>因为需要面向小白，所以很多地方会讲的比较细碎</p><p>这个博客系统的运作流程是：在<strong>本地</strong>安装配置<code>Hexo框架</code> + <code>Butterfly主题</code> ，然后根据<code>Markdown文档</code>生成静态文件，再推送至云端，公网上只需要一个网页服务器就行</p><h1 id="目录">目录</h1><ul><li><a href="/2022/02/13/Hexo%20+%20Butterfly%20%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E3%80%87%EF%BC%89%E5%89%8D%E8%A8%80/">Hexo + Butterfly 建站指南（〇）前言</a></li><li><a href="/2022/02/13/Hexo%20+%20Butterfly%20%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89Hexo-%E6%A1%86%E6%9E%B6/">Hexo + Butterfly 建站指南（一）Hexo 框架</a></li><li><a href="/2022/02/14/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%8C%EF%BC%89%E9%83%A8%E7%BD%B2%E8%87%B3%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%E6%88%96-GithubPages/">Hexo + Butterfly 建站指南（二）部署至个人站点或 GitHub Pages</a></li><li><a href="/2022/02/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%89%EF%BC%89Butterfly-%E4%B8%BB%E9%A2%98/">Hexo + Butterfly 建站指南（三）Butterfly 主题</a></li><li><a href="/2022/02/19/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%9B%9B%EF%BC%89Twikoo-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">Hexo + Butterfly 建站指南（四）Twikoo 评论系统</a></li><li><a href="/2022/02/20/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E6%97%A5%E5%B8%B8%E5%86%99%E4%BD%9C/">Hexo + Butterfly 建站指南（五）日常写作</a></li><li><a href="/2022/02/23/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AD%EF%BC%89PicGO-+-Gitee-%E5%9B%BE%E5%BA%8A/"><s>Hexo + Butterfly 建站指南（六）PicGO + Gitee 图床（已废弃）</s></a></li><li><a href="/2022/03/28/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%83%EF%BC%89%E9%98%BF%E9%87%8C%E4%BA%91-OSS-%E5%9B%BE%E5%BA%8A/">Hexo + Butterfly 建站指南（七）阿里云 OSS 图床</a></li><li><a href="/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">Hexo + Butterfly 建站指南（八）使用 KaTeX 数学公式</a></li></ul><h1 id="鸣谢">鸣谢</h1><ul><li><a href="https://hexo.io/zh-cn/">Hexo 官网</a></li><li><a href="https://butterfly.js.org/">Butterfly 主题官方文档</a></li><li><a href="https://tzy1997.com/articles/hexo541u/">Hexo+Butterfly主题美化 | 唐先森の博客</a>（这位是真大佬）</li><li><a href="https://blog.csdn.net/qq_40683225/article/details/105124810">PicGo+码云（gitee）图床环境搭建</a></li></ul><h1 id="如果你遇到了麻烦…">如果你遇到了麻烦…</h1><p>因为整个过程还是比较繁琐的，记忆里我连着折腾了几天才搭建好</p><p>如果你遇到了麻烦，可以直接在对应的页面留言评论，我会来回复，也可以选择直接联系我（联系方式请见<a href="/about/">关于</a>）</p><p>如果问题实在棘手，可以使用<a href="https://wwp.lanzouf.com/iJOeR06lx1tg">我的模板</a>，再在上面修改</p>]]></content>
      
      
      <categories>
          
          <category> Hexo + Butterfly 建站指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Linux』使用 ffmpeg 下载 m3u8 视频</title>
      <link href="/2022/02/12/%E4%BD%BF%E7%94%A8ffmpeg%E4%B8%8B%E8%BD%BDm3u8%E8%A7%86%E9%A2%91/"/>
      <url>/2022/02/12/%E4%BD%BF%E7%94%A8ffmpeg%E4%B8%8B%E8%BD%BDm3u8%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>众所周知，很多视频都是<code>m3u8</code>格式的，我一般会用 <a href="https://wwd.lanzoup.com/imDi0zzqn7g">M3U8批量下载器 </a>下载，但有时候资源是外网的，梯子网速又有点慢，这时候就可以挂到外网的服务器上下载</p><p>这里我建议用<code>ffmpeg</code>，毕竟很多M3U8的下载工具都是用它封装的</p><h1 id="安装-2">安装</h1><p>可以选择去官网下载安装，但是我比较懒，直接用<code>apt</code>算了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure><p>老规矩，如果能查到版本号那就是安装成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1.png" alt=""></p><h1 id="使用">使用</h1><p>套下面这个模板即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i &lt;你的m3u8的URL&gt; -c copy &lt;保存的文件位置&gt;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i https://www.example.com/example.m3u8 -c copy ~/example.mp4</span><br></pre></td></tr></table></figure><h1 id="缺点">缺点</h1><ul><li>下载时间可能很长，如果关掉窗口就结束了进程，建议配合 <a href="/2022/02/15/%E3%80%8ELinux%E3%80%8Fscreen-%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95/">screen</a> 使用</li><li>下载是单线程的，效率比较低</li></ul>]]></content>
      
      
      <categories>
          
          <category> 新技能 Got </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』可变参数</title>
      <link href="/2022/02/07/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
      <url>/2022/02/07/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="从-scanf-和-printf-讲起">从 scanf() 和 printf() 讲起</h1><p>在使用 <code>scanf()</code> 和 <code>printf()</code> 时，你会发现一个奇怪的现象，它的参数个数是不确定的，格式化字符串中有多少个<code>%</code>，后面就要跟多少个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>,a,b,c);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>但在我们一般的印象中，一个函数在被声明时，它的参数个数就固定了，不能改变</p><p>让我们在 <code>stdio.h</code> 中找到 <code>scanf()</code> 的定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">scanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> __retval;</span><br><span class="line">  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );</span><br><span class="line">  __retval = __mingw_vfscanf( <span class="built_in">stdin</span>, __format, __local_argv );</span><br><span class="line">  __builtin_va_end( __local_argv );</span><br><span class="line">  <span class="keyword">return</span> __retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接受参数怎么有个省略号？还可以这样写吗？</p><p>这便牵扯到可变参数</p><h1 id="可变参数的头文件">可变参数的头文件</h1><p>我们在使用可变参数时，需要引入 <code>stdarg.h</code> 头文件</p><p>在 <code>stdarg.h</code> 中，有一个数据类型，四个宏</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">va_list</td><td style="text-align:left">用来保存宏va_arg与宏va_end所需信息</td></tr></tbody></table><table><thead><tr><th style="text-align:left">宏</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">va_start(va_list,省略号的前一个参数)</td><td style="text-align:left">使va_list指向起始的参数</td></tr><tr><td style="text-align:left">va_arg(va_list,参数类型)</td><td style="text-align:left">检索参数并返回</td></tr><tr><td style="text-align:left">va_end(va_list)</td><td style="text-align:left">释放va_list的内存空间</td></tr><tr><td style="text-align:left">va_copy(va_list, va_list)</td><td style="text-align:left">拷贝va_list的内容，va_copy(va2, va1)作用为拷贝va1到va2</td></tr></tbody></table><h1 id="如何使用">如何使用</h1><ol><li>定义一个函数，最后一个参数为省略号，省略号前面可以有任意个参数，但至少要有一个</li><li>声明一个 <code>va_list</code> 类型变量用于承载参数列表</li><li>使用 <code>va_start()</code> 初始化 <code>va_list</code></li><li>多次使用 <code>va_arg()</code> 依次获取参数列表里的值，每执行一次就返回一个参数（通过类型自动跳到下一个参数的位置）</li><li>使用宏 <code>va_end()</code> 来回收 <code>va_list</code> 变量</li></ol><p><strong>注意：没有机制可以确定省略号里一共传递了多少个参数，以及他们各自的数据类型（ <code>va_arg()</code> 会一直往后跳，即使已经超出了总参数的个数，它也不知道）</strong></p><p>为了解决这个问题，通常有三种方法</p><ul><li>在省略号前传入一个整型，表示后面参数的总数（总数变量法）</li><li>使用一个特定的标识符来确定参数的结尾，如传递一串 <code>int</code> ，并使用 <code>-1</code> 表示数据结束（标识符法）</li><li>在省略号前传入一个格式化字符串，通过字符串确定参数的数量以及各自的类型（格式化字符串法，类似 <code>scanf()</code> 和 <code>printf()</code> ）</li></ul><h1 id="样例-3">样例</h1><div class="tabs" id="样例"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#样例-1">总数变量法</button></li><li class="tab"><button type="button" data-href="#样例-2">标识符法</button></li><li class="tab"><button type="button" data-href="#样例-3">格式化字符串法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="样例-1"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> num, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    va_list <span class="built_in">list</span>; <span class="comment">//定义 va_list 类型变量</span></span><br><span class="line"></span><br><span class="line">    va_start(<span class="built_in">list</span>, num); <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">        sum += va_arg(<span class="built_in">list</span>, <span class="type">int</span>); <span class="comment">//依次获取参数</span></span><br><span class="line"></span><br><span class="line">    va_end(<span class="built_in">list</span>); <span class="comment">//回收变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum of 2, 3, 4, 5 = %d\n&quot;</span>, sum(<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// Sum of 2, 3, 4, 5 = 14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-2"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> tmp, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    va_list <span class="built_in">list</span>; <span class="comment">//定义 va_list 类型变量</span></span><br><span class="line"></span><br><span class="line">    va_start(<span class="built_in">list</span>, tmp); <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = tmp; i != <span class="number">-1</span>; i = va_arg(<span class="built_in">list</span>, <span class="type">int</span>))</span><br><span class="line">        sum += i; <span class="comment">//依次获取参数</span></span><br><span class="line"></span><br><span class="line">    va_end(<span class="built_in">list</span>); <span class="comment">//回收变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;output.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Sum of 2, 3, 4, 5 = %d\n&quot;</span>, sum(<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// Sum of 2, 3, 4, 5 = 14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="样例-3"><p><s>不想写</s>，评论区有大佬的话可以写一个</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>参考资料：</p><ul><li><a href="https://www.runoob.com/cprogramming/c-variable-arguments.html">C 可变参数 | 菜鸟教程</a></li><li><a href="https://baike.baidu.com/item/stdarg.h/10239382?fr=aladdin">stdarg.h_百度百科</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』结构体内存对齐问题</title>
      <link href="/2022/02/03/jie-gou-ti-nei-cun-dui-qi-wen-ti/"/>
      <url>/2022/02/03/jie-gou-ti-nei-cun-dui-qi-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="初始的问题">初始的问题</h1><p>先来看一个问题，对于下面这两个结构体，它们的大小是一样的吗？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">x</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">&#125; a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">y</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">&#125; b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="keyword">sizeof</span>(b));</span><br></pre></td></tr></table></figure><p>你可能认为它们是一样的，但实际上是不一样的，一个是24，另一个是16<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1643864490586.png" alt=""></p><p>也据说是：<strong>结构体的大小并不是简单地将每个结构体成员的大小相加就能得到</strong></p><h1 id="如何计算结构体大小">如何计算结构体大小</h1><p>首先我们要了解各种基本类型的大小</p><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">sizeof(Type)</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">long long</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">long double</td><td style="text-align:center">16</td></tr></tbody></table><h3 id="一般情况">一般情况</h3><ol><li><p>后声明的类型永远认为结构体是按照自己的类型来的（找当前类型大小的最小倍数位置存放）</p></li><li><p>整个结构体补全到最大类型的整数倍</p></li></ol><p><strong>在第一个例子中</strong></p><p>先声明了char类型，占用了1字节<br>然后声明int类型，他发现前4个字节有部分被占用了（无法使用），就跳过4个字节声明了自己，占用4字节<br>然后声明double类型，前8个字节有被占用，跳过8个字节声明自己，占用8字节</p><p>总计16字节，是8的倍数，所以结果为16</p><p><strong>在第二个例子中</strong></p><p>先声明char占用1字节<br>然后声明double，前8字节被占用，跳过前8字节声明自己，占用8字节<br>最后int占4字节</p><p>总计20字节，不是8的倍数，补到24</p><h3 id="设置了对齐数的情况">设置了对齐数的情况</h3><ol><li><p>每次都找<code>min(对齐数,类型大小)</code>的最小倍数位置存放</p></li><li><p>整个结构体补全到<code>min(对齐数,最大类型大小)</code>的整数倍</p></li></ol><p>很多文章中有<strong>默认对齐数</strong>这种说法，就是说对齐数默认是设置了的，并认为在Windows中为8，在Linux中为4</p><p>但在我用的 MinGW-W64-builds-4.3.5 中貌似没有这个东西，因为我的测试结果与<a href="https://blog.csdn.net/weixin_42678507/article/details/90109173">Linux gcc没有默认对齐数（内赋gcc官方大佬邮件）</a>中的相同</p><h2 id="如何设置对齐数">如何设置对齐数</h2><p>要设置编译器的对齐数，我们需要借助于以下预处理命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()</span></span><br></pre></td></tr></table></figure><p>如果在该预处理命令的括号内填上数字，那么对齐数将会被设置为对应数字</p><p>如果不在括号内填写数字，那么会恢复为未设置对齐数状态</p><p>对齐数只能为2的次幂</p><p><strong>嵌套结构体</strong></p><p>如果 A 嵌在 B 中，那么计算 B 的大小相当于计算把<code>引入 A 的那一行替换成 A 中的内容</code>的新结构体的大小</p><h1 id="最省空间策略（重要）">最省空间策略（重要）</h1><p><strong>先声明类型空间大的，再声明类型空间小的</strong></p><p>（数组看作是连续的多个声明）</p><p>当然，还可以使用<a href="https://mp.weixin.qq.com/s/QBCOT3xCHZnBEyc9ga2Acw">位域</a>，但这东西真的把我给看懵圈了😂</p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（五）路由分组和路由文件抽离</title>
      <link href="/2022/01/24/gin-ru-men-bi-ji-wu-lu-you-fen-zu-he-lu-you-wen-jian-chou-chi/"/>
      <url>/2022/01/24/gin-ru-men-bi-ji-wu-lu-you-fen-zu-he-lu-you-wen-jian-chou-chi/</url>
      
        <content type="html"><![CDATA[<p>在之前的方法中，配置路由、处理数据都在 main.go 文件中进行，当遇到稍大的项目时维护就会十分吃力，也难以团队协作，所以我们现在需要进行路由分组和文件抽离</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/news&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/admin&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;后台首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/admin/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;设置用户&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/admin/article&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;新闻列表&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//api 路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;我是一个api接口&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/api/userlist&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;我是一个api接口--userlist&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.GET(<span class="string">&quot;/api/plist&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;我是一个api接口--plist&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一、路由分组">一、路由分组</h1><p>以上面的代码为例，我们可以按照前台、后台和 api 接口三个模块来分组</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">defaultRouters := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/news&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">adminRouters := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;后台首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/user&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;设置用户&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">adminRouters.GET(<span class="string">&quot;/article&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;新闻列表&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//api 路由</span></span><br><span class="line">apiRouters := r.Group(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">apiRouters.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;我是一个api接口&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">apiRouters.GET(<span class="string">&quot;/userlist&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;我是一个api接口--userlist&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">apiRouters.GET(<span class="string">&quot;/plist&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;我是一个api接口--plist&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、路由文件抽离">二、路由文件抽离</h1><p>接下来继续抽离，把路由组抽离到其他文件中</p><p>新建<code>routers</code>文件夹，并依照3个路由组新建 go 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│  main.go</span><br><span class="line">│</span><br><span class="line">└─routers</span><br><span class="line">        adminRouters.go</span><br><span class="line">        apiRouters.go</span><br><span class="line">        defaultRouters.go</span><br></pre></td></tr></table></figure><p>文件内容以<code>defaultRouters.go</code>为例，注意函数开头大写，因为要在<code>main.go</code>中调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DefaultRoutersInit</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">defaultRouters := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;首页&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">defaultRouters.GET(<span class="string">&quot;/news&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，只需在<code>main.go</code>中调用 routers 包中的函数即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;test/routers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">//前台路由</span></span><br><span class="line">routers.DefaultRoutersInit(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">//后台路由</span></span><br><span class="line">routers.AdminRoutersInit(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">//api 路由</span></span><br><span class="line">routers.ApiRoutersInit(r)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1643085715217.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 切片（Slice）</title>
      <link href="/2022/01/24/go-qie-pian-slice/"/>
      <url>/2022/01/24/go-qie-pian-slice/</url>
      
        <content type="html"><![CDATA[<p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，容量（cap）不够时会自动扩容</p><p>切片为引用类型，从数组中得到的切片修改元素值时，原数组也会发生变化，修改原数组时，切片也会变化</p><h1 id="创建切片的四种方法">创建切片的四种方法</h1><ol><li>var</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">uint32</span></span><br></pre></td></tr></table></figure><p>2.切片字面量，这样创建的切片长度和容量都等于初始元素个数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="type">uint32</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>3.make<br>使用make创建，可以指定长度和容量。格式为<code>make([]type, len[, cap])</code>，可以只指定长度，也可以长度容量同时指定</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 := <span class="built_in">make</span>([]<span class="type">uint32</span>)</span><br><span class="line">s2 := <span class="built_in">make</span>([]<span class="type">uint32</span>, <span class="number">1</span>)</span><br><span class="line">s3 := <span class="built_in">make</span>([]<span class="type">uint32</span>, <span class="number">1</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>4，截取符，可以从现成的数组或切片创建</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>]<span class="type">uint32</span></span><br><span class="line">s1 := arr[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line">s2 := arr[:<span class="number">5</span>]</span><br><span class="line">s3 := arr[<span class="number">5</span>:]</span><br><span class="line">s4 := arr[:]</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1643030240825.jpg" alt=""></p><h1 id="二、添加元素">二、添加元素</h1><p>使用<code>append()</code>函数向切片中添加元素，可以一次添加 0 个或多个元素，如果容量不够会自动扩容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="type">uint32</span>, <span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// 3 4</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">// 6 8</span></span><br></pre></td></tr></table></figure><p>使用<code>copy()</code>将内容从一个数组切片复制到另一个数组切片。如果加入的两个数组切片不一样大，就会按其中较小的那个数组切片的元素个数进行复制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slice1 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; </span><br><span class="line">slice2 := []<span class="type">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(slice2, slice1) <span class="comment">// 只会复制slice1的前3个元素到slice2中 </span></span><br><span class="line"><span class="built_in">copy</span>(slice1, slice2) <span class="comment">// 只会复制slice2的3个元素到slice1的前3个位置</span></span><br></pre></td></tr></table></figure><h1 id="三、删除元素">三、删除元素</h1><p>截取需要的那部分再赋值回去就是删除</p><blockquote><p>PS:关于扩容的一个小问题<br>话说往切片增加元素时容量不够会自动扩容，那每次到底扩了多少呢？<br>还是有点复杂的，详情可以看<a href="https://www.jianshu.com/p/96db3f5c0b0e">这里</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 中的 &amp;T{...}、new(T)、make(T) 的区别</title>
      <link href="/2022/01/24/go-zhong-de-andtnewtmaket-de-qu-bie/"/>
      <url>/2022/01/24/go-zhong-de-andtnewtmaket-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-T-…">一、&amp;T{…}</h1><p><code>&amp;T&#123;...&#125;</code> 可以返回一个 T 类型指针，并且在括号指定初值，只能用于结构体</p><h1 id="二、new-T">二、new(T)</h1><p><code>new(T)</code>与<code>&amp;T&#123;...&#125;</code>基本相同，但不能指定初值（所以一般还是用<code>new(T)</code>），不过除了结构体还可以用于基本类型（如 int ）</p><h1 id="三、make-T">三、make(T)</h1><p><code>make(T)</code>用于创建 3 种内建的引用类型：切片、map 和 channel，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">10</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>这样分配一个有 50 个 int 值的数组，并且创建了一个长度为 10，容量为 50 的 切片 v，该 切片 指向数组的前 10 个元素</p><p>换言之，new 函数分配内存，make 函数初始化；下图给出了区别：<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1643027045737.png" alt=""></p><p>又或者，我们来看 buildin.go 中的注释：<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1643027576137.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（四）路由传值与动态路由</title>
      <link href="/2022/01/20/gin-ru-men-bi-ji-si-lu-you-chuan-zhi-yu-dong-tai-lu-you/"/>
      <url>/2022/01/20/gin-ru-men-bi-ji-si-lu-you-chuan-zhi-yu-dong-tai-lu-you/</url>
      
        <content type="html"><![CDATA[<h1 id="一、GET-请求传值">一、GET 请求传值</h1><p>GET请求就是在 URL 中携带的参数，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/?username=admin&amp;passwd=12345&amp;page=10</span><br></pre></td></tr></table></figure><p>就传递了<code>username</code>，<code>password</code>和<code>page</code>三个参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.Query(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">passwd := c.Query(<span class="string">&quot;passwd&quot;</span>)</span><br><span class="line">page := c.DefaultQuery(<span class="string">&quot;page&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;passwd&quot;</span>:   passwd,</span><br><span class="line"><span class="string">&quot;page&quot;</span>:     page,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用<code>c.Query()</code>接收数据，而使用<code>c.DefaultQuery()</code>还能指定默认值<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642663621929.png" alt=""></p><h1 id="二、POST-请求传值，获取-form-表单数据">二、POST 请求传值，获取 form 表单数据</h1><p>我们现在需要配置两个路由，其中<code>addUser.html</code>需要写模板创建一个表单并向<code>doAddUser.html</code>发送POST请求，而<code>doAddUser.html</code>则只需接收信息并打印出来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;doAddUser.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;addUser.html&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;addUser.html&quot;</span>, gin.H&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 传值</span></span><br><span class="line">r.POST(<span class="string">&quot;doAddUser.html&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">username := c.PostForm(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">password := c.PostForm(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">age := c.DefaultPostForm(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>: username,</span><br><span class="line"><span class="string">&quot;password&quot;</span>: password,</span><br><span class="line"><span class="string">&quot;age&quot;</span>:      age,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>与 GET 类似也有两个函数，使用<code>c.PostForm()</code>接收数据，而<code>c.DefaultPostForm()</code>能指定默认值<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642667753303.gif" alt=""></p><h1 id="三、动态路由传值">三、动态路由传值</h1><p>假设在<code>/user</code>目录下为每一个用户以 uid 分别提供页面，如<code>/user/1</code>、<code>/user/2</code>、<code>/user/3</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/user/:uid&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">uid := c.Param(<span class="string">&quot;uid&quot;</span>)</span><br><span class="line">c.String(http.StatusOK, <span class="string">&quot;这是第 %s 位用户的页面&quot;</span>, uid)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642664400041.png" alt=""></p><h1 id="四、解析-JSON-和-XML-数据">四、解析 JSON 和 XML 数据</h1><p>在 API 的开发中，我们经常会用到 JSON 或 XML 来作为数据交互的格式，这个时候我们<br>可以使用 GetRawData()+Unmarshal() 获取数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span>我是张三<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span> &#123;</span><br><span class="line">Title   <span class="type">string</span> <span class="string">`xml:&quot;title&quot; json:&quot;title&quot;`</span>  <span class="comment">// tag 不要忘</span></span><br><span class="line">Content <span class="type">string</span> <span class="string">`xml:&quot;content&quot; json:&quot;content&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;/xml&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">article := &amp;Article&#123;&#125;</span><br><span class="line">xmlSliceData, _ := c.GetRawData()</span><br><span class="line"><span class="comment">// GetRawData 返回的是切片，再用 Unmarshal 转换至结构体</span></span><br><span class="line"><span class="keyword">if</span> err := xml.Unmarshal(xmlSliceData, &amp;article); err == <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, article)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line"><span class="string">&quot;err&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642725726163.png" alt=""></p><h1 id="五、绑定数据到结构体">五、绑定数据到结构体</h1><p>更好的选择是使用基于请求的 Content-Type 识别请求数据类型并利用反射机制自动提取请求中QueryString、 form 表单、JSON、 XML等参数到结构体中</p><p>下面的示例代码演示了.ShouldBind()强大的功能，它能够基于请求自动提取JSON、form表单和QueryString型的数据，并把值绑定到指定的结构体对象</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`form:&quot;username&quot; json:&quot;user&quot;`</span>    <span class="comment">// tag 不要忘</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`form:&quot;password&quot; json:&quot;password&quot;`</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r.POST(<span class="string">&quot;doAddUser.html&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">user := &amp;UserInfo&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBind(&amp;user); err == <span class="literal">nil</span> &#123; <span class="comment">//解析到 user 结构体中</span></span><br><span class="line">c.JSON(http.StatusOK, user)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;err&quot;</span>: err.Error(),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642680691132.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（三）HTML 模板与静态文件服务</title>
      <link href="/2022/01/19/gin-ru-men-bi-ji-san-gin-mo-ban-ji-ben-yu-fa/"/>
      <url>/2022/01/19/gin-ru-men-bi-ji-san-gin-mo-ban-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-模板配置">一、 模板配置</h1><p>模板配置分为两种情况</p><h2 id="1-全部模板放在一个目录">1. 全部模板放在一个目录</h2><p>在 templates 里放置所有模板，再在 main.go 里使用<code>r.LoadHTMLGlob(&quot;templates/*&quot;)</code>即可</p><h2 id="2-模板放在不同目录">2. 模板放在不同目录</h2><p>这里以下面的结构为例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">│  <span class="keyword">go</span>.mod</span><br><span class="line">│  <span class="keyword">go</span>.sum</span><br><span class="line">│  main.<span class="keyword">go</span></span><br><span class="line">│</span><br><span class="line">└─templates</span><br><span class="line">    ├─back</span><br><span class="line">    │       index.html <span class="comment">//后端页面</span></span><br><span class="line">    └─front</span><br><span class="line">            index.html <span class="comment">//前端页面</span></span><br></pre></td></tr></table></figure><p>在前端页面的开头加上<code>&#123;&#123; define "front/index.html" &#125;&#125;</code>，并在结尾加上<code>&#123;&#123; end &#125;&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;front/index.html&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是前端<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p>后端类似</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;back/index.html&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是后端<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p>这相当与给模板起一个名称，<code>define</code> 和 <code>end</code> 是成对出现的</p><p>回到 main.go ，加载模板的语句要变化，使用两个星号表示一层目录，并分别配置前后端路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ** 表示一层目录</span></span><br><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/front&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;front/index.html&quot;</span>, gin.H&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/back&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;back/index.html&quot;</span>, gin.H&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642566060885.png" alt=""><br>当然，也可以选择用<code>r.LoadHTMLFiles()</code>来引用单个模板文件</p><h1 id="二、模板语法">二、模板语法</h1><p>有关模板的语法很多</p><h2 id="1、输出数据">1、输出数据</h2><p>模板语法都包含在<code>&#123;&#123;` 和`&#125;&#125; </code>中间，其中<code>&#123;&#123;.&#125;&#125;</code> 中的点表示当前对象</p><p>当我们传入一个结构体对象时，我们可以根据<code>.</code>来访问结构体对于的字段</p><p>例如，在 main.go 中创建一个 UserInfo 类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Gander <span class="type">string</span></span><br><span class="line">Age    <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前端页面中添加对应的字段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.user.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.user.Gander&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.user.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实例化一个 user ，并传递</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user := UserInfo&#123;</span><br><span class="line">Name:   <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">Gander: <span class="string">&quot;男&quot;</span>,</span><br><span class="line">Age:    <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/front&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;front/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>: user,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642576018548.png" alt=""></p><h2 id="2、解构结构体">2、解构结构体</h2><p>在上面，我们使用这一段</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.user.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.user.Gander&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.user.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 with 可以解构结构体，简化这一步骤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;with .user&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Gander&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;.Age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="3、注释">3、注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;/* a comment */&#125;&#125;</span><br></pre></td></tr></table></figure><p>注释不能嵌套，并且必须紧贴分界符始止</p><h2 id="4、变量">4、变量</h2><p>可以在模板中声明变量，来保存传入模板的数据或其他语句生成的结果，方法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;$t := .title&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;$t&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5、移除空格">5、移除空格</h2><p>有时候我们在使用模板语法是时候会不可避免地引入空格或换行符，这样模板最终渲染出来的内容可能就和我们想的不一样，这个时候就可以使用````去除模板内容右侧的所有空白符号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;- .Name -&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="6、比较大小">6、比较大小</h2><ul><li>eq 等于 ( == )</li><li>ne 不等于 ( != )</li><li>lt 小于 ( &lt; )</li><li>le 小于等于 ( &lt;= )</li><li>gt 大于 ( &gt; )</li><li>ge 大于等于 ( &gt;= )</li></ul><p><strong>注意，使用 <code>eq A B</code>来比较 <code>A</code> <code>B</code> 是否相等，而不是<code>A eq B</code></strong><br>比较大小常和下面的判断一起使用</p><h2 id="7、条件判断">7、条件判断</h2><ul><li>if-else-end 结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if  gt .score 60&#125;&#125;</span><br><span class="line">    及格</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    不及格</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li>if-else if-else-end 结构</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if gt .score 90&#125;&#125;</span><br><span class="line">    优秀</span><br><span class="line">&#123;&#123;else if gt .score 60&#125;&#125;</span><br><span class="line">    及格</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    不及格</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="8、遍历">8、遍历</h2><p>Go的模板语法中使用 range 关键字进行遍历，有以下两种写法，其中 obj 必须是数组、切片、字典或者通道</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;range $key,$value := .obj&#125;&#125;</span><br><span class="line">    &#123;&#123;$key&#125;&#125;:&#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;range $key,$value := .obj&#125;&#125;</span><br><span class="line">    &#123;&#123;$key&#125;&#125;:&#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">    没有数据</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果 obj 为空，则会返回&quot;没有数据&quot;</p><p>例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/front&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;front/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>:  user,</span><br><span class="line"><span class="string">&quot;hobby&quot;</span>: []<span class="type">string</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#123;&#123;<span class="keyword">range</span> $key,$value := .hobby&#125;&#125;</span><br><span class="line">    &#123;&#123;$key&#125;&#125;:&#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">    没有爱好</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642598716684.png" alt=""></p><h2 id="9、函数">9、函数</h2><p>函数有预定义的，还可以自行定义，但其实预定义的基本没什么用，所以一般都用自己定义的函数</p><ul><li><p>预定义函数<br><code>and</code><br>函数返回它的第一个 empty 参数或者最后一个参数；<br>就是说&quot;and x y&quot;等价于&quot;if x then y else x&quot;；所有参数都会执行；<br><code>or</code><br>返回第一个非 empty 参数或者最后一个参数；<br>亦即&quot;or x y&quot;等价于&quot;if x then x else y&quot;；所有参数都会执行；<br><code>not</code><br>返回它的单个参数的布尔值的否定<br><code>len</code><br>返回它的参数的整数类型长度<br><code>index</code><br>执行结果为第一个参数以剩下的参数为索引/键指向的值；<br>如&quot;index x 1 2 3&quot;返回 x[1][2][3]的值；每个被索引的主体必须是数组、切片或者字典。<br><code>print</code><br>即 fmt.Sprint<br><code>printf</code><br>即 fmt.Sprintf<br><code>println</code><br>即 fmt.Sprintln<br><code>html</code><br>返回与其参数的文本表示形式等效的转义 HTML。<br>这个函数在 html/template 中不可用。<br><code>urlquery</code><br>以适合嵌入到网址查询中的形式返回其参数的文本表示的转义值。<br>这个函数在 html/template 中不可用。<br><code>js</code><br>返回与其参数的文本表示形式等效的转义 JavaScript。<br><code>call</code><br>执行结果是调用第一个参数的返回值，该参数必须是函数类型，其余参数作为调用该函<br>数的参数；<br>如&quot;call .X.Y 1 2&quot;等价于 go 语言里的 dot.X.Y(1, 2)；<br>其中 Y 是函数类型的字段或者字典的值，或者其他类似情况；<br>call 的第一个参数的执行结果必须是函数类型的值（和预定义函数如 print 明显不同）；<br>该函数类型值必须有 1 到 2 个返回值，如果有 2 个则后一个必须是 error 接口类型；<br>如果有 2 个返回值的方法返回的 error 非 nil，模板执行会中断并返回给调用模板执行者<br>该错误；</p></li><li><p>自定义函数<br>例如，我们在后台有一个 UNIX 时间戳，希望在渲染模板时自动转换常用的时间格式</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/back&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;back/index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;date&quot;</span>:<span class="number">1642601992</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先需要自己在 main.go 里先写一个实现这一功能的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unix2Time</span><span class="params">(timestamp <span class="type">int</span>)</span></span><span class="type">string</span>&#123;</span><br><span class="line">t:=time.Unix(<span class="type">int64</span>(timestamp),<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> t.Format(<span class="string">&quot;2000-01-02 03:04:05&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<strong>加载模板上方</strong>，<strong>创建引擎下方</strong>通过<code>r.SetFuncMap()</code>注册自定义模板函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.SetFuncMap(template.FuncMap&#123;</span><br><span class="line"><span class="string">&quot;Unix2Time&quot;</span>: Unix2Time,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在，在模板中就可以调用函数了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;Unix2Time .date&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642603532248.png" alt=""></p><h2 id="10、模板嵌套">10、模板嵌套</h2><p>比如，现在需要给前端和后端设计一个公共的标题<br>在 templates 中新建 public/page_header.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; define &quot;public/page_header.html&quot; &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        我是一个公共的标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123; end &#125;&#125;</span><br></pre></td></tr></table></figure><p>使用<code>&#123;&#123;template "public/page_header.html" .&#125;&#125;</code>引入**（注意末尾的点）**<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642604437361.png" alt=""><br>当然，嵌套同一个模板并不表示会显示相同的内容，比如我们稍加修改，就能分别展示前端和后端的标题<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642604897543.png" alt=""></p><h1 id="三、静态文件服务">三、静态文件服务</h1><p>当我们渲染的 HTML 文件中引用了静态文件时（如css、js、图片等）,我们需要使用<code>r.Static</code>配置静态 web 服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line">    r.Static(<span class="string">&quot;/static&quot;</span>, <span class="string">&quot;./static&quot;</span>)  </span><br><span class="line">    <span class="comment">//前面的 /static 表示路由（从外部访问） 后面的./static 表示本地路径</span></span><br><span class="line">    r.LoadHTMLGlob(<span class="string">&quot;templates/**/*&quot;</span>)</span><br><span class="line">    <span class="comment">// ... </span></span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/static/css/base.css&quot;</span> /&gt;</span>   </span><br></pre></td></tr></table></figure><p>注意在模板里引用时 static 前面的斜杠不要漏</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（二）响应数据 c.String() c.JSON() c.HTML()</title>
      <link href="/2022/01/18/gin-ru-men-bi-ji-er-xiang-ying-shu-ju-cstring-cjson-chtml/"/>
      <url>/2022/01/18/gin-ru-men-bi-ji-er-xiang-ying-shu-ju-cstring-cjson-chtml/</url>
      
        <content type="html"><![CDATA[<p>从之前程序继续</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;%v&quot;</span>, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 r.GET 中，我们使用了 c.String ，类似地，还可以使用 c.JSON()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c.JSON(<span class="number">200</span>,gin.H&#123;</span><br><span class="line"><span class="string">&quot;success&quot;</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;msg&quot;</span>:<span class="string">&quot;你好 gin&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>gin.H</code>  其实就是 <code>map[string]interface&#123;&#125;</code> 的捷径，在里面写上键值对，就能成功访问，可以往里面放各种各样的类型或者结构体返回</p><p>而 c.HTML() 是用于渲染模板的（下节详细讲），首先新建一个 templates 文件夹，在其中新建 index.html ，将代码复制进去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;&#123;.time&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;.location&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;.weather&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，后台的数据用双大括号阔上，加一个点，再写上名字</p><p>回到 main.go ，在新建路由的下一行加上这句话来加载模板</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后再配置路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c.HTML(<span class="number">200</span>, <span class="string">&quot;index.html&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;time&quot;</span>:     <span class="string">&quot;20xx年x月x日&quot;</span>,</span><br><span class="line"><span class="string">&quot;location&quot;</span>: <span class="string">&quot;xx市&quot;</span>,</span><br><span class="line"><span class="string">&quot;weather&quot;</span>:  <span class="string">&quot;晴&quot;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行，访问本地，可以看到已经正常渲染<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642523824435.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 入门笔记（一）环境搭建、简单的路由配置</title>
      <link href="/2022/01/18/gin-ru-men-bi-ji-yi-chu-shi-gin-yu-huan-jing-da-jian/"/>
      <url>/2022/01/18/gin-ru-men-bi-ji-yi-chu-shi-gin-yu-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Gin-是什么">一、Gin 是什么</h1><p>Gin 是一个用 Go (Golang) 编写的 web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。</p><p>同时，它目前在 GitHub 上已经有了 50k+ 的 Star，可谓是非常热门</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642499368202.png" alt=""></p><h1 id="二、环境搭建">二、环境搭建</h1><blockquote><p>注意：以下步骤需要全程魔法上网</p></blockquote><ol><li><p>在 VScode 中安装 Go 扩展<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642514298435.png" alt=""></p></li><li><p>新建 test 文件夹，并在其中新建一个 main.go<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642514405731.png" alt=""></p></li></ol><p>这时会提醒你下载很多工具，确认下载即可，这里就看你的网速了，记得魔法上网</p><ol start="3"><li>终端里切换到 test 目录，并执行下面的命令</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init test</span><br><span class="line"><span class="keyword">go</span> get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><ol start="4"><li>新建 main.go ，并输入</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>再在终端中执行命令</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><p>这一步执行完毕后，目录中应该会有 go.mod 和 go.sum 两个文件</p><ol start="6"><li>用下面的代码测试一下</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个默认的路由引擎</span></span><br><span class="line">r := gin.Default()</span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;%v&quot;</span>, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动 web 服务</span></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>go run main.go</code>运行，访问本机的 8080 端口能看见 Hello World<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1642515294184.png" alt=""></p><p>至此，环境搭建完毕</p><p>来分析一下上面的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;%v&quot;</span>, <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>r.GET 表示用于处理 GET 请求， “/” 指的是要处理的路径，一个斜杠就是根目录，后面的跟着一个函数（此例是匿名函数）用于处理若访问了这个路径的操作，这里就返回 200（HTTP状态码） 和 一个字符串</p><p>可以复制粘贴出多个 r.GET 来处理其他路径，当然，也可以换成 POST PUT DELETE 来处理对应的请求（建议安装 postman 来更为方便地发送请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Run()</span><br></pre></td></tr></table></figure><p>这句用于启动服务，默认的端口是8080，可以通过传入端口号来修改而在其他端口启动服务，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
          <category> Gin 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gin </tag>
            
            <tag> Go </tag>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』VScode 环境配置</title>
      <link href="/2021/12/31/cc-vscode-huan-jing-pei-zhi/"/>
      <url>/2021/12/31/cc-vscode-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Step0：准备安装文件">Step0：准备安装文件</h1><p>安装文件包含 <strong>VScode 的安装包</strong>和著名 C/C++ 编译器 <strong>MinGW</strong><br>你可以选择去官网下，也可以选择通过下面的链接下载</p><blockquote><p>百度云：<a href="https://pan.baidu.com/s/1T_j30OCeFneNF5NnxWVOig">https://pan.baidu.com/s/1T_j30OCeFneNF5NnxWVOig</a><br>提取码：11hx</p><p>蓝奏云：<a href="https://wwd.lanzouf.com/b030s49yj">https://wwd.lanzouf.com/b030s49yj</a><br>密码：8wqk</p></blockquote><p>解压完成后就准备开始了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640963729407.jpg" alt=""></p><h1 id="Step1：安装软件">Step1：安装软件</h1><p>对于 MinGW 来说，随便放在一个你喜欢的地方<br>但是请记住它的位置，这里以 C 的根目录为例<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640966420007.png" alt=""></p><p>对于 VScode ，安装程序一直点下去</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640966539621.png" alt=""></p><h1 id="Step2：配置运行环境">Step2：配置运行环境</h1><p>安装后打开 VScode，需要先装上几个插件，在左侧转到扩展页面，然后按名字搜索</p><p>有三个必要的插件，和两个可选的插件</p><p>第一个是中文插件，用于显示中文界面<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640966761467.png" alt=""></p><p>安装后，会提示重启 VScode ，点按钮可以重启<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1641017299139.png" alt=""></p><p>第二个是 C/C++，我们需要用它来运行和调试程序<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967065224.png" alt=""></p><p>第三个是 Code Runner，通过这个插件来启动程序更加快捷<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967119966.png" alt=""></p><p>下面两个是我比较推荐的，Bracket Pair Colorizer 2 可以给代码中的括号自动配色，突出代码结构<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967370189.png" alt=""></p><p>最后一个 Local History 可以保存每次修改的版本，随时回溯历史<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967458779.png" alt=""></p><p>下面需要创建一个文件夹保存源代码，我就直接创在桌面了，取名为 C Study<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967593205.png" alt=""></p><p>在 VScode 的菜单栏中选择 文件-&gt;打开文件夹，在 VScode 中打开<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967728934.png" alt=""><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967746557.png" alt=""><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967752118.png" alt=""></p><p>在写代码之前，我们还需要设置一下扩展</p><p>切换到扩展页面，选中 C/C++ ，点击扩展设置<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640967993891.png" alt=""></p><p>输入一个空格，再输入 path ，搜索所有有关路径的设置</p><p>我们要设置编译器路径和包含路径，一直往下翻，翻到 Compiler Path 和 Include Path</p><p>键入之前你保存 MinGW 的路径，再加上 \bin\gcc.exe</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968045586.png" alt=""></p><p>对于下面的 Include Path，添加 MinGW 路径，再加上 \lib，别忘了确定<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968285557.png" alt=""><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968305666.png" alt=""></p><p>现在可以切回文件页面，新建一个 helloworld.c 文件（如果想写C++的话就是 .cpp）<br>在右侧就可以开始写了，可以看见代码补全功能已启用，按 Tab 或 Enter 可以自动补全，方向键可以用来选择<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968632301.png" alt=""></p><p>给点时间，让我来写个Hello World<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968661537.png" alt=""></p><p>写完了，下面讲如何运行</p><p>从左侧切换到 运行和调试 页面，点击运行和调试，或者点击工具栏 运行-&gt;以非调试模式运行<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968814076.png" alt=""></p><p>第一次运行需要配置环境到 .vscode 文件夹中，按图中的方式选择<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968896645.png" alt=""></p><p>如果中途出现了问题，就删除 .vscode 文件夹重新尝试<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968902253.png" alt=""></p><p>根据选择在 .vscode 文件夹中自动创建了 launch.json 配置文件，我们不需要再进行修改，直接关掉<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640968998748.png" alt=""></p><p>查看下方的终端，可以看见程序已正常运行，字符串已成功打印<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969049173.png" alt=""></p><hr><details class="toggle" ><summary class="toggle-button" style="">如果你遇到了无法解决的麻烦...</summary><div class="toggle-content"><p>如果你在此步遇到了麻烦，无法运行，可以尝试使用我的配置文件</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/202206201827986.png" alt="image-20220620182710544"></p><p>点击右上角的按钮，打开 JSON 文档，全部删除，覆盖为我的配置</p><p>（如果你的路径跟我的不一样请手动更改）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\mingw64\\bin\\gcc.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;C:\\mingw64\\lib&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*.c&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[c]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ms-vscode.cpptools&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.clearPreviousOutput&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;debug.onTaskErrors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;showErrors&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.detectLocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span><span class="punctuation">:</span> <span class="string">&quot;open&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript.locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;C_Cpp.default.cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c99&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settingsSync.ignoredSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-C_Cpp.default.compileCommands&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-C_Cpp.default.includePath&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.saveAllFilesBeforeRun&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;[cpp]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ms-vscode.cpptools&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;**/.history&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.vscode&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/*.exe&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracket-pair-colorizer-2.depreciation-notice&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;go.autocompleteUnimportedPackages&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.linkedEditing&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.unicodeHighlight.nonBasicASCII&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;git.enableSmartCommit&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;go.toolsManagement.autoUpdate&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.inlineSuggest.enabled&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;github.copilot.enable&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;yaml&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;plaintext&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;markdown&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;diffEditor.ignoreTrimWhitespace&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmake.configureOnOpen&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></details><hr><p>接下来尝试通过 Code Runner 来运行，找到右上角有个三角形的运行按钮</p><p>鼠标放在上面，可以看见也能用快捷键 Ctrl+Alt+N 来运行</p><p>尝试运行但报错，发现还要去配置环境变量<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969297211.png" alt=""></p><p>打开 设置-&gt;系统-&gt;关于 点击高级系统设置<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969368809.png" alt=""></p><p>点击下面的环境变量<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969392775.png" alt=""></p><p>上面的是用户的，下面的是系统的，两个都设置，这里以上面的用户示例</p><p>找到 Path ，点击编辑<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969457309.png" alt=""></p><p>点击 新建 ，输入编译器所在的文件夹，再点击下方的按钮保存<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969504069.png" alt=""></p><p>（别忘了系统那里也操作一遍）</p><p>值得注意的是，通过 Code Runner 运行时不能选中任何字符，不然 Code Runner 就会新建一个临时文件把选中的部分抽离出来运行，这对于某些语言还是挺有用的，但 C/C++ 自然是需要一整个程序运行</p><h1 id="Step3：做一些优化">Step3：做一些优化</h1><p>重启 VScode 现在可以运行了，运行速度明显更快，所以一般都使用这个方法运行<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969601248.png" alt=""></p><p>在左下方的 LOCAL HISTORY 处可以查看历史的版本，点击即可浏览<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969845764.png" alt=""></p><p>但我们也看见文件视图里有一些我们不需要的文件夹和文件，比如 .history（用于保存之前的版本）和 .vscode（保存配置文件），而我还觉得，如果去掉那些 exe 文件界面就更清爽了</p><p>打开 文件-&gt;首选项-&gt;设置，或者按快捷键 Ctrl+, 也行<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969942344.png" alt=""></p><p>在设置中往下翻一点，找到 Files:Exclude<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640969929624.png" alt=""></p><p>添加几个屏蔽模式，这样我们就可以只看见源代码了<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640970055107.png" alt=""></p><p>现在，我来讲解一下怎么调试程序</p><p>调试其实就是在运行时查看程序运行的细节（例如看变量的值），来修BUG</p><p>给点时间，让我写一个计算加法的程序</p><p>写完建议右键格式化一下，更工整美观<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640970250831.png" alt=""></p><p>在行号的左侧单击一下以添加断点，程序运行到断点处就会停下，等待你点击下一步<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640970271142.png" alt=""></p><p>在工具栏点击 运行-&gt;启用调试，或者直接 F5</p><p>再在左侧的监视中添加你想看的变量或表达式<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640970473687.png" alt=""></p><p>在下方切回终端，输入两个数，再回车</p><p>可以看见程序停在了断点处，左侧可以看见变量的值，变量栏中可以看见局部变量，如果是全局变量则必须在监视中手动添加<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640970587170.png" alt=""></p><p>在上方点击单步调试，可以一步一步运行，直到程序结束<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1640970862561.png" alt=""></p><p>单步调试和单步跳过的区别是：在遇到自己写的函数时，单步调试会跟着跳过去，而单步跳过会跳到函数执行完毕的状态</p><h1 id="Step4：推荐一个我喜欢的窗口布局">Step4：推荐一个我喜欢的窗口布局</h1><p>首先在左侧的文件那里创一个 TestSpace 的文件夹，在其中创建 test.c、input.txt、output.txt</p><p>之后所有的写代码的操作都在 TestSpace 中进行，其他位置只用来储存</p><p>把 input.txt 标签页拖到右边独立出来<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1641015609704.png" alt=""></p><p>再把 output.txt 拖到右下角<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1641015642865.png" alt=""></p><p>然后我们开始在 test.c 中写代码，这里把上面的加法程序复制进来</p><p>写完之后，在 main 函数的开头添加下面两行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure><p>这两行的作用是把标准输入重定向为 input.txt，把标准输出定向为 output.txt</p><p>现在，在 input.txt 中写上需要输入的内容，按 Ctrl+S 保存，回到 test.c ,按 Ctrl+Alt+N 执行，可以看见输出的内容已经出现在 output.txt<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1641015942542.png" alt=""></p><p>只需修改 input.txt 的内容，再执行，就能获得新的结果<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1641016059813.png" alt=""></p><p>这有什么好处呢？这样可以分离输入和输出信息，而不是有时在缓冲区搅在一起</p><p>在需要测试多组样例时，这也更为方便，只需重复 修改-&gt;保存-&gt;运行</p><p>在修 bug 时可以省去重复输入同一组样例的时间</p><p>在需要提交代码时，选中 freopen 那两行，按下 Ctrl+/ 来开关注释，之后 Ctrl+A 全选 Ctrl+C 复制提交即可</p><p>值得注意的是，不知道为什么在调试的时候貌似不能正常输出至 output.txt，这时只能注释掉那一行，在终端中查看结果</p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』动态内存管理</title>
      <link href="/2021/11/19/cc-cc-de-dong-tai-nei-cun-guan-li/"/>
      <url>/2021/11/19/cc-cc-de-dong-tai-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.runoob.com/cplusplus/cpp-dynamic-memory.html">C++动态内存|菜鸟教程</a></p><p><a href="https://www.runoob.com/cprogramming/c-memory-management.html">C内存管理|菜鸟教程</a></p><p><a href="https://www.cnblogs.com/qiumingcheng/p/7818803.html">C/C++内存管理详解 </a></p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』typedef关键字</title>
      <link href="/2021/11/19/cc-typedef/"/>
      <url>/2021/11/19/cc-typedef/</url>
      
        <content type="html"><![CDATA[<p>这篇内容实际上来源于<a href="https://www.runoob.com/cprogramming/c-typedef.html">菜鸟教程</a></p><p>C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 <strong>BYTE</strong> ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> BYTE;</span><br></pre></td></tr></table></figure><p>在这个类型定义之后，标识符 BYTE 可作为类型 <strong>unsigned char</strong> 的缩写，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BYTE  b1, b2;</span><br></pre></td></tr></table></figure><p>按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但您也可以使用小写字母</p><p>您也可以使用 typedef 来为用户自定义的数据类型取一个新的名字。例如，您可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//本人强调:格式不用搞错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Books</span>   //这个类型叫 <span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span>   book_id;</span><br><span class="line">&#125; Book;  </span><br><span class="line"><span class="comment">//因为有typedef，struct Books 等于 Book（不看大括号就是 typedef struct Books Book;   </span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">   Book book;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">strcpy</span>( book.title, <span class="string">&quot;C 教程&quot;</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( book.author, <span class="string">&quot;Runoob&quot;</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( book.subject, <span class="string">&quot;编程语言&quot;</span>);</span><br><span class="line">   book.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书标题 : %s\n&quot;</span>, book.title);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书作者 : %s\n&quot;</span>, book.author);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书类目 : %s\n&quot;</span>, book.subject);</span><br><span class="line">   <span class="built_in">printf</span>( <span class="string">&quot;书 ID : %d\n&quot;</span>, book.book_id);</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在C++中，在声明 struct Books 时，它会自动生成一个别名为 Books ，就没必要再用 typedef 了</p><p>思考题：辨析下面两个的不同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Books</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span>   book_id;</span><br><span class="line">&#125; Book;    </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="type">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="type">int</span>   book_id;</span><br><span class="line">&#125; Book;  </span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法』高精度运算</title>
      <link href="/2021/11/18/suan-fa-gao-jing-du-yun-suan/"/>
      <url>/2021/11/18/suan-fa-gao-jing-du-yun-suan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/list?keyword=%E9%AB%98%E7%B2%BE%E5%BA%A6&amp;page=1">题目</a></p><h2 id="分解讲解：">分解讲解：</h2><h3 id="1-头部">1.头部</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len(k) (k[0])       <span class="comment">//k[0]表示数的位数，用len(k)表示更为清晰</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN], d[MAXN], tmp[MAXN];</span><br><span class="line"><span class="type">int</span> num, res;</span><br></pre></td></tr></table></figure><h3 id="2-读入">2.读入</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">scan</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[MAXN];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;str);</span><br><span class="line">    <span class="built_in">len</span>(x) = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>(x); i++)  </span><br><span class="line">        x[<span class="built_in">len</span>(x) - i] = str[i] - <span class="string">&#x27;0&#x27;</span>;   <span class="comment">//倒序写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-输出">3.输出</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-初始化（清零）">4.初始化（清零）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, MAXN * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-复制">5.复制</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> pos)</span> <span class="comment">//复制 a 数组到， b 数组从 pos 开始的地方</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        b[i + pos - <span class="number">1</span>] = a[i];</span><br><span class="line">    <span class="built_in">len</span>(b) = <span class="built_in">len</span>(a) + pos - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-比较">6.比较</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> y[])</span> <span class="comment">//大于：1，小于：-1，等于：0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &gt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &lt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; y[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; y[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-加法">7.加法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        c[i + <span class="number">1</span>] = c[i] / <span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c) + <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">len</span>(c)++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-减法">8.减法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">minu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] - b[i];</span><br><span class="line">        <span class="keyword">if</span> (c[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>]--;</span><br><span class="line">            c[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-自减">9.自减</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfminu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i + <span class="number">1</span>]--;</span><br><span class="line">            a[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] -= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(a) &gt; <span class="number">0</span> &amp;&amp; a[<span class="built_in">len</span>(a)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(a)--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-乘法">10. 乘法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mult</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) + <span class="built_in">len</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(b); j++)</span><br><span class="line">            c[i + j - <span class="number">1</span>] += a[i] * b[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] += c[i] / <span class="number">10</span>;</span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-除法">11.除法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divi</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[], <span class="type">int</span> d[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) - <span class="built_in">len</span>(b) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(a, d, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(tmp);</span><br><span class="line">        <span class="built_in">copy</span>(b, tmp, i);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">compare</span>(d, tmp) &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]++;</span><br><span class="line">            <span class="built_in">selfminu</span>(d, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(c) &gt; <span class="number">0</span> &amp;&amp; c[<span class="built_in">len</span>(c)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-高精除低精">12 高精除低精</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfDiviByLow</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b,<span class="type">int</span>* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">len</span>(c)=<span class="built_in">len</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (a[<span class="built_in">len</span>(c)] &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="built_in">len</span>(c) - <span class="number">1</span>] += a[<span class="built_in">len</span>(c)] * <span class="number">10</span>;</span><br><span class="line">        a[<span class="built_in">len</span>(c)] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i] = a[i] / b;</span><br><span class="line">            a[i] %= b;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i - <span class="number">1</span>] += a[i] * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *res=a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">copy</span>(c,a,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码：">完整代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> len(k) (k[0])</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> a[MAXN], b[MAXN], c[MAXN], d[MAXN], tmp[MAXN];</span><br><span class="line"><span class="type">int</span> num, res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">scan</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> str[MAXN];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;str);</span><br><span class="line">    <span class="built_in">len</span>(x) = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">len</span>(x); i++)</span><br><span class="line">        x[<span class="built_in">len</span>(x) - i] = str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x[i]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, MAXN * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copy</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        b[i + pos - <span class="number">1</span>] = a[i];</span><br><span class="line">    <span class="built_in">len</span>(b) = <span class="built_in">len</span>(a) + pos - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> x[], <span class="type">int</span> y[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &gt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(x) &lt; <span class="built_in">len</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(x); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &gt; y[i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x[i] &lt; y[i]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] + b[i];</span><br><span class="line">        c[i + <span class="number">1</span>] = c[i] / <span class="number">10</span>;</span><br><span class="line">        c[i] %= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c) + <span class="number">1</span>])</span><br><span class="line">        <span class="built_in">len</span>(c)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">minu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] += a[i] - b[i];</span><br><span class="line">        <span class="keyword">if</span> (c[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>]--;</span><br><span class="line">            c[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfminu</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            a[i + <span class="number">1</span>]--;</span><br><span class="line">            a[i] += <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] -= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(a) &gt; <span class="number">0</span> &amp;&amp; a[<span class="built_in">len</span>(a)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(a)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mult</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) + <span class="built_in">len</span>(b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(a); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">len</span>(b); j++)</span><br><span class="line">            c[i + j - <span class="number">1</span>] += a[i] * b[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(c); i++)</span><br><span class="line">        <span class="keyword">if</span> (c[i] &gt; <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i + <span class="number">1</span>] += c[i] / <span class="number">10</span>;</span><br><span class="line">            c[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span> (c[<span class="built_in">len</span>(c)] == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(c) &gt; <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divi</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> c[], <span class="type">int</span> d[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">len</span>(c) = <span class="built_in">len</span>(a) - <span class="built_in">len</span>(b) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">copy</span>(a, d, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">init</span>(tmp);</span><br><span class="line">        <span class="built_in">copy</span>(b, tmp, i);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">compare</span>(d, tmp) &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i]++;</span><br><span class="line">            <span class="built_in">selfminu</span>(d, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(c) &gt; <span class="number">0</span> &amp;&amp; c[<span class="built_in">len</span>(c)] == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selfDiviByLow</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b,<span class="type">int</span>* res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c[MAXN]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">len</span>(c)=<span class="built_in">len</span>(a);</span><br><span class="line">    <span class="keyword">while</span> (a[<span class="built_in">len</span>(c)] &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="built_in">len</span>(c) - <span class="number">1</span>] += a[<span class="built_in">len</span>(c)] * <span class="number">10</span>;</span><br><span class="line">        a[<span class="built_in">len</span>(c)] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">len</span>(c)--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">len</span>(c); i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i] = a[i] / b;</span><br><span class="line">            a[i] %= b;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i - <span class="number">1</span>] += a[i] * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *res=a[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">copy</span>(c,a,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scan</span>(a);</span><br><span class="line">    <span class="built_in">scan</span>(b);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">add</span>(a, b, c);</span><br><span class="line">    <span class="built_in">print</span>(c);</span><br><span class="line">    <span class="built_in">init</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">compare</span>(a, b) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="built_in">minu</span>(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">minu</span>(a, b, c);</span><br><span class="line">    <span class="built_in">print</span>(c);</span><br><span class="line">    <span class="built_in">init</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mult</span>(a, b, c);</span><br><span class="line">    <span class="built_in">print</span>(c);</span><br><span class="line">    <span class="built_in">init</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">divi</span>(a, b, c, d);</span><br><span class="line">    <span class="built_in">print</span>(c);</span><br><span class="line">    <span class="built_in">print</span>(d);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">selfDiviByLow</span>(a,num,&amp;res);</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 真的可以看做是 C++ 的子集吗</title>
      <link href="/2021/11/17/za-tan-c-ke-yi-kan-zuo-shi-shi-c-de-zi-ji-ma/"/>
      <url>/2021/11/17/za-tan-c-ke-yi-kan-zuo-shi-shi-c-de-zi-ji-ma/</url>
      
        <content type="html"><![CDATA[<p>搜了一下，答案是：基本上可以这么认为，但是在一些细节上并不兼容</p><p>图片源自网络</p><h3 id="1-void-类型">1. void*类型</h3><p>在C语言中，void*（空指针）可以隐式转换为任何指针类型，但在C++语言中不合法<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1637165387114.png" alt=""><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1637165377639.png" alt=""></p><h3 id="2-字符字面值">2. 字符字面值</h3><p>在C语言中，字符字面值是int类型，而在C++语言中，字符字面值是char类型<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1637165451918.png" alt=""><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1637165462423.png" alt=""></p><h3 id="3-字符串字面值">3. 字符串字面值</h3><p>这是一个很常见的错误，在C语言中，字符串字面值是char[N]类型，而在C++语言中，字符串字面值是const char[N]类型<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1637165603933.png" alt=""><br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1637165617649.png" alt=""></p><h3 id="4-C-多了一些关键字">4. C++ 多了一些关键字</h3><p>C++多了很多关于面向对象的内容，与之一道多了很多关键字（如class，public等）<br>使用这些词汇作为变量名的 C 程序无法在 C++ 中成功编译</p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『About』关于我和我的小站（2021年11月13日版）</title>
      <link href="/2021/11/13/%5B2021-11-13%5Dabout/"/>
      <url>/2021/11/13/%5B2021-11-13%5Dabout/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636802981404.jpg" alt=""></p><blockquote><p>欢迎来到我的小站呀，很高兴遇见你！🤝</p></blockquote><h2 id="🏠-关于本站">🏠 关于本站</h2><p>这个博客网站是我今天（2021年11月13日）在我自己的阿里云服务器上新建的，基于<a href="https://gridea.dev/">Gridea</a>，非常感谢这个开源项目🎉</p><p>主题上我本来想找一个基于 Material Design 的（因为的原来用的是<a href="https://www.luogu.com.cn/blog/NOTSPROG/">洛谷博客</a>），但逛了一圈都不能很令我满意，就用了这个 Pure 主题，也是挺好看的</p><p>有些文章由于我当时年龄较小，语言比较幼稚，望见谅！😂</p><p>PS:如果有时候没法正常访问，那么就表明我正在提交我的文章，请稍微等一分钟</p><h2 id="👨‍💻-博主是谁">👨‍💻 博主是谁</h2><p>本人是杭电大一新生一枚，杭电助手后端部新人，正在学习 Golang ，也在慢慢复习高中时信息竞赛的知识（再不复习的话就要全忘啦！）😃</p><h2 id="📘-学习经历">📘 学习经历</h2><ul><li>初中接触 C，Windows 命令行</li><li>高一接触 Linux ，折腾了一段时间的树莓派</li><li>高一开始参加 C++ 信息学竞赛，2019年参加了由CCF主办的CSP-S非专业级软件能力认证第二轮，其成绩(等同于原NOIP复赛提高组奖项级别)达到三等 （菜的一批）</li><li>高中还学了点WEB三板斧、Python，现在忘得差不多了</li><li>现在正在入门 Go，同时买了考研的书慢慢看</li></ul><h2 id="📬-联系我呀">📬 联系我呀</h2><ul><li>QQ：976180942</li><li>常用昵称：NickXU（NX）、你这瓜保熟吗（曾用名）、我不是菜鸟（曾用名）、NOTSPROG（就是前面那个的英文）</li><li>一般用 KSP 小绿人头像（系KSP老玩家！！！）</li><li>GitHub ID：NOTSPROG</li></ul><h2 id="📢-商务合作">📢 商务合作</h2><ul><li>本站不接受任何广告的投放</li><li><a href="https://www.bilibili.com/video/BV1GJ411x7h7">点击此链接与我进行商务合作</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>『Go』方法和接口</title>
      <link href="/2021/11/09/go-fang-fa-he-jie-kou/"/>
      <url>/2021/11/09/go-fang-fa-he-jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="一、方法">一、方法</h2><h3 id="1-方法是什么">1.方法是什么</h3><p>你可以为某个类型声明它的专属函数，如为 A 类型声明函数 f</p><p>函数 f 就附加在了类型 A 上，使用 <strong>A.f()</strong> 来调用</p><p>这时 f 就称为 A 的 <strong>「方法」</strong></p><p>类型 A 就称为方法 f 的 <strong>「接收者」</strong></p><blockquote><p><strong>方法就是一种带「接收者」参数的函数</strong></p></blockquote><h3 id="2-为什么要使用方法">2.为什么要使用方法</h3><p>方法使我们能在Go中运用面向对象的思想来编程（就像C++中的类一样）</p><h3 id="3-如何使用方法">3.如何使用方法</h3><h4 id="3-1-方法的声明">3.1 方法的声明</h4><p>首先复习一下函数的声明格式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名 <span class="params">(参数列表)</span></span> (返回值列表)&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法无疑就是多了个接收者参数，位置在 func 和函数名之间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(接收者)</span></span> 函数名 (参数列表) (返回值列表)&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li><p>你不能在 A 包内为 B 包内的一个类型定义方法，也就是说方法和接收者必须在同一个包里</p></li><li><p>内建类型无法定义方法，因为这些类型不是你定义的，<s>你也不知道它是在哪个包里定义的</s></p></li></ol><p>例子：声明一个 point 类型，用于表示一个二维坐标的点，再为它声明一个方法 dis ，用于获取该点到原点的距离。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明 Point 类型</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明 dis 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Point)</span></span> dis() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(a.X*a.X + a.Y*a.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(a.dis()) <span class="comment">//输出 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-2-值接收者与指针接收者">3.2 值接收者与指针接收者</h4><p>如为 A 类型声明方法 f，那么接收者就是值，每次传入的都是拷贝的一个副本，方法内操作的是原变量的副本</p><p>如为 A 类型的指针声明方法 f，那么接收者就是指针，每次传入的都是一个指针，方法内操作的是原变量</p><p>现在新声明一个方法 add，实现对坐标的加法功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明 Point 类型</span></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明 dis 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a Point)</span></span> dis() <span class="type">float64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> math.Sqrt(a.X*a.X + a.Y*a.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明 add 方法，新增加法功能</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Point)</span></span> add(n, m <span class="type">float64</span>) &#123;</span><br><span class="line">a.X += n</span><br><span class="line">a.Y += m</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(a)       <span class="comment">//输出 &#123;3 4&#125;</span></span><br><span class="line">fmt.Println(a.dis()) <span class="comment">//输出 5</span></span><br><span class="line">(&amp;a).add(<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line">fmt.Println(a)       <span class="comment">//输出 &#123;5 12&#125;</span></span><br><span class="line">fmt.Println(a.dis()) <span class="comment">//输出 13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-指针重定向">3.3 指针重定向</h4><p>刚才为 Point 的指针声明了方法 add，但实际上使用值也可以成功调用，Go可以为你自动转换（重定向）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Point&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">fmt.Println(a)       <span class="comment">//输出 &#123;3 4&#125;</span></span><br><span class="line">fmt.Println(a.dis()) <span class="comment">//输出 5</span></span><br><span class="line">a.add(<span class="number">2</span>, <span class="number">8</span>)          <span class="comment">//与 (&amp;a).add(2, 8) 等价，没有问题 </span></span><br><span class="line">fmt.Println(a)       <span class="comment">//输出 &#123;5 12&#125;</span></span><br><span class="line">fmt.Println(a.dis()) <span class="comment">//输出 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，如果方法的接收者为指针，传入时无论是值或者指针都会被自动转换为指针</p><p>对立情况也是如此，如果方法的接收者为值，传入时无论是值或者指针都会被自动转换为值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println((&amp;a).dis()) <span class="comment">//会自动转换，没有问题</span></span><br></pre></td></tr></table></figure><h2 id="二、接口">二、接口</h2><p>首先感谢<a href="https://www.bilibili.com/video/BV1Gt411F7uE?from=search&amp;seid=11935336223076492437&amp;spm_id_from=333.337.0.0">这个视频</a>，教会了我接口</p><h3 id="1-为什么要用接口">1.为什么要用接口</h3><p>在讲接口是什么的时候，有必要先弄清楚为什么要用接口</p><p>接口同方法一样，也是服务于面向对象思想的</p><p>比如一个网上商城可能使用支付宝、微信、银联等方式去在线支付，我们能不能把它们当成“支付方式”来处理呢？</p><p>比如三角形，四边形，圆形都能计算周长和面积，我们能不能把它们当成“图形”来处理呢？</p><p>比如销售、行政、程序员都能计算月薪，我们能不能把他们当成“员工”来处理呢？</p><p>Go语言中为了解决类似上面的问题，就设计了接口这个概念。接口区别于我们之前所有的具体类型，接口是一种抽象的类型。</p><p>当你看到一个接口类型的值时，你不知道它是什么，唯一知道的是通过它的方法能做什么。</p><h3 id="2-接口是什么">2.接口是什么</h3><p><strong>接口是一种数据类型</strong> ，它的作用是 <strong>保存</strong> 一类符合条件的数据类型</p><p>“符合条件”具体地说就是看那些数据类型有没有实现某个接口所规定的方法，<strong>凡是实现了这些方法的类型就称实现了这个接口</strong>，实现了这个接口，这个接口就能<strong>保存</strong>那些类型</p><p>接口不管你的方法怎么实现的，只要你有这个方法就行。也就是说，你拿到一个接口，只知道它能实现什么（有什么方法），而不知道它具体是怎么完成的</p><h3 id="3-接口怎么用">3.接口怎么用</h3><h4 id="3-1-接口的声明">3.1 接口的声明</h4><p>接口的声明格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口类型名 <span class="keyword">interface</span>&#123;</span><br><span class="line">    方法名<span class="number">1</span>( 参数列表<span class="number">1</span> ) 返回值列表<span class="number">1</span></span><br><span class="line">    方法名<span class="number">2</span>( 参数列表<span class="number">2</span> ) 返回值列表<span class="number">2</span></span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：接口在命名时，一般会在单词后面添加 er，如有写操作的接口叫 Writer，有字符串功能的接口叫 Stringer 等。接口名最好要能突出该接口的类型含义</p><h4 id="3-2-接口的基础用法">3.2 接口的基础用法</h4><p>我们来定义一个 Sayer 接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sayer 接口</span></span><br><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义 dog 和 cat 两个结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>因为 Sayer 接口里只有一个 say 方法，所以我们只需要给 dog 和 cat 分别实现 say 方法就可以实现 Sayer 接口了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dog实现了Sayer接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span></span> say() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cat实现了Sayer接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span></span> say() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口类型变量能够存储所有实现了该接口的实例</strong>， 例如上面的示例中，Sayer 类型的变量能够存储 dog 和 cat 类型的变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x Sayer <span class="comment">// 声明一个Sayer类型的变量x</span></span><br><span class="line">a := cat&#123;&#125;  <span class="comment">// 实例化一个cat</span></span><br><span class="line">b := dog&#123;&#125;  <span class="comment">// 实例化一个dog</span></span><br><span class="line">x = a       <span class="comment">// 可以把cat实例直接赋值给x</span></span><br><span class="line">x.say()     <span class="comment">// 喵喵喵</span></span><br><span class="line">x = b       <span class="comment">// 可以把dog实例直接赋值给x</span></span><br><span class="line">x.say()     <span class="comment">// 汪汪汪</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-结合函数的用法">3.3 结合函数的用法</h4><p>先假设我们摸一只猫的时候，猫会喵喵喵地叫，摸一条狗的时候，它会汪汪汪地叫</p><p>现在我们写一个”摸“函数，要求来什么都会摸一下，并且不管是猫还是狗都可以传入</p><p>这时我们就可以用接口来作为参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">touch</span><span class="params">(x Sayer)</span></span> &#123;</span><br><span class="line">x.say()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := cat&#123;&#125; <span class="comment">// 实例化一个cat</span></span><br><span class="line">b := dog&#123;&#125; <span class="comment">// 实例化一个dog</span></span><br><span class="line">touch(a)   <span class="comment">//喵喵喵</span></span><br><span class="line">touch(b)   <span class="comment">//汪汪汪</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这便是结合函数的用法</p><h4 id="3-4-值接收者和指针接收者实现接口的区别">3.4 值接收者和指针接收者实现接口的区别</h4><p>先来说<strong>值接收者实现接口</strong></p><p>在上面的例子中，无论是猫还是狗的 say 方法用的都是值接收者</p><p>拿狗举例子，我们分别尝试把 dog 类型和 *dog 类型赋给一个 Sayer 接口</p><p>第一条（dog类型）我们取名为 旺财，第二条（*dog类型）我们取名为 富贵</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x Sayer</span><br><span class="line"><span class="keyword">var</span> wangcai = dog&#123;&#125; <span class="comment">// 旺财是dog类型</span></span><br><span class="line">x = wangcai         <span class="comment">// x可以接收dog类型</span></span><br><span class="line"><span class="keyword">var</span> fugui = &amp;dog&#123;&#125;  <span class="comment">// 富贵是*dog类型</span></span><br><span class="line">x = fugui           <span class="comment">// x可以接收*dog类型</span></span><br><span class="line">x.say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是 值（dog） 还是 指针（*dog） 类型的变量都可以赋值给该接口变量，如果是指针的话会先自动求它的值</p><p>而<strong>指针接收者实现接口</strong>则不同：</p><p>如果我们把狗的 say 方法改为指针接收者，则会有错误：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> say() &#123;   <span class="comment">//接收者改为了指针类型</span></span><br><span class="line">fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x Sayer</span><br><span class="line"><span class="keyword">var</span> wangcai = dog&#123;&#125; <span class="comment">// 旺财是dog类型</span></span><br><span class="line">x = wangcai         <span class="comment">//错误：x不能接收dog类型</span></span><br><span class="line">x.say()</span><br><span class="line"><span class="keyword">var</span> fugui = &amp;dog&#123;&#125;  <span class="comment">// 富贵是*dog类型</span></span><br><span class="line">x = fugui           <span class="comment">// x可以接收*dog类型</span></span><br><span class="line">x.say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时实现 Sayer 接口的是 *dog 类型，所以不能给 x 传入 dog 类型的 wangcai，此时 x 只能存储 *dog 类型的值</p><h4 id="3-5-接口嵌套">3.5 接口嵌套</h4><p>接口与接口间可以通过嵌套创造出新的接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sayer 接口</span></span><br><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mover 接口</span></span><br><span class="line"><span class="keyword">type</span> Mover <span class="keyword">interface</span> &#123;</span><br><span class="line">move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口嵌套</span></span><br><span class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</span><br><span class="line">Sayer</span><br><span class="line">Mover</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套得到的接口的使用与普通接口一样，只是一种偷懒的方法，相当于把其他接口的内容复制过来</p><h4 id="3-6-空接口">3.6 空接口</h4><p>空接口是指没有定义任何方法的接口。因此任何类型都实现了空接口</p><p>这不就很好玩了吗？空接口可以存储任意类型的变量！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 定义一个空接口x</span></span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">s := <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">x = s</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, x, x)</span><br><span class="line">i := <span class="number">100</span></span><br><span class="line">x = i</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, x, x)</span><br><span class="line">b := <span class="literal">true</span></span><br><span class="line">x = b</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, x, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空接口有两个主要应用：</p><p><strong>作为函数的参数</strong></p><p>使用空接口实现可以接收任意类型的函数参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空接口作为函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;type:%T value:%v\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作为map的值</strong></p><p>使用空接口实现可以保存任意值的字典</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空接口作为map值</span></span><br><span class="line"><span class="keyword">var</span> studentInfo = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">studentInfo[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小明&quot;</span></span><br><span class="line">studentInfo[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span></span><br><span class="line">studentInfo[<span class="string">&quot;married&quot;</span>] = <span class="literal">false</span></span><br><span class="line">fmt.Println(studentInfo)</span><br></pre></td></tr></table></figure><h4 id="3-7-类型断言">3.7 类型断言</h4><p>想判断接口中保存的类型可以用类型断言（其实就是猜测）来完成，格式为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x.(T)</span><br></pre></td></tr></table></figure><p>其中 T 表示断言 x 可能是的类型</p><p>该语法返回两个参数，第一个参数是 x 转化为 T 类型后的变量，第二个值是一个布尔值，若为 true 则表示断言（猜测）成功，为 false 则表示断言（猜测）失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">x = <span class="string">&quot;Hello 沙河&quot;</span></span><br><span class="line">v, ok := x.(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;类型断言失败&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要断言多次就需要写多个 if 判断，这个时候我们可以使用 switch 语句来实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">justifyType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> v := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;x is a string，value is %v\n&quot;</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;x is a int is %v\n&quot;</span>, v)</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;x is a bool is %v\n&quot;</span>, v)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;unsupport type！&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『Go』浅谈 Go 与 C/C++ 语法的不同 </title>
      <link href="/2021/11/03/go-qian-tan-go-yu-cc-yu-fa-de-bu-tong/"/>
      <url>/2021/11/03/go-qian-tan-go-yu-cc-yu-fa-de-bu-tong/</url>
      
        <content type="html"><![CDATA[<p>看了这么多教程，感觉还是<a href="http://tour.studygolang.com/">Go 语言之旅</a>最适合新手</p><p>本周初学 Go 的基本语法，总结了一下和 C/C++ 的区别</p><h2 id="Go-语法与-C-C-的不同-浅谈">Go 语法与 C/C++ 的不同 (浅谈)</h2><ul><li><p>每句话之后不一定要分号了</p></li><li><p>引用了包，或者变量声明没有用，就不能成功编译</p></li><li><p>大括号强制使用 C 风格：不换行，不能使用 C++ 风格</p></li><li><p>Go 的变量声明方面，名称在前，类型在后：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span>    <span class="comment">// 声明一个变量，默认为0，这和C/C++不一样</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>    <span class="comment">// 声明并初始化，且自动推导类型</span></span><br><span class="line">c := <span class="number">20</span>    <span class="comment">// 初始化，且自动推导（只能在函数里用）</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>然后少了一个 char 类型，多了复数</p></li><li><p>Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 { } 则是必须的（if同理）</p></li><li><p>没有了While，可以用for代替：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">sum += sum</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Go的 switch 不需要 break，并且 switch 的 case 无需为常量，且取值不必为整数</p></li><li><p>defer 语句会将函数推迟到外层函数返回之后执行。推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。可以defer多个函数，推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适用场景：释放资源（免得忘记了）、处理panic（把判断程序非正常关闭的处理写在defer里）</p></li><li><p>没有了 --i、++i，i–、i++等也只能单独使用，不能在表达式里面用了</p></li><li><p>浮点数不能直接比较，采用下面的方案：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isEqual</span><span class="params">(f1,f2,p <span class="type">float64</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">   <span class="comment">// p为用户自定义精度，如：0.00001</span></span><br><span class="line">  <span class="keyword">return</span> math.Abs(f1-f2) &lt; p           </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>字符串是只读的，修改要借助于 [ ]byte 或切片</p></li><li><p>长度是数组类型的一部分，[3]int与[4]int是不同的类型</p></li><li><p>当把一个数组作为参数传入函数的时候，传入的其实是该函数的副本，而不是他的指针</p></li><li><p>要导出的元素（函数、变量等）首字母大写</p></li><li><p>“类型定义”和“类型别名”的区别</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span>                          <span class="comment">// 类型定义</span></span><br><span class="line"><span class="keyword">type</span> AliasInt = <span class="type">int</span>                     <span class="comment">// 类型别名，支持使用括号，同时起多个别名</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> a1 MyInt</span><br><span class="line">fmt.Printf(<span class="string">&quot;a1 type: %T\n&quot;</span>, a1)<span class="comment">//main.MyInt</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> a2 AliasInt</span><br><span class="line">fmt.Printf(<span class="string">&quot;a2 type: %T\n&quot;</span>, a2)<span class="comment">//int</span></span><br></pre></td></tr></table></figure></li><li><p>新增了切片类型，切片就像数组的引用，更改切片的元素会修改其底层数组中对应的元素</p></li><li><p>用 make 创建切片</p><p>切片可以用内建函数 make 来创建，这也是你创建动态数组的方式。</p><p>make 函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">5</span>)  <span class="comment">// len(a)=5</span></span><br></pre></td></tr></table></figure><p>要指定它的容量，需向 make 传入第三个参数：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></span><br><span class="line"></span><br><span class="line">b = b[:<span class="built_in">cap</span>(b)] <span class="comment">// len(b)=5, cap(b)=5</span></span><br><span class="line">b = b[<span class="number">1</span>:]      <span class="comment">// len(b)=4, cap(b)=4</span></span><br></pre></td></tr></table></figure></li><li><p>指针无法运算</p></li><li><p>结构体指针指示层级关系时直接用’.‘，而不是用’-&gt;’</p></li><li><p>当从映射中读取某个不存在的键时，结果是映射的元素类型的零值</p></li><li><p>函数声的格式不一样：</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名字 <span class="params">(参数列表)</span></span> (返回值列表)&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line"><span class="keyword">return</span> 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不支持默认参数</p></li><li><p>多了个匿名函数</p></li><li><p>类型转换不一样：T(v) 将值 v 转换为类型 T ，并且Go 在不同类型的项之间赋值时需要显式转换</p></li><li><p>函数可以作为变量直接传入到函数里 <s>（套娃警告）</s></p></li><li><p>函数可以作为函数的返回值（称为 <a href="http://tour.studygolang.com/moretypes/25">闭包</a>）</p></li><li><p><a href="http://tour.studygolang.com/methods/1">方法</a> 声明方式不一样：在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』获得函数运行时长</title>
      <link href="/2021/11/01/cc-ru-he-huo-de-han-shu-yun-xing-shi-chang/"/>
      <url>/2021/11/01/cc-ru-he-huo-de-han-shu-yun-xing-shi-chang/</url>
      
        <content type="html"><![CDATA[<p>见此代码，输出了几种排序方法的运行时长</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 10000</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span>&#123;<span class="type">int</span> tmp;tmp=*a;*a = *b;*b = tmp;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rand_Array</span><span class="params">(<span class="type">int</span> Array[])</span>&#123;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAXSIZE; i++)Array[i] = rand();&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">selection_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= r; j++) <span class="comment">//走访未排序的元素</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[min])</span><br><span class="line">                min = j;      <span class="comment">//找到目前最小值</span></span><br><span class="line">        swap(&amp;a[min], &amp;a[i]); <span class="comment">//做交換</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertion_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key = a[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((j &gt;= <span class="number">0</span>) &amp;&amp; (key &lt; a[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = l; j &lt;= r - i; j++)</span><br><span class="line">        <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">        swap(&amp;a[j], &amp;a[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = l, j = r, mid = a[(l + r) / <span class="number">2</span>]; <span class="comment">//将当前序列在中间位置的数定义为分隔数</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; mid)i++; <span class="comment">//在左半部分寻找比中间数大的数</span></span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt; mid)j--; <span class="comment">//在右半部分寻找比中间数小的数</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">        &#123; </span><br><span class="line">            swap(&amp;a[i], &amp;a[j]);<span class="comment">//若找到一组与排序目标不一致的数对则交换它们</span></span><br><span class="line">            i++;</span><br><span class="line">            j--; <span class="comment">//继续找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= j); <span class="comment">//注意这里不能有等号</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt; j) quick_sort(a,l,j); <span class="comment">//若未到两个数的边界，则递归搜索左右区间</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; r) quick_sort(a,i,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> Array[MAXSIZE];</span><br><span class="line">    <span class="type">clock_t</span> start,end;</span><br><span class="line"></span><br><span class="line">    rand_Array(Array);</span><br><span class="line">    start=clock();</span><br><span class="line">    insertion_sort(Array,<span class="number">0</span>,MAXSIZE<span class="number">-1</span>);</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;insertion_sort runs in %lf seconds\n&quot;</span>,(<span class="type">double</span>)(end-start)/CLOCKS_PER_SEC);</span><br><span class="line"></span><br><span class="line">    rand_Array(Array);</span><br><span class="line">    start=clock();</span><br><span class="line">    selection_sort(Array,<span class="number">0</span>,MAXSIZE<span class="number">-1</span>);</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;selection_sort runs in %lf seconds\n&quot;</span>,(<span class="type">double</span>)(end-start)/CLOCKS_PER_SEC);</span><br><span class="line"></span><br><span class="line">    rand_Array(Array);</span><br><span class="line">    start=clock();</span><br><span class="line">    bubble_sort(Array,<span class="number">0</span>,MAXSIZE<span class="number">-1</span>);</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bubble_sort runs in %lf seconds\n&quot;</span>,(<span class="type">double</span>)(end-start)/CLOCKS_PER_SEC);</span><br><span class="line"></span><br><span class="line">    rand_Array(Array);</span><br><span class="line">    start=clock();</span><br><span class="line">    quick_sort(Array,<span class="number">0</span>,MAXSIZE<span class="number">-1</span>);</span><br><span class="line">    end=clock();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;quick_sort runs in %lf seconds\n&quot;</span>,(<span class="type">double</span>)(end-start)/CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    system(&quot;ping -n 4 127.0.0.1 &quot;);</span></span><br><span class="line"><span class="comment">//    for (int i = 0; i &lt; MAXSIZE; i++)printf(&quot;%d &quot;,Array[i]);</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』排序算法</title>
      <link href="/2021/11/01/cc-pai-xu-suan-fa-fu-xi/"/>
      <url>/2021/11/01/cc-pai-xu-suan-fa-fu-xi/</url>
      
        <content type="html"><![CDATA[<p>感谢菜鸟教程：<a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html">十大经典排序算法</a></p><h2 id="基础桶排序">基础桶排序</h2><p>进来一个数就丢数组的那个位置里，很好理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100</span>],n;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> tmp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">        a[tmp]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">99</span>;i++)</span><br><span class="line">    <span class="keyword">if</span>(a[i])<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=a[i];j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序">冒泡排序</h2><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p><p>针对所有的元素重复以上的步骤，除了最后一个。</p><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>],n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = l; j &lt;= r - i - <span class="number">1</span>; j++)</span><br><span class="line">        <span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">        swap(&amp;a[j], &amp;a[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">bubble_sort(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="选择排序">选择排序</h2><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>], n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">selection_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= r; j++) <span class="comment">//走访未排序的元素</span></span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt; a[min])</span><br><span class="line">                min = j;      <span class="comment">//找到目前最小值</span></span><br><span class="line">        swap(&amp;a[min], &amp;a[i]); <span class="comment">//做交換</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    selection_sort(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序">插入排序</h2><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>], n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertion_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> key = a[i];</span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((j &gt;= <span class="number">0</span>) &amp;&amp; (key &lt; a[j]))</span><br><span class="line">        &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        a[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    insertion_sort(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序">快速排序</h2><p>从数列中挑出一个元素，称为 “基准”（pivot）;</p><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</p><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>], n;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = l, j = r, mid = a[(l + r) / <span class="number">2</span>]; <span class="comment">//将当前序列在中间位置的数定义为分隔数</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; mid)i++; <span class="comment">//在左半部分寻找比中间数大的数</span></span><br><span class="line">        <span class="keyword">while</span> (a[j] &gt; mid)j--; <span class="comment">//在右半部分寻找比中间数小的数</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j)</span><br><span class="line">        &#123; </span><br><span class="line">            swap(&amp;a[i], &amp;a[j]);<span class="comment">//若找到一组与排序目标不一致的数对则交换它们</span></span><br><span class="line">            i++;</span><br><span class="line">            j--; <span class="comment">//继续找</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= j); <span class="comment">//注意这里不能有等号</span></span><br><span class="line">    <span class="keyword">if</span> (l &lt; j) quick_sort(l, j); <span class="comment">//若未到两个数的边界，则递归搜索左右区间</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; r) quick_sort(i, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    quick_sort(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序">归并排序</h2><p>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</p><p>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</p><p>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</p><p>重复步骤 3 直到某一指针达到序列尾；</p><p>将另一序列剩下的所有元素直接复制到合并序列尾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>], r[<span class="number">100000</span>], n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == t) <span class="keyword">return</span>; <span class="comment">//如果只有一个数字则返回，无须排序</span></span><br><span class="line"><span class="type">int</span> mid = (s + t) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">msort</span>(s, mid);   <span class="comment">//分解左序列</span></span><br><span class="line"><span class="built_in">msort</span>(mid + <span class="number">1</span>, t);   <span class="comment">//分解右序列</span></span><br><span class="line"><span class="type">int</span> i = s, j = mid + <span class="number">1</span>, k = s; <span class="comment">//接下来合并</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j]) r[k++] = a[i++];</span><br><span class="line"><span class="keyword">else</span> r[k++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) r[k++] = a[i++]; <span class="comment">//复制左边子序列剩余</span></span><br><span class="line"><span class="keyword">while</span> (j &lt;= t) r[k++] = a[j++]; <span class="comment">//复制右边子序列剩余</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= t; i++) a[i] = r[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">msort</span>(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』指针与函数传参杂谈</title>
      <link href="/2021/10/20/cc-zhi-zhen-yu-han-shu-chuan-can-za-tan/"/>
      <url>/2021/10/20/cc-zhi-zhen-yu-han-shu-chuan-can-za-tan/</url>
      
        <content type="html"><![CDATA[<p>2022-05-08更新：针对新的渲染器优化了显示</p><blockquote><p>对于大部分C语言初学者，指针是最大的一块骨头 ——沃兹基·硕德</p></blockquote><p>本节内容：</p><ul><li><p><strong>指针的简单引入</strong></p><ol><li><p>[What] 指针是什么</p></li><li><p>[Why] 为什么要用指针</p></li><li><p>[How] 指针怎么玩（声明，使用，运算，数组指针，结构体指针，函数指针）</p></li></ol></li><li><p><strong>函数传参的几种方式</strong></p><ol><li><p>值传递</p></li><li><p>地址传递</p></li><li><p>引用传递</p></li></ol></li></ul><h2 id="指针的简单引入">指针的简单引入</h2><hr><h3 id="指针是什么">指针是什么</h3><p>首先，我们要清楚指针是什么，下面是指针的原始定义</p><blockquote><p>系统在内存中，为变量（本人按：这里应加上函数）分配存储空间的首个字节单元的地址，称之为该变量的地址。地址用来标识每一个存储单元，方便用户对存储单元中的数据进行正确的访问。在高级语言中地址形象地称为指针。</p></blockquote><p>指针变量就是保存指针的变量，但很多人 <strong>将「指针变量」简称为「指针」</strong>，故本文的指针都是指针变量的意思</p><p>下面要认两个重要概念：指针的值和类型</p><p><strong>「指针的值」</strong> 内存地址一般用十六进制数表示，故 指针的值就是<strong>一个十六进制数</strong></p><p><strong>「指针的类型」</strong> 指针不仅是一个地址那么简单，对象不同则类型不同，如指向 int类型 的指针就称这个指针是 int 型的，int 型指针就只能存 int 类型变量 的地址，这种要求可以一定程度上避免混乱。指针的类型<strong>用于推断对象的长度</strong>，以便进行指针运算（后面会讲）</p><p><strong>注意：</strong><a href="https://blog.csdn.net/b1480521874/article/details/83010304">「泛型对象指针」或称「void*指针」</a>可以指向任何对象类型，但不能提供对象的长度，故无法直接运算与引用</p><p>PS：实际上在 C 中是可以隐式（或者说自动）转换的， <strong>但是在 C++ 中不能</strong> ，必须显式（或者说手动）地转换，我建议还是保留显式转换的习惯，<strong>这是一个好码风</strong></p><p>已经声明的 <strong>数组</strong> 、<strong>结构体</strong> 、<strong>函数</strong> 等本身实际上都能看作指针（准确说是常量）</p><p>一切标识符皆为指针（笑)</p><hr><h3 id="为什么要用指针">为什么要用指针</h3><p>a. 使用指针保存 <strong>变量</strong> 的地址，这样就可以通过指向某变量的指针来 <strong>间接传递或操纵</strong> 某变量</p><p>b. 使用指针保存 <strong>函数</strong> 的地址，这样就可以通过指向某变量的指针来 <strong>间接使用</strong> 某函数，不要以为这是没事找事，我们<a href="https://www.zhihu.com/question/384651967/answer/1162527103">可以通过这个模拟C++中的类</a></p><p>c. 我们可以使用指针 <strong>构建某些数据结构</strong> ，如链表，二叉树等</p><hr><h3 id="指针怎么玩">指针怎么玩</h3><p>先认识两个字符</p><ul><li><p><strong><code>&amp;</code> 取地址运算符</strong>（用于 取 某变量的地址）</p></li><li><p><strong><code>*</code>  引用运算符</strong>（用于通过地址 使用/操纵 某变量）</p></li><li><p><strong><code>*</code></strong> 也充当 <strong>类型标识符</strong>（声明的时候告诉编译器这个变量是指针）</p></li></ul><p>对于 <code>&amp;</code> ，想必大家都用过，在 <code>scanf</code> 函数 中，我们使用它向函数提供变量的地址，这样 <code>scanf</code> 就能知道将数据写入到哪个位置</p><p>对于 <code>*</code> ， 引用运算符 和 类型标识符 统称为 <strong>指针运算符</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="comment">// 给 a 的地址让scanf写入</span></span><br></pre></td></tr></table></figure><h4 id="指针的声明和初始化">指针的声明和初始化</h4><p>作为一种变量，指针的声明和初始化和普通变量形式类似</p><p>公式：<strong>类型名 <code>*</code>指针名</strong></p><p>加个 <code>*</code> 表示「指针名」是个指针，它是「类型名」类型的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p;        <span class="comment">//声明 p 是一个指针，它指向一个int，称 p 为int类型的指针，或 p 是 int* 类型的变量</span></span><br><span class="line"><span class="type">char</span> *p        <span class="comment">//声明 p 是一个指针，它指向一个char，称 p 为char类型的指针，或 p 是 char* 类型的变量</span></span><br></pre></td></tr></table></figure><p>类型标识符可以紧跟在变量名前面，也可以接在类型后面，也可以放中间，都是等效的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p;</span><br><span class="line"><span class="type">int</span> *p;      <span class="comment">//我一般用这种</span></span><br><span class="line"><span class="type">int</span> * p;</span><br></pre></td></tr></table></figure><p>混合声明是合法的，但我不觉得是好的码风</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* p,q;      <span class="comment">//声明了一个指针和一个int类型变量</span></span><br><span class="line"><span class="type">int</span> *p,q;      <span class="comment">//声明了一个指针和一个int类型变量</span></span><br><span class="line"><span class="type">int</span> * p,q;     <span class="comment">//声明了一个指针和一个int类型变量</span></span><br></pre></td></tr></table></figure><p>是变量，那当然也能构成数组，但 指针数组 和 数组指针（后面会讲） 不是一个东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *arr[<span class="number">10</span>]   <span class="comment">// 声明一个指针数组，该数组有10个元素，每个元素都是int类型的指针 </span></span><br><span class="line"><span class="type">int</span> (*arr)[<span class="number">10</span>] <span class="comment">// 声明一个数组指针，该指针指向一个int类型的一维数组</span></span><br></pre></td></tr></table></figure><p>同一般变量一样，函数外声明后内容为空（空地址叫nil），函数内声明内容不确定（指向地址不确定）<br>应尽快初始化，其实最好声明时就初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p; </span><br><span class="line">p = &amp;a;<span class="comment">//或int *p = &amp;a;一步到位</span></span><br></pre></td></tr></table></figure><p>不允许把一个地址直接赋予指针变量，必须转换为指针类型，但是允许你直接赋成NULL（空指针）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *q = <span class="number">0x000000000061FDF0</span>;     <span class="comment">//编译错误</span></span><br><span class="line"><span class="type">int</span> *q = (<span class="type">int</span>*)<span class="number">0x000000000061FDF0</span>; <span class="comment">//类型必须相同</span></span><br><span class="line"><span class="type">int</span> *q = <span class="literal">NULL</span>               <span class="comment">//空指针不等于未初始化的指针</span></span><br></pre></td></tr></table></figure><p>指针可以套娃，<a href="https://www.zhihu.com/question/459109282">结合结构体我们可以弄一些好玩的东西</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="type">int</span> **q=&amp;p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,**q);<span class="comment">//输出为10</span></span><br></pre></td></tr></table></figure><h4 id="指针的使用">指针的使用</h4><p><strong>当某指针保存了某变量的地址后，加上引用运算符就直接等价于原变量</strong></p><p>例如，指针 <code>p</code> 保存了 <code>a</code> 的地址，那么 <code>*p</code> 与 <code>a</code> 直接等同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;            <span class="comment">//p 保存了 a 的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//用 %p 输出指针的值，这里输出 a 的地址:000000000061FE14</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);    <span class="comment">//*p 与 a 等价，输出 1</span></span><br><span class="line">*p=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);     <span class="comment">//输出 3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);    <span class="comment">//输出 3</span></span><br></pre></td></tr></table></figure><p>但这句话不是完全正确的，有时，你会遇到如下的错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*p++; <span class="comment">//这看似应该等同于a++</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a); <span class="comment">//输出 3，没有加？为什么？</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p); <span class="comment">//输出 6422040，这是啥？</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *p == a); <span class="comment">//输出 0，这是啥？</span></span><br></pre></td></tr></table></figure><p>这个的具体的原因是什么 ，下面会解释<br>但你发现如果为 <code>*p</code> 加了个括号的话，就不会有问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(*p)++;               <span class="comment">//加一个括号试试</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);     <span class="comment">//输出 4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);    <span class="comment">//输出 4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p==a); <span class="comment">//输出 1，一切正常</span></span><br></pre></td></tr></table></figure><p>所以请你记住，为了保险，建议在使用指针时加个括号，并且现在可以得出下面这个结论（极其重要）</p><blockquote><p><strong>当 <code>p</code> 指向 <code>a</code> 时，<code>(*p)</code> 与 <code>a</code> 完全等效（连读三遍）</strong></p></blockquote><p>上面的例子中有 <code>*p++</code> ，那这到底是什么意义呢？这牵扯就到指针的运算</p><h4 id="指针的运算">指针的运算</h4><p>指针的运算包括「指针 ± 整型」和「指针 - 指针」</p><h5 id="「指针-±-整型」">「指针 ± 整型」</h5><p>指针加/减  <code>i</code> ，指针的值 前进/后退 <code>i</code> 个 指针类型 长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE14</span></span><br><span class="line">p++;                  <span class="comment">//因为 p 是int型指针，1个int占4字节，故前进4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE18</span></span><br></pre></td></tr></table></figure><p>对于 <code>*p++</code> 通过查表得知 <code>++</code> 和 <code>*</code> （指针运算符）优先级相同，根据右结合性先运行 <code>p++</code> ,再引用变量。</p><p>此时 <code>*p</code> 会根据当前的地址取一个 <code>int</code> 长度（4 字节）并据此返回一个 <code>int</code> ，虽然 <code>p++</code> 后 <code>p</code> 指向的不一定是一个恰当的地址，但指针不管这些，<strong>我们应避免这种情况发生</strong>，除非你能确定指针加减后也能指向一个 <code>int</code>（如数组）。<strong>也就是说，你应当只在数组中使用指针的运算</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE14</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);    <span class="comment">//输出 1</span></span><br><span class="line">*p++;                 <span class="comment">//等同于 *(p++)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE18</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);    <span class="comment">//输出 6422040（指针通过地址返回一个int，不管其他事）</span></span><br></pre></td></tr></table></figure><p>其他的举一反三</p><h5 id="「指针-指针」（没有加）">「指针 - 指针」（没有加）</h5><p>只有指向数组中的元素的指针才能相减，相减返回两者的距离（类型长度为单位），是一个整型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p1 = &amp;a[<span class="number">2</span>],*p2 = &amp;a[<span class="number">8</span>]; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p2-p1);   <span class="comment">//输出 6</span></span><br></pre></td></tr></table></figure><h4 id="数组指针">数组指针</h4><p>既然提到了数组，那么就先来说说数组的指针特性</p><p>先声明一个数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><p>还记得开头说的数组可以看作指针吗？(准确说是指针常量）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,a);           <span class="comment">//输出 000000000061FDF0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a[<span class="number">0</span>]);       <span class="comment">//输出 000000000061FDF0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,a+<span class="number">2</span>);         <span class="comment">//输出 000000000061FDF8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,&amp;a[<span class="number">2</span>]);       <span class="comment">//输出 000000000061FDF8</span></span><br></pre></td></tr></table></figure><p><strong>可见 <code>a</code> 可以看成一个 <code>int</code> 类型的指针，它的值为第一个元素（即 <code>a[0]</code> ）的地址</strong></p><p>既然是指针，我们可以用另一种方式使用数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[<span class="number">2</span>]);        <span class="comment">//输出 2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(a+<span class="number">2</span>));      <span class="comment">//输出 2</span></span><br></pre></td></tr></table></figure><p>也就是说，<strong><code>*(a + i)</code> 等同于 <code>a[ i ]</code></strong></p><p>PS:若想在调试时查看数组却突然以指针的格式显示（常见于把数组传递到其他函数时），可以在“查看”添加下面的表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="type">int</span>(*)[<span class="number">20</span>])a <span class="comment">//20是数组大小</span></span><br></pre></td></tr></table></figure><p>既然数组是指针，我们可以直接把数组赋给指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p=a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);           <span class="comment">//输出 000000000061FDF0</span></span><br></pre></td></tr></table></figure><p>这样，我们就可以通过 <code>p</code> 引用 <code>a</code> 数组了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[<span class="number">4</span>]);        <span class="comment">//输出 4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(p+<span class="number">4</span>));      <span class="comment">//输出 4</span></span><br><span class="line">*(p+<span class="number">4</span>)=<span class="number">5</span>;                   <span class="comment">//等同于 a[4]=5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[<span class="number">4</span>]);        <span class="comment">//输出 5</span></span><br></pre></td></tr></table></figure><p>下面我们来看看数组指针，但是我们先区分下 <strong>「指针数组」</strong> 和 <strong>「数组指针」</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p[<span class="number">3</span>];    <span class="comment">//声明了一个指针数组，该数组有3个元素，其中每个元素都是一个指向int类型的指针</span></span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">3</span>];  <span class="comment">//声明了一个数组指针，指向一个大小为3的int数组，或称声明了一个类型为int[3]的指针</span></span><br></pre></td></tr></table></figure><p><strong>数组指针就是指向数组的指针</strong>，对比普通指针，区别在由于对象的不同，故数组指针在进行加减法时的单位长度不同，就是说这里 <code>p + 1</code> 会让 <code>p</code> 的值增加 <code>4*3=12</code> ，数组指针一般用于配合二（多）维数组</p><p>先声明一个二维数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>再把它的值赋给数组指针 <code>p</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p=a;          </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);      <span class="comment">//输出 000000000061FE0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(*p)[<span class="number">0</span>]);<span class="comment">//输出了 a[0][0] 即 1</span></span><br><span class="line">p++;                   <span class="comment">//p 跳过了3个 int 长度，指向 a[1]</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);      <span class="comment">//输出 000000000061FE0C，步长为4*3=12</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(*p)[<span class="number">2</span>]);<span class="comment">//输出了 a[1][2] 即 6</span></span><br></pre></td></tr></table></figure><h4 id="结构指针">结构指针</h4><p>先声明一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> mark;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">a</span>;</span></span><br></pre></td></tr></table></figure><p>按照指针的声明法，声明一个 <code>struct student</code> 类型的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>=</span>&amp;a;</span><br></pre></td></tr></table></figure><p>这样，<code>(*p)</code> 就与 <code>a</code> 等价了，所以下面两句话是等价的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.mark=<span class="number">100</span>;</span><br><span class="line">(*p).mark=<span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>还有一种更简单的写法，使用  <strong>「指向结构体成员运算符」 <code>-&gt;</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;name=<span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>综上所述，下面三种形式是等价的</p><ul><li>结构体变量.成员名</li><li>(*指针变量).成员名</li><li>指针变量-&gt;成员名</li></ul><h4 id="函数指针">函数指针</h4><p>指向函数的指针叫函数指针</p><p>先声明一个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数指针的定义法： <strong>返回值类型 (* 指针变量名) ( [形参列表] );</strong></p><p>注意括号不要忘</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*p)(<span class="type">int</span>,<span class="type">int</span>);   <span class="comment">//声明 p 为一个函数指针，它能指向某个输入参数为两个int，返回参数为一个int的函数</span></span><br><span class="line">p=Max;               <span class="comment">//这样 p 就和 Max 等价了</span></span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p(x,y)); <span class="comment">//输出 2</span></span><br></pre></td></tr></table></figure><p>函数指针是一个指针，是指针就能作为变量传给函数，所以我们可以这么玩</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> (*p)(<span class="type">int</span>,<span class="type">int</span>)=Max;</span><br><span class="line"><span class="type">int</span> (*q)(<span class="type">int</span>,<span class="type">int</span>)=Min;</span><br><span class="line"><span class="comment">/*定义work函数，它的第三个参数是一个函数指针*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">work</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> (*f)(<span class="type">int</span>,<span class="type">int</span>))</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> f(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Max= %d\n&quot;</span>,work(x,y,p));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Min= %d\n&quot;</span>,work(x,y,q));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码能输入两个数，并输出最大值和最小值</p><h4 id="关于指针的两个函数">关于指针的两个函数</h4><p>严格来说，这两个是关于动态分配的，我在这也一并说了吧</p><p><strong>malloc 函数</strong></p><p>malloc 函数可用于分配若干字节的内存空间。若系统不能提供足够的内存单元，函数返回空指针 <code>NULL</code>，否则返回分配到的内存空间的起始地址。该函数对于的头文件为 <code>stdlib.h</code>，原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> size)</span>;</span><br></pre></td></tr></table></figure><p>size 表示申请空间的大小（单位为字节），返回一个 <code>void*</code> 指针，<code>void*</code> 指针在上面讲过了，这里不再提</p><p>使用举例：这里声明了一个大小为 <code>n</code> 的数组：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a;</span><br><span class="line">a = (<span class="type">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));     <span class="comment">//在 C 中，可以省略(int *)，但不建议这么做</span></span><br><span class="line"><span class="comment">//上面两行可以不严格地等价于 int a[n];</span></span><br></pre></td></tr></table></figure><p>这里将 <code>malloc</code> 返回的空指针转换成 <code>int</code> 型指针，再赋给 <code>a</code><br><code>sizeof(int)</code> 返回系统中 <code>int</code> 类型所占的字节数，<code>n * sizeof(int)</code> 表示 <code>n</code> 个 <code>int</code> 的空间大小</p><p>有申请就有释放的，下面的 <code>free</code> 函数就是 <code>malloc</code> 的反操作</p><p><strong>free 函数</strong></p><p><code>free</code> 用于释放申请的空间，原型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void free(void *p);</span><br></pre></td></tr></table></figure><p><code>p</code> 为申请空间的起始地址，执行本函数就将申请的空间返还给系统</p><p><strong>PS:指针还可以用来保存字符串常量</strong></p><p>具体用法是在初始化时给指针赋上一个字符串，该字符串会存到常量区的一个字符数组中，这个指针会指向存放这个字符数组的首地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *s;</span><br><span class="line">s=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,s); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h2 id="函数传参的几种方式">函数传参的几种方式</h2><p>虎头蛇尾…这边基本直接复制了，以后有啥再慢慢加哈</p><h3 id="值传递">值传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exchange1</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a=<span class="number">4</span>,b=<span class="number">5</span>;</span><br><span class="line">exchange1(a,b);</span><br></pre></td></tr></table></figure><p>值的确是传进去了，但 <strong>这个是没有用的</strong>，值传递只传递值，交换x和y不改变原来的a和b的值</p><h3 id="地址传递">地址传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exchange2</span><span class="params">(<span class="type">int</span> *px,<span class="type">int</span> *py)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp=*px;</span><br><span class="line">    *px=*py;</span><br><span class="line">    *py=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a=<span class="number">4</span>,b=<span class="number">5</span>;</span><br><span class="line">exchange2(&amp;a,&amp;b);</span><br></pre></td></tr></table></figure><p>将ab的地址传递给函数，对*px,*py的操作即是对a,b变量本身的操作。可以实现a,b的值交换</p><p><strong>注意：</strong> 数组的传递不管想不想传地址，你实际上传的都是地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> n)</span><span class="comment">//或 void add(int a[],int n)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]++;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="type">int</span> a[<span class="number">100</span>],n;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">   add(a,n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用传递（仅限C-）">引用传递（仅限C++）</h3><p>引用是变量的一个别名，调用这个别名和调用这个变量是完全一样的，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* c = &amp;a;<span class="comment">//c是指向a的指针</span></span><br><span class="line"><span class="type">int</span>&amp; d = b;<span class="comment">//d是b的引用，alias of b = d</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exchange3</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">3</span>,b=<span class="number">4</span>;</span><br><span class="line">exchange3(a,b);</span><br></pre></td></tr></table></figure><p>仅形式参数的格式与值传递不同，内部定义域调用与值传递完全相同，可以实现ab值得对调</p><p>因为在x,y 前有一个取地址符号&amp;，在调用exchang3(a,b)时会用a,b替换x,y,称xy引用了变量ab,在函数内部便是对实参ab进行操作了，函数 内部可以直接修改a,b的值</p><p>来源：</p><p><a href="https://www.cnblogs.com/tongye/p/9650573.html">C语言–指针详解 - tongye - 博客园</a></p><p><a href="https://www.jb51.net/article/222270.htm">C语言函数传递数组和传递地址的区别你知道吗_C 语言_脚本之家</a></p><p><a href="https://www.cnblogs.com/southcyy/p/10148153.html">函数参数传递三种方式（传值方式，地址传递，引用传递） - long_ago - 博客园</a></p><hr><p>思考题：试解释下面的现象并总结 <code>*p-=1;</code> 的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> *p=&amp;a;            <span class="comment">//p 保存了 a 的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE14</span></span><br><span class="line">    p++;       </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE18</span></span><br><span class="line">    *p-=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE17   减了1</span></span><br><span class="line">    p-=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE13</span></span><br><span class="line">    *p-=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>,p);     <span class="comment">//输出 000000000061FE13   没减</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1GJ411x7h7">参考答案</a></p>]]></content>
      
      
      <categories>
          
          <category> C / C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『树莓派』如何以正确的姿势制作树莓派的TF卡数据镜像</title>
      <link href="/2020/02/20/shu-mei-pai-ru-he-yi-zheng-que-de-zi-shi-zhi-zuo-shu-mei-pai-de-tf-qia-shu-ju-jing-xiang/"/>
      <url>/2020/02/20/shu-mei-pai-ru-he-yi-zheng-que-de-zi-shi-zhi-zuo-shu-mei-pai-de-tf-qia-shu-ju-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="准备：">准备：</h3><ol><li>Windows环境（Linux的自己安装GParted即可）</li><li>VM或VMplayer环境</li><li>GParted的iso镜像 和 Win32DiskImager</li><li>一个聪明的脑子</li></ol><p>没有VM或GParted或Win32DiskImager可以在<a href="https://pan.baidu.com/s/1kZ4GH57azLjptHebnAkG6A">这里（密码：61oq）</a>下载</p><p>（百度云盘下载慢的自行用pandownload）</p><h3 id="教程：">教程：</h3><p>先安装好所有软件，在此不再繁述</p><p>打开VM（此处以VMplayer演示，大同小异）</p><p>选择“创建新虚拟机”</p><p>安装来源选择GParted的iso镜像</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636792317804.png" alt=""></p><p>操作系统如图选择</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636792354511.png" alt=""></p><p>名称随便填</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636792372490.png" alt=""></p><p>硬盘其实可以没有，因为是从iso直接启动系统，但是硬要填的话就填个最小值好了</p><h1 id=""></h1><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636792390725.png" alt=""></p><p>内存其实100M即可，默认256M也无妨</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636793137789.png" alt=""></p><p>之后启动，一路按默认选择按Enter</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798423089.png" alt=""></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798426202.png" alt=""></p><p>语言输入26也就是简体中文</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798455027.png" alt=""></p><p>启动方式输入0</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798480266.png" alt=""></p><p>启动完成后让虚拟机连接你的TF读卡器（如果通过USB3.0的话在 管理-&gt;虚拟机设置-&gt;USB控制器 自行设置）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798499927.png" alt=""></p><p>之后打开GParted</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798518711.png" alt=""></p><p>在选项卡中选择你的TF卡</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798540753.png" alt=""></p><p>右键-&gt;更改大小/移动</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798562193.png" alt=""></p><p>把区间右端点（数学乱入）尽量往左移动，把空白区域压掉</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798589287.png" alt=""></p><p>之后应用更改</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798606638.png" alt=""></p><p>将TF卡退出虚拟机（之后主机就可以找到）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798621949.png" alt=""></p><p>打开Win32DiskImager，选择对应盘符，写入文件名，使用“读取”功能（记得打勾“仅读取已分配分区”）</p><p>之后就完了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636798637007.png" alt=""></p><p>备份完成后记得重新拓展一下分区，否则后面的空间就无法使用</p><p>当然，你也可以选择在备份之前在raspi-config里面打开“下一次启动时拓展分区”，这样以后应该直接用Win32DiskImager写入就行了，不需要再手动拓展（当然我没试过）</p><p>如有建议和意见，欢迎提出</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『树莓派』Minecraft超长开服折腾记录（Java+基岩with红石）</title>
      <link href="/2020/01/26/shu-mei-pai-minecraft-chao-chang-kai-fu-zhe-teng-ji-lu-javaji-yan-with-hong-shi/"/>
      <url>/2020/01/26/shu-mei-pai-minecraft-chao-chang-kai-fu-zhe-teng-ji-lu-javaji-yan-with-hong-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="【原创】树莓派Minecraft超长开服折腾记录（Java版-基岩版-with-红石）">【原创】树莓派Minecraft超长开服折腾记录（Java版+基岩版 with 红石）</h1><h2 id="更新：现在基岩版服务器最佳方案是Java-Geyser">更新：现在基岩版服务器最佳方案是Java+<a href="https://github.com/GeyserMC/Geyser">Geyser</a></h2><p>我去…这他妈的终于成功了</p><p>折腾时长长达半年啊，从学期初到末再到放寒假再到春节，今天可是大年初二</p><p>本教程制作匆忙，很多东西都是点到为止，而且也没有什么图片（以后可能会配图），也肯定会有纰漏或者错误，请多多包涵</p><p>目录：</p><ul><li><p>Java版篇</p></li><li><p>基岩版篇（Nukkit(X)，Pocketmine-MP，官方服务端）</p></li></ul><p>好了，废话不多说，开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir minecraft &amp;&amp; cd minecraft</span><br></pre></td></tr></table></figure><h2 id="Java版篇">Java版篇</h2><p>Java极其简单，且容易地可跨平台，但与基岩版相比代码效率更低</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir Java &amp;&amp; cd Java</span><br></pre></td></tr></table></figure><h4 id="1-搭建Java环境">1.搭建Java环境</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install default-jdk</span><br></pre></td></tr></table></figure><p>不行就百度，再不行就谷歌，<a href="https://www.linuxidc.com/Linux/2018-05/152248.htm">这篇</a>或许有帮助</p><h4 id="2-下载服务器jar">2.下载服务器jar</h4><p>这里有多种选择，可以<a href="https://www.minecraft.net/zh-hans/download/server/">官方下载</a></p><p>也可以通过<a href="https://yivesmirror.com/downloads/paper">Paper</a>或者<a href="https://getbukkit.org/download/spigot">spigot</a>获得对应的版本，基本上是一样的，但据说spigot的效率更高一些</p><p>这里下载目前最新官方jar链接举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://launcher.mojang.com/v1/objects/bb2b6b1aefcd70dfd1892149ac3a215f6c636b07/server.jar</span><br></pre></td></tr></table></figure><h4 id="3-运行jar">3.运行jar</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar server.jar</span><br></pre></td></tr></table></figure><p>之后提示需要同意EULA协议并自动退出，这时候打开同目录下的eula.txt并把false改成true就可以了，此处点到为止</p><p>修改之后再次运行，成功</p><h3 id="更多参考资料（点到为止）：">更多参考资料（点到为止）：</h3><ol><li><a href="https://minecraft-zh.gamepedia.com/Server.properties">编辑server.properties以配置服务器</a></li><li><a href="https://www.mcbbs.net/thread-478126-1-1.html">性能提升</a></li><li><a href="https://www.jianshu.com/p/0702a451dd0c">使用screen更方便地管理服务器</a></li></ol><p>仍不能解决？<a href="https://www.mcbbs.net/thread-770886-1-1.html">这篇</a>或许有帮助</p><h2 id="基岩版篇">基岩版篇</h2><p>好了重头戏来了，这里我卡了太太太久</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line">mkdir bedrock &amp;&amp; cd bedrock</span><br></pre></td></tr></table></figure><p>首先，先简单介绍一下目前可供选择的服务器端软件和</p><ol><li>官方的bedrock_server（目前只有x64而没有arm的）</li><li>国人领导开发的Nukkit（或者说NukkitX，基于Java）</li><li>只支持64位系统的PocketMine-MP（基于PHP）</li></ol><p>注意“只支持64位系统”不是说只支持x64，树莓派上也可以安装64位Linux来运行Pocketmine-MP</p><hr><h3 id="Nukkit（NukkitX）">Nukkit（NukkitX）</h3><p>Nukkit极其简单，因为它基于Java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir nukkit &amp;&amp; cd nukkit</span><br></pre></td></tr></table></figure><h4 id="1-搭建Java环境-2">1.搭建Java环境</h4><p><s>上面不是讲过了嘛…人家不讲了</s></p><h4 id="2-下载Nukkit的jar-这个链接总是指向最新的jar）">2.下载Nukkit的jar(这个链接总是指向最新的jar）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/lastSuccessfulBuild/artifact/target/nukkit-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><h4 id="3-运行jar-2">3.运行jar</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar nukkit-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>之后自己选择语言，配置server.properties（上面有），这里不讲了</p><hr><h4 id="Nukkit更多参考资料：">Nukkit更多参考资料：</h4><ol><li><a href="https://nukkitx.com/">NukkitX官网</a></li><li><a href="https://ci.nukkitx.com/job/NukkitX/job/Nukkit/job/master/">Jenkins页面（下载页面）</a></li><li><a href="https://www.mcbbs.net/thread-810442-1-1.html">[0.16-1.14.x][Nukkit|NukkitX][NPS] 已配置纯净服务端合集 - Nukkit服务端整合 - Minecraft(我的世界)中文论坛 </a></li><li><a href="https://www.mcbbs.net/forum.php?mod=viewthread&amp;tid=553920&amp;gdbiecjmohdbimop">[原创] 超简单的 Nukkit 三步开服教程，Windows Linux MacOS 系统通吃 - Nukkit服务端专区 - Minecraft(我的世界)中文论坛</a></li><li><a href="https://www.mcbbs.net/thread-887267-1-1.html?tdsourcetag=s_pctim_aiomsg">超简单Nukkit开服法+映射到外网教程 - Nukkit服务端专区 - Minecraft(我的世界)中文论坛</a></li></ol><p>但是，有个很严峻的问题，它不能完整地拥有MCPE中所有的组件，如生物自然生成，红石等，而且生成的地貌极其难看，一点都不像原版中的地形地貌</p><p>不过，有很多插件可以使用，可以模拟官方的一些功能，但是，我找不到红石的mod啊（也可能是我太菜了）</p><p>于是乎？继续下一个尝试————</p><hr><h3 id="PocketMine-MP">PocketMine-MP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir pocketmine &amp;&amp; cd pocketmine</span><br></pre></td></tr></table></figure><p>这个相对复杂</p><p>首先，你需要一个64位Linux，这有点难搞（What？)</p><p>其次，你执行官方的自动安装脚本是行不通的（What？）</p><p>好吧，这就需要耐心了，你想，我都一路摸索过来了，你再难有我难？</p><h4 id="0-准备64位Linux">0.准备64位Linux</h4><p>第0步？是的呢</p><p>你可能也感觉有点崩溃，又要烧录一次？</p><p>没事的，<s>不要来，慢慢急</s> 不要急，慢慢来，给点耐心好吧</p><p>这里选择你喜欢的Linux都可以，但是我可以推荐一个<a href="http://blog.pifan.org/index.php/article-categories/pi64/">「树莓派爱好者基地」推出的系统</a></p><p>新手甚至可能会卡在这个“第0步”</p><p>这里需要折腾的事情对于新手来说甚至可能比搭建MC服务器更多，但是，相信自己能解决所有的问题好吧</p><p>关于配置64位系统的问题去参考官方教程，我这里点到为止好了</p><p>目前，假如你配置好了64位系统，请往下面操作</p><h4 id="1-准备PHP环境">1.准备PHP环境</h4><p>你以为apt就可以了吗？No！No！No！</p><p>Pocketmine-MP需要一大堆PHP拓展，最关键的一个是php-pthreads</p><p>可以apt啊！</p><p>那你来啊！</p><p>安装这个拓展，需要在编译的时候要指定开启zts（好像是这个名字）</p><p>但是apt下来的PHP这个zts是没有打开的，要开启要只能重新编译</p><p>那…PocketMine不是给了一些编译好的二进制文件吗？</p><p>我试了啊！没一个能用的（7456）</p><p>那…源码编译可以吗？</p><p>或许可以，但是我没能成功（太烦了）</p><p>最最最后，我找到一个<a href="https://github.com/pmmp/php-build-scripts">Pocketmine-MP帮助编译PHP的github项目</a></p><p>所以我们可以——</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install make libtool m4 wget gzip bzip2 bison g++ git cmake m4 bison pkg-config libtool libtool-bin</span><br><span class="line">#准备编译软件</span><br><span class="line"></span><br><span class="line">git clone https://github.com/pmmp/php-build-scripts</span><br><span class="line"></span><br><span class="line">cd php-build-scripts</span><br><span class="line"></span><br><span class="line">bash compile.sh</span><br><span class="line">#注意，这需要大约一两个小时（真的）</span><br></pre></td></tr></table></figure><p>完成之后，你会发现你当前目录下会多一个 bin 文件夹，这个等下再说</p><h4 id="2-安装PoketMine-MP">2. 安装PoketMine-MP</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br></pre></td></tr></table></figure><p>直接使用git，其他的方法不要信</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive --depth 1 https://github.com/pmmp/pocketmine-mp.git pocketmine-mp.git </span><br></pre></td></tr></table></figure><p>之后把刚才得到的 bin 文件夹复制进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r php-build-scripts/bin/ pocketmine-mp.git/</span><br></pre></td></tr></table></figure><p>之后需要获取PocketMine-MP.phar</p><p>你可以从它GitHub的releases找到，也可以从其他渠道</p><p>我直接从jenkins获取最新成功的phar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://jenkins.pmmp.io/job/PocketMine-MP/lastSuccessfulBuild/artifact/PocketMine-MP.phar</span><br></pre></td></tr></table></figure><h4 id="3-启动">3.启动</h4><p>之后直接运行start.sh即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ./start.sh</span><br></pre></td></tr></table></figure><p>自己根据向导配置服务器端啦</p><p>完成</p><p>但是它还是有很多不足的，缺点与Nukkit相似：很多官方的东西都没有</p><p>但是它有一个<a href="https://poggit.pmmp.io/ci/tedo0627/RedstoneCircuit_PMMP-Plugin/RedstoneCircuit">红石的插件</a>，很赞！</p><hr><h4 id="PocketMine-MP更多参考资料：">PocketMine-MP更多参考资料：</h4><ol><li><a href="https://pmmp.readthedocs.io/en/rtfd/installation.html">安装— PocketMine-MP文档</a></li><li><a href="http://www.pocketmine.net/">Pocketmine-MP旧官网</a></li><li><a href="https://pmmp.io/">Pocketmine-MP新官网</a></li><li><a href="https://github.com/genboy/pocketmineplugins">官方列出的一些mod</a></li></ol><hr><h3 id="官方的Bedrock-server">官方的Bedrock-server</h3><p>出于对完美的追求，我去尝试了官方的服务器软件</p><p>官方也给出了<a href="https://www.minecraft.net/zh-hans/download/server/bedrock/">官方的服务器端</a>，既有Windows也有Ubantu</p><p>但是，它们是基于x64的，所以一个都用不了</p><p>所以…wine？</p><p>错了，应该尝试qemu-user，wine我试了是不能解决问题的</p><p>有人还提出了提前安卓的arm平台的APK安装包加自己制作运行程序来制成官方的服务器环境，据称性能很好，但是我尝试的<a href="https://encom.eu.org/posts/minecraft-bedrock-raspi/">教程</a>并没有成功（我感觉它被砍掉了一部分？？？）</p><p>注意：下面尝试qemu的这个实例基本没有任何尝试的意义，因为即使你成功运行了，应该还是会和我一样卡得要死（我用的是顶配树莓派4）</p><p>好吧还是记录一下过程</p><p>首先准备qemu-user</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt search qemu-user-static</span><br></pre></td></tr></table></figure><p>之后获取官网的Ubantu版本的服务端软件（略）</p><p>目前假定你已经展开安装包进入目录</p><p>尝试运行，会提示缺少依赖</p><p>这时，需要从x64的Linux里cp一些库文件进来（你说烦不烦）</p><p>需要复制的目录有三个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/lib64</span><br><span class="line">/lib/x86_64-linux-gnu</span><br><span class="line">/usr/lib/x86_64-linux-gnu</span><br></pre></td></tr></table></figure><p>之后可以调用qume-user运行，但是卡的要死，CPU真的是全功率运行的</p><p>玩还是可以勉强玩的…但是真的很卡，几乎无法投入实用</p><p>所以…最终还是不尽人意啊，但是PocketMine有个红石，我觉得差强人意</p><hr><h4 id="Bedrock-server-on-arm的更多参考资料：">Bedrock-server on arm的更多参考资料：</h4><p>我尝试之后发现Google上也有一个差不多的<a href="https://jamesachambers.com/official-minecraft-bedrock-dedicated-server-on-raspberry-pi/">教程</a></p><p>还发现有个脚本帮你完成上面的操作（大概是）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/TheRemote/MinecraftBedrockServer/master/SetupMinecraft.sh</span><br></pre></td></tr></table></figure><h2 id="结语">结语</h2><p>关于内网穿透，很多人都推荐免费的<a href="https://www.natfrp.org/">Sakura Frp</a></p><p>但是秉承着一分钱一分货的思想</p><p>我推荐<a href="https://cloud.zhexi.tech/auth/signin">哲西云</a></p><p>一位数RMB买到永久的内网穿透（每月限流1GB）</p><p>我一路上真的学了挺多的，这个折腾的确挺有意义的</p><p>最后总结一句话：<strong>人生在于折腾！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『C/C++』2019CSP模板</title>
      <link href="/2019/11/14/cc-2019csp-mo-ban/"/>
      <url>/2019/11/14/cc-2019csp-mo-ban/</url>
      
        <content type="html"><![CDATA[<h3 id="快读">快读</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> s=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">   <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)w=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">   <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) s=s*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>,ch=<span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">return</span> s*w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序对">逆序对</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s == t) <span class="keyword">return</span>; <span class="comment">//如果只有一个数字则返回，无须排序 </span></span><br><span class="line"><span class="type">int</span> mid=(s+t)/<span class="number">2</span>; </span><br><span class="line"><span class="built_in">msort</span>(s,mid); <span class="comment">//分解左序列 </span></span><br><span class="line"><span class="built_in">msort</span>(mid+<span class="number">1</span>,t); <span class="comment">//分解右序列</span></span><br><span class="line"><span class="type">int</span> i = s, j = mid + <span class="number">1</span>, k = s; <span class="comment">//接下来合并</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= a[j])r[k++] = a[i++];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r[k++] = a[j++]; ans += mid - i + <span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//统计产生逆序对的数量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) r[k++] = a[i++]; <span class="comment">//复制左边子序列剩余 </span></span><br><span class="line"><span class="keyword">while</span>(j&lt;=t)r[k++]=a[j++];<span class="comment">//复制右边子序列剩余</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = s; i &lt;= t; i++) a[i] = r[i]; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素Dijkstra">朴素Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1024</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> to, next, w;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="type">int</span> head[M], cnt, n, m, s, cur;</span><br><span class="line"><span class="type">bool</span> v[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> d[N], Min;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++cnt].next = head[a];</span><br><span class="line">edge[cnt].to = b;</span><br><span class="line">edge[cnt].w = c;</span><br><span class="line">head[a] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); s = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)d[i] = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a=<span class="built_in">read</span>(), b=<span class="built_in">read</span>(), c=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">add</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">d[s] = <span class="number">0</span>; cur = s;</span><br><span class="line"><span class="keyword">while</span> (!v[cur])</span><br><span class="line">&#123;</span><br><span class="line">v[cur] = <span class="number">1</span>; Min = INF;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[cur]; i; i = edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!v[edge[i].to] &amp;&amp; d[edge[i].to] &gt; d[cur] + edge[i].w)</span><br><span class="line">d[edge[i].to] = d[cur] + edge[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (!v[i] &amp;&amp; Min &gt; d[i])</span><br><span class="line">&#123;</span><br><span class="line">Min = d[i];</span><br><span class="line">cur = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, d[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先队列优化的Dijkstra">优先队列优化的Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="comment">//memset(d, 0x3f, sizeof(d));</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)d[i] = INF;</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, s));</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> now = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (v[now])<span class="keyword">continue</span>;</span><br><span class="line">v[now] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[now]; i; i = edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> son = edge[i].to;</span><br><span class="line"><span class="keyword">if</span> (d[son] &gt;= d[now] + edge[i].w)</span><br><span class="line">&#123;</span><br><span class="line">d[son] = d[now] + edge[i].w;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-d[son], son));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准他死了SPFA">标准<s>他死了</s>SPFA</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SPFA</span><span class="params">(<span class="type">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (i != s)d[i] = INF;</span><br><span class="line">q.<span class="built_in">push</span>(s); vis[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[x]; i; i = edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> son = edge[i].to;</span><br><span class="line"><span class="keyword">if</span> (d[son] &gt; d[x] + edge[i].w;)</span><br><span class="line">&#123;</span><br><span class="line">d[son] = d[x] + edge[i].w;</span><br><span class="line"><span class="keyword">if</span> (!vis[son])</span><br><span class="line">&#123;</span><br><span class="line">q.<span class="built_in">push</span>(son);</span><br><span class="line">vis[son] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准弗洛伊德">标准弗洛伊德</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= n; k++) <span class="comment">//枚举断点</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//S</span></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++) <span class="comment">//T</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (d[i][k] + d[k][j] &lt; d[i][j]) </span><br><span class="line">&#123;</span><br><span class="line">d[i][j] = d[i][k] + d[k][j];</span><br><span class="line">path[i][j] = path[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查集有向图查找最小环">查集有向图查找最小环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200002</span>;</span><br><span class="line"><span class="type">int</span> f[N], d[N], n, Min=INF;</span><br><span class="line"><span class="comment">//f[i]:i的祖先节点 d[i]:i到祖先节点的距离</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fa</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f[x] != x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> last = f[x];</span><br><span class="line">f[x] = <span class="built_in">fa</span>(f[x]);</span><br><span class="line">d[x] += d[last];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">fa</span>(a), y = <span class="built_in">fa</span>(b);</span><br><span class="line"><span class="keyword">if</span> (x != y)</span><br><span class="line">&#123;</span><br><span class="line">f[x] = y;</span><br><span class="line">d[a] = d[b] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Min = <span class="built_in">min</span>(Min, d[a] + d[b] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;C:\\Users\\97618\\Desktop\\input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)f[i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">check</span>(i, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//https://www.luogu.org/problem/P2661</span></span><br></pre></td></tr></table></figure><h3 id="Kruskal最小生成树">Kruskal最小生成树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> il inline</span></span><br><span class="line"><span class="function">il <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    re <span class="type">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c&lt;<span class="string">&#x27;0&#x27;</span>||c&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;c=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">&#125;edge[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> fa[<span class="number">5005</span>],n,m,ans,eu,ev,cnt;</span><br><span class="line"><span class="function">il <span class="type">bool</span> <span class="title">cmp</span><span class="params">(Edge a,Edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快排的依据（按边权排序）</span></span><br><span class="line"><span class="function">il <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x!=fa[x]) x=fa[x]=fa[fa[x]];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//并查集循环实现模板，及路径压缩，不懂并查集的同学可以戳一戳代码上方的“并查集详解”</span></span><br><span class="line"><span class="function">il <span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edge,edge+m,cmp);</span><br><span class="line">    <span class="comment">//将边的权值排序</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        eu=<span class="built_in">find</span>(edge[i].u), ev=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(eu==ev)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若出现两个点已经联通了，则说明这一条边不需要了</span></span><br><span class="line">        ans+=edge[i].w;</span><br><span class="line">        <span class="comment">//将此边权计入答案</span></span><br><span class="line">        fa[ev]=eu;</span><br><span class="line">        <span class="comment">//将eu、ev合并</span></span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束条件，及边数为点数减一时</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化并查集</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge[i].u=<span class="built_in">read</span>(),edge[i].v=<span class="built_in">read</span>(),edge[i].w=<span class="built_in">read</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prim最小生成树">Prim最小生成树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;q;</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in">sizeof</span>(v));</span><br><span class="line">d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span> (tot&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> now = q.<span class="built_in">top</span>().second; q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span> (v[now])<span class="keyword">continue</span>;</span><br><span class="line">v[now] = <span class="number">1</span>; ans += d[now]; tot++;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[now]; i; i = edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> son = edge[i].to;</span><br><span class="line"><span class="keyword">if</span> (v[son])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (d[son] &gt;= <span class="comment">/*d[now] +*/</span> edge[i].w)</span><br><span class="line">&#123;</span><br><span class="line">d[son] = <span class="comment">/*d[now] +*/</span> edge[i].w;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(-d[son], son));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tarjan强连通分量">Tarjan强连通分量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Tarjan</span><span class="params">(<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[now] = low[now] = ++Time;</span><br><span class="line">S.<span class="built_in">push</span>(now); inS[now] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[now]; i; i = edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> son = edge[i].to;</span><br><span class="line"><span class="keyword">if</span> (!dfn[son])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(son);</span><br><span class="line">low[now] = <span class="built_in">min</span>(low[now], low[son]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (inS[son])</span><br><span class="line">low[now] = <span class="built_in">min</span>(low[now], dfn[son]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line"><span class="keyword">if</span> (low[now] == dfn[now])</span><br><span class="line">&#123;</span><br><span class="line">ring++;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">k = S.<span class="built_in">top</span>(); S.<span class="built_in">pop</span>();</span><br><span class="line">inS[k] = <span class="number">0</span>;</span><br><span class="line">            belone[k]=ring;</span><br><span class="line">            ringsize[ring]++;</span><br><span class="line"><span class="comment">//===================这里吐出来的k都是同一个环中的元素======================</span></span><br><span class="line"><span class="comment">//=========================自行对k做需要的处理============================</span></span><br><span class="line">&#125; <span class="keyword">while</span> (now != k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Tarjan割点">Tarjan割点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N (1000000+10)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[N],next[N],head[N],dfn[N],low[N],Time,size;</span><br><span class="line"><span class="type">bool</span> cut[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[++size]=y;</span><br><span class="line">next[size]=head[x];</span><br><span class="line">head[x]=size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> snum = <span class="number">0</span>;</span><br><span class="line">dfn[now] = low[now] = ++Time;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[now]; i; i = edge[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> son = edge[i].to;</span><br><span class="line"><span class="keyword">if</span> (!dfn[son])</span><br><span class="line">&#123;</span><br><span class="line">snum++;</span><br><span class="line"><span class="built_in">tarjan</span>(son,fa);</span><br><span class="line">low[now] = <span class="built_in">min</span>(low[now], low[son]);</span><br><span class="line"><span class="keyword">if</span> (low[son] &gt;= dfn[now] &amp;&amp; now != fa)cut[now] = <span class="literal">true</span>;<span class="comment">//两个条件</span></span><br><span class="line"><span class="keyword">if</span> (now == fa &amp;&amp; snum &gt;= <span class="number">2</span>)cut[now] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> low[now] = <span class="built_in">min</span>(low[now], dfn[son]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp1,tmp2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;tmp1,&amp;tmp2);</span><br><span class="line"><span class="built_in">add</span>(tmp1,tmp2);</span><br><span class="line"><span class="built_in">add</span>(tmp2,tmp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(!dfn[i])<span class="built_in">tarjan</span>(i,i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(cut[i])ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(cut[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序">拓扑排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,w,next;</span><br><span class="line">&#125;a[<span class="number">100024</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100024</span>],rd[<span class="number">100024</span>],in[<span class="number">100024</span>],dp[<span class="number">100024</span>],n,m,size,Max;</span><br><span class="line"><span class="type">bool</span> stop[<span class="number">10024</span>],done[<span class="number">10024</span>][<span class="number">10024</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">拓扑排序执行步骤</span></span><br><span class="line"><span class="comment">由AOV网构造拓扑序列的拓扑排序算法主要是循环执行以下两步，直到不存在入度为0的顶点为止。</span></span><br><span class="line"><span class="comment">(1) 选择一个入度为0的顶点并输出之；</span></span><br><span class="line"><span class="comment">(2) 从网中删除此顶点及所有出边。</span></span><br><span class="line"><span class="comment">循环结束后，若输出的顶点数小于网中的顶点数，则输出“有回路”信息，否则输出的顶点序列就是一种拓扑序列。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[++size].to=y;</span><br><span class="line">    a[size].next=head[x];</span><br><span class="line">    head[x]=size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tuopusort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//选择入度为0的点一起处理 </span></span><br><span class="line">    <span class="keyword">if</span>(rd[i]==<span class="number">0</span>)</span><br><span class="line">    q.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fa=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();<span class="comment">//一个一个吐出来处理 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[fa];i;i=a[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> son=a[i].to;</span><br><span class="line">            rd[son]--;</span><br><span class="line">            <span class="keyword">if</span>(rd[son]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(son);</span><br><span class="line">                dp[son]=<span class="built_in">max</span>(dp[fa]+<span class="number">1</span>,dp[son]);</span><br><span class="line">                Max=<span class="built_in">max</span>(dp[son],Max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> s;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s);</span><br><span class="line">        <span class="built_in">memset</span>(stop,<span class="number">0</span>,<span class="built_in">sizeof</span>(stop));</span><br><span class="line">        <span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="built_in">sizeof</span>(in));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=s;j++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;in[j]),stop[in[j]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=in[<span class="number">1</span>];j&lt;=in[s];j++)</span><br><span class="line">        <span class="keyword">if</span>(!stop[j])</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=s;k++)</span><br><span class="line">        <span class="keyword">if</span>(!done[j][in[k]])</span><br><span class="line">        &#123;</span><br><span class="line">            done[j][in[k]]=<span class="number">1</span>;</span><br><span class="line">            rd[in[k]]++;</span><br><span class="line">            <span class="built_in">add</span>(j,in[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">tuopusort</span>();</span><br><span class="line">    cout&lt;&lt;Max+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分最大值最小">二分最大值最小</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分最小值最大">二分最小值最大</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展欧几里得">扩展欧几里得</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b);</span><br><span class="line">    k=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=k-a/b*y;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素并查集">朴素并查集</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,p,x,y,fa[<span class="number">10009</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x!=fa[x]) x=fa[x]=fa[fa[x]];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">combine</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fa[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">combine</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LCA最近公共祖先-倍增">LCA最近公共祖先(倍增)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> depth[N], f[N][<span class="number">22</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> fa)</span><span class="comment">//初始调用dfs(root, 0);</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">depth[now] = depth[fa] + <span class="number">1</span>;</span><br><span class="line">f[now][<span class="number">0</span>] = fa;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">21</span>; i++)</span><br><span class="line">f[now][i] = f[f[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = head[now]; i; i = edge[i].next)</span><br><span class="line"><span class="keyword">if</span> (edge[i].to != fa)</span><br><span class="line"><span class="built_in">dfs</span>(edge[i].to, now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (depth[x] &lt; depth[y])<span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">21</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (depth[f[x][i]] &gt;= depth[y])</span><br><span class="line">x = f[x][i];</span><br><span class="line"><span class="keyword">if</span> (x == y)<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">21</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (f[x][i] != f[y][i])</span><br><span class="line">x = f[x][i], y = f[y][i];</span><br><span class="line"><span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂取模">快速幂取模</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">QuickPow</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x %= z;</span><br><span class="line"><span class="type">int</span> res = x;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (y &amp; <span class="number">1</span>)ans = ans * res % z;</span><br><span class="line">res = res * res % z;</span><br><span class="line">y = y &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans % z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准看毛片KMP">标准<s>看毛片</s>KMP</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000024</span>;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="type">int</span> next[N],n,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Getnext</span><span class="params">()</span><span class="comment">//针对子串 </span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;b.<span class="built_in">length</span>())<span class="comment">//从头到尾 </span></span><br><span class="line">      <span class="keyword">if</span>(j==<span class="number">-1</span> || b[i]==b[j])<span class="comment">//匹配成功，继续下一个字符 </span></span><br><span class="line">          next[++i]=++j;</span><br><span class="line">      <span class="keyword">else</span> j=next[j];<span class="comment">//不成功，回调再匹配</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">KMP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;a.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || a[i]==b[j])<span class="comment">//j==-1（开头跳位）或a[i]==b[j]匹配成功，令i++，j++，继续匹配下一个字符 </span></span><br><span class="line">            i++,j++;</span><br><span class="line">        <span class="keyword">else</span> j=next[j];<span class="comment">//不成功，进行合理移动，再来一遍 </span></span><br><span class="line">        <span class="keyword">if</span>(j==b.<span class="built_in">length</span>())<span class="comment">//末尾成功，整串成功，输出结果并移动再继续 </span></span><br><span class="line">        &#123;</span><br><span class="line">            j=next[j];</span><br><span class="line">            cout&lt;&lt;i-b.<span class="built_in">length</span>()+<span class="number">1</span>&lt;&lt;endl;<span class="comment">//母串位置-子串长度+1 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">Getnext</span>();</span><br><span class="line">    <span class="built_in">KMP</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=b.<span class="built_in">length</span>();++i) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,next[i]);<span class="comment">//输出next数组（实际上不同版本有不同），此处真正使用的部分是 0~lenb-1 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ST之区间最大值">ST之区间最大值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>], st[<span class="number">100001</span>][<span class="number">100</span>],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)st[i][<span class="number">0</span>] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">log2</span>(n); j++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">            st[i][j] = <span class="built_in">max</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">prework</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="欧拉筛质数">欧拉筛质数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> vis[maxn],prime[N],cnt=<span class="number">0</span>;<span class="comment">//cnt用来计数，prime数组保存素数 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prework</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])prime[cnt++]=i;<span class="comment">//如果未被标记过，则表示为素数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;cnt &amp;&amp; i*prime[j]&lt;=n;j++)<span class="comment">//当标记的合数超出范围则退出 </span></span><br><span class="line">&#123;</span><br><span class="line">vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">//关键步骤 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isprime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> vis[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树状数组1：单点修改">树状数组1：单点修改</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">1010000</span>;</span><br><span class="line"><span class="type">int</span> a[MAX], c[MAX], n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = x; i; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">ans += c[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updata</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = x; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">c[i] += y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), <span class="built_in">updata</span>(i,a[i]);</span><br><span class="line"><span class="keyword">while</span> (m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> f,x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;f, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span> (f == <span class="number">1</span>)<span class="built_in">updata</span>(x, y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (f == <span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">getsum</span>(y) - <span class="built_in">getsum</span>(x<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树状数组2：区间修改">树状数组2：区间修改</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//树状数组代码 </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,q,m,mod,x,y,tree[<span class="number">500001</span>];</span><br><span class="line"><span class="function">ll <span class="title">lowbit</span><span class="params">(ll num)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> num&amp;-num;<span class="comment">//返回值为二进制下num从左往右第一个1的位置 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll s,ll num)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ll i=s;i&lt;=n;i+=<span class="built_in">lowbit</span>(i)) tree[i]+=num;<span class="comment">//当s在i的范围内 第num位数组加上num </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll s)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i=s;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i)) ans+=tree[i];<span class="comment">//建树的反操作 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;m);</span><br><span class="line"><span class="built_in">build</span>(i,m);<span class="comment">//建立树状数组 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;mod,&amp;x,&amp;y);<span class="comment">//输入1或2 </span></span><br><span class="line"><span class="keyword">if</span>(mod==<span class="number">1</span>) <span class="built_in">build</span>(x,y);<span class="comment">//修改与建树可以共用一个函数 </span></span><br><span class="line"><span class="keyword">if</span>(mod==<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">ask</span>(y)-<span class="built_in">ask</span>(x<span class="number">-1</span>)<span class="comment">/*思考为什么是x-1*/</span>);<span class="comment">//区间查询则为右边界前缀和减去左边界前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树1">线段树1</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> pre, add;</span><br><span class="line">&#125;t[<span class="number">4</span>*N+<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> a[N], n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t[x].l = l; t[x].r = r;</span><br><span class="line"><span class="keyword">if</span> (l == r)</span><br><span class="line">&#123;</span><br><span class="line">t[x].pre = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(x * <span class="number">2</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(x * <span class="number">2</span> + <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">t[x].pre = t[x * <span class="number">2</span>].pre + t[x * <span class="number">2</span> + <span class="number">1</span>].pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t[x].add)</span><br><span class="line">&#123;</span><br><span class="line">t[x * <span class="number">2</span>].pre += t[x].add * (t[x * <span class="number">2</span>].r - t[x * <span class="number">2</span>].l + <span class="number">1</span>);</span><br><span class="line">t[x * <span class="number">2</span> + <span class="number">1</span>].pre += t[x].add * (t[x * <span class="number">2</span> + <span class="number">1</span>].r - t[x * <span class="number">2</span> + <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">t[x * <span class="number">2</span>].add += t[x].add;</span><br><span class="line">t[x * <span class="number">2</span> + <span class="number">1</span>].add += t[x].add;</span><br><span class="line">t[x].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r)</span><br><span class="line">&#123;</span><br><span class="line">t[p].pre += (<span class="type">long</span> <span class="type">long</span>)z * (t[p].r - t[p].l + <span class="number">1</span>);</span><br><span class="line">t[p].add += z;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid)<span class="built_in">change</span>(p * <span class="number">2</span>, x, y, z);</span><br><span class="line"><span class="keyword">if</span> (y &gt; mid)<span class="built_in">change</span>(p * <span class="number">2</span> + <span class="number">1</span>, x, y, z);</span><br><span class="line">t[p].pre = t[p * <span class="number">2</span>].pre + t[p * <span class="number">2</span> + <span class="number">1</span>].pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= t[p].l &amp;&amp; y &gt;= t[p].r) <span class="keyword">return</span> t[p].pre;</span><br><span class="line"><span class="built_in">pushdown</span>(p);</span><br><span class="line"><span class="type">int</span> mid = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= mid) ans += <span class="built_in">ask</span>(p * <span class="number">2</span>, x, y);</span><br><span class="line"><span class="keyword">if</span> (y &gt; mid) ans += <span class="built_in">ask</span>(p * <span class="number">2</span> + <span class="number">1</span>, x, y);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> q, x, y, z;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line"><span class="keyword">if</span> (q == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line"><span class="built_in">change</span>(<span class="number">1</span>, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">ask</span>(<span class="number">1</span>, x, y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段树2">线段树2</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> son1 x*2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> son2 x*2+1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000000</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n, m, ans, MOD;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">kuai</span></span><br><span class="line">&#123;</span><br><span class="line">ll l, r, w, add, mul;</span><br><span class="line">&#125;s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch&lt;<span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">build</span><span class="params">(ll x, ll L, ll R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[x] = kuai&#123; L,R,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (L == R)</span><br><span class="line"><span class="keyword">return</span> s[x].w = <span class="built_in">read</span>() % MOD;</span><br><span class="line">ll mid = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> s[x].w = (<span class="built_in">build</span>(son1, L, mid) + <span class="built_in">build</span>(son2, mid + <span class="number">1</span>, R)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s[son1].add = (s[x].add + s[son1].add * s[x].mul) % MOD;</span><br><span class="line">s[son2].add = (s[x].add + s[son2].add * s[x].mul) % MOD;</span><br><span class="line">s[son1].mul = (s[son1].mul * s[x].mul) % MOD;</span><br><span class="line">s[son2].mul = (s[son2].mul * s[x].mul) % MOD;</span><br><span class="line">s[son1].w = (s[son1].w * s[x].mul + s[x].add * (s[son1].r - s[son1].l + <span class="number">1</span>)) % MOD;</span><br><span class="line">s[son2].w = (s[son2].w * s[x].mul + s[x].add * (s[son2].r - s[son2].l + <span class="number">1</span>)) % MOD;</span><br><span class="line">s[x].add = <span class="number">0</span>;</span><br><span class="line">s[x].mul = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll x, ll L, ll R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">down</span>(x);</span><br><span class="line"><span class="keyword">if</span> (s[x].l &gt;= L &amp;&amp; s[x].r &lt;= R)</span><br><span class="line"><span class="keyword">return</span> s[x].w % MOD;</span><br><span class="line">ll mid = (s[x].l + s[x].r) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= mid)ans += <span class="built_in">ask</span>(son1, L, R);</span><br><span class="line"><span class="keyword">if</span> (R &gt; mid)ans += <span class="built_in">ask</span>(son2, L, R);</span><br><span class="line"><span class="keyword">return</span> ans % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updata</span><span class="params">(ll x, ll w, ll typ, ll L, ll R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">down</span>(x);</span><br><span class="line"><span class="keyword">if</span> (typ == <span class="number">1</span> &amp;&amp; s[x].l &gt;= L &amp;&amp; s[x].r &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line">s[x].mul = (s[x].mul * w) % MOD;</span><br><span class="line">s[x].add = (s[x].add * w) % MOD;</span><br><span class="line">s[x].w = (s[x].w * s[x].mul) % MOD;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (typ == <span class="number">2</span> &amp;&amp; s[x].l &gt;= L &amp;&amp; s[x].r &lt;= R)</span><br><span class="line">&#123;</span><br><span class="line">s[x].add = (s[x].add + w) % MOD;</span><br><span class="line">s[x].w = (s[x].w + s[x].add * (s[x].r - s[x].l + <span class="number">1</span>)) % MOD;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll mid = (s[x].l + s[x].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (L &lt;= mid)<span class="built_in">updata</span>(son1, w, typ, L, R);</span><br><span class="line"><span class="keyword">if</span> (R &gt; mid)<span class="built_in">updata</span>(son2, w, typ, L, R);</span><br><span class="line">s[x].w = s[son1].w + s[son2].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>(); MOD = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n); m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (ll i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">ll typ = <span class="built_in">read</span>(), x = <span class="built_in">read</span>(), y = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span> (typ != <span class="number">3</span>)<span class="built_in">updata</span>(<span class="number">1</span>, <span class="built_in">read</span>(), typ, x, y);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">ask</span>(<span class="number">1</span>, x, y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="背包九讲">背包九讲</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">01</span>背包</span><br><span class="line">    </span><br><span class="line">初始化</span><br><span class="line">    恰好装满：f[x]=-INF;f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">没有要求装满：f[x]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">f[i][j]=<span class="built_in">max</span>(f[i−<span class="number">1</span>][j],f[i−<span class="number">1</span>][j−v[i]]+c[i]);</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + c[i]);<span class="comment">//空间优化</span></span><br><span class="line"></span><br><span class="line">常数优化</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> bound = <span class="built_in">max</span>(V - sum&#123;v[i]...v[n]&#125;, v[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= bound, j--)</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////</span></span><br><span class="line">完全背包</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = v[i]; j &lt;= V; j++)</span><br><span class="line">        f[i][j]=<span class="built_in">max</span>(f[i−<span class="number">1</span>][j],f[i][j−v[i]]+c[i])</span><br><span class="line">        f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + c[i]);<span class="comment">//空间优化</span></span><br><span class="line"></span><br><span class="line">也可转<span class="number">01</span>求解（二进拆分）</span><br><span class="line"></span><br><span class="line">优化：</span><br><span class="line">    若两件物品i、j满足j的体积大而价值比i小，则将物品j去掉</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////</span></span><br><span class="line">多重背包（单种物品有多个）</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i]; j--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= p[i] &amp;&amp; k*v[i]; k++)</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - k * v[i]] + k * c[i]);</span><br><span class="line"></span><br><span class="line">转<span class="number">01</span>求解（二进拆分）</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="built_in">min</span>(p[i], V / v[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; num &gt; <span class="number">0</span>; k &lt;&lt;= <span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt; num) k = num+;</span><br><span class="line">num -= k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= v[i] * k; j--)</span><br><span class="line">f[j] = <span class="built_in">max</span>(f[j], f[j - v[i] * k] + c[i] * k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////</span></span><br><span class="line">混合背包</span><br><span class="line">    </span><br><span class="line">第一重<span class="keyword">for</span>总写，后面的用<span class="keyword">if</span>分类区别处理即可</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////</span></span><br><span class="line">二维费用背包(“最多K件物品”等隐式条件)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = V; a &gt;= v[i]; a--)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = M; b &gt;= m[i]; b--)</span><br><span class="line">            f[i][a][b] = <span class="built_in">max</span>(f[i−<span class="number">1</span>][a][b], f[i−<span class="number">1</span>][a−v[i]][b−m[i]] + c[i]);</span><br><span class="line">            f[a][b] = <span class="built_in">max</span>(f[a][b], f[a - v[i]][b - m[i]] + c[i]);</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////</span></span><br><span class="line">分组背包（每组最多一个）</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (所有的组k)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = V; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        <span class="keyword">for</span> (所有属于组k的i)</span><br><span class="line">            f[j] = max&#123;f[j], f[j - v[i]] + c[i]&#125;</span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////</span></span><br></pre></td></tr></table></figure><h3 id="莫队">莫队</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1024</span>;</span><br><span class="line"><span class="type">int</span> a[N], cnt[N], belong[N];</span><br><span class="line"><span class="type">int</span> n, m, len, kuainum, now, ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">kuai</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l, r, id;</span><br><span class="line">&#125; q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> s = <span class="number">0</span>, w = <span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)w = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line"><span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) s = s * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> s * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(kuai a, kuai b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//对于左端点在同一奇数块的区间，右端点按升序排列，反之降序</span></span><br><span class="line"><span class="keyword">return</span> (belong[a.l] ^ belong[b.l]) ? belong[a.l] &lt; belong[b.l] : ((belong[a.l] &amp; <span class="number">1</span>) ? a.r &lt; b.r : a.r &gt; b.r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!cnt[a[pos]]) ++now;</span><br><span class="line">++cnt[a[pos]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> pos)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">--cnt[a[pos]];</span><br><span class="line"><span class="keyword">if</span> (!cnt[a[pos]]) --now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line">len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">kuainum = <span class="built_in">ceil</span>((<span class="type">double</span>)n / len);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= kuainum; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = (i - <span class="number">1</span>) * len + <span class="number">1</span>; j &lt;= i * len; j++) </span><br><span class="line">belong[j] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = <span class="built_in">read</span>();</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">q[i].l = <span class="built_in">read</span>(), q[i].r = <span class="built_in">read</span>();</span><br><span class="line">q[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> ql = q[i].l, qr = q[i].r;</span><br><span class="line"><span class="keyword">while</span> (l &lt; ql) <span class="built_in">del</span>(l++);</span><br><span class="line"><span class="keyword">while</span> (l &gt; ql) <span class="built_in">add</span>(--l);</span><br><span class="line"><span class="keyword">while</span> (r &lt; qr) <span class="built_in">add</span>(++r);</span><br><span class="line"><span class="keyword">while</span> (r &gt; qr) <span class="built_in">del</span>(r--);</span><br><span class="line">ans[q[i].id] = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="杂">杂</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max(a,b) ((a)&gt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a,b) ((a)&lt;(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; q;</span><br><span class="line"><span class="built_in">reverse</span>()</span><br><span class="line"><span class="built_in">next_permutation</span>()</span><br><span class="line"></span><br><span class="line">字符串转数字 </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">atoi</span><span class="params">(字符数组)</span>或<span class="type">int</span> <span class="title">atoi</span><span class="params">(字符串.c_str())</span> </span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">atol</span><span class="params">()</span> <span class="type">double</span> <span class="title">atof</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">strtol</span><span class="params">(字符串.c_str(),<span class="literal">NULL</span>,某进制)</span><span class="comment">//字符串转10进制</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">手动排列/组合 </span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span> </span></span></span><br><span class="line"><span class="function"><span class="keyword">using</span> <span class="keyword">namespace</span> std</span>; </span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>],v[<span class="number">1000</span>],n,k; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt,<span class="type">int</span> num)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//组合 for(int i=num+1;i&lt;=n;i++) </span></span><br><span class="line">        <span class="keyword">if</span>(!v[i]) </span><br><span class="line">        &#123; </span><br><span class="line">            a[cnt]=i; </span><br><span class="line">            v[i]=<span class="number">1</span>; </span><br><span class="line">            <span class="keyword">if</span>(cnt==k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">                    cout&lt;&lt;a[i];</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">dfs</span>(cnt+<span class="number">1</span>,i); </span><br><span class="line">            v[i]=<span class="number">0</span>; </span><br><span class="line">        &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k; </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">最大公约数和最小公倍数</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / <span class="built_in">gcd</span>(a, b) * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">优化的普通质数判断</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Is_prime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">3</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">6</span> != <span class="number">1</span> &amp;&amp; n % <span class="number">6</span> != <span class="number">5</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">5</span>; i * i &lt;= n; i += <span class="number">6</span>)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span> || n % (i + <span class="number">2</span>) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cin提速</span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>); </span><br></pre></td></tr></table></figure><p>思维导图：<br><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636791340631.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『考试总结』190731</title>
      <link href="/2019/07/31/kao-shi-zong-jie-190731/"/>
      <url>/2019/07/31/kao-shi-zong-jie-190731/</url>
      
        <content type="html"><![CDATA[<h2 id="试题：CZYZ2017-夏令营-NOIP-模拟赛（提高组）-2017-年-8-月-4-日">试题：CZYZ2017 夏令营 NOIP 模拟赛（提高组） 2017 年 8 月 4 日</h2><h4 id="得分：40-300（不想说话了）">得分：40/300（不想说话了）</h4><h3 id="T1-传送带（10分）">T1:<a href="https://www.luogu.org/problem/P2571">传送带</a>（10分）</h3><p>这题要用三分，但是我们没有学过，我考试的时候也没有想出其他方法，只考虑了特殊情况</p><p><a href="https://www.luogu.org/blog/five20/solution-p2571">较好的题解</a></p><h3 id="T2-疯狂的火神（0分）">T2:<a href="https://blog.csdn.net/doyouseeman/article/details/52206142">疯狂的火神</a>（0分）</h3><p>这道题用数学推关系，考场直接暴搜但是居然没有拿分，肯定有地方错了</p><p>菜就是菜啊。。。以后考场也要试着去推关系，另外，背包差不多被我忘光了</p><h3 id="T3：火神的鱼-30分）">T3：<a href="https://www.cnblogs.com/jefflyy/p/7747327.html">火神的鱼</a>(30分）</h3><p>线段树</p><p>但是我一开始没有注意鱼只会往x与y的正方向游，所以不会打线段树，只好暴搜，30分</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法』总结欧几里得算法及拓展</title>
      <link href="/2019/07/23/suan-fa-zong-jie-ou-ji-li-de-suan-fa-ji-tuo-zhan/"/>
      <url>/2019/07/23/suan-fa-zong-jie-ou-ji-li-de-suan-fa-ji-tuo-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="真TMD难啊！！！！我真的想-欧几里得">真TMD难啊！！！！我真的想*欧几里得</h1><p>好吧难还是得学啊。。。9九月就初赛</p><h2 id="①欧几里得算法">①欧几里得算法</h2><p>这东西很简单啊。。就记个结论就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcd(a,b)=gcd(b,a%b)</span><br></pre></td></tr></table></figure><p>然后就没有了</p><h2 id="②欧几里得算法的应用">②欧几里得算法的应用</h2><p>这东西就是用来求最大公约数的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的才是难点</p><h2 id="③欧几里得算法拓展">③欧几里得算法拓展</h2><p>欧几里得算法拓展用于求</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>ax</mtext><mrow><mo>+</mo><mi>b</mi><mi>y</mi></mrow><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\text{ax}{+ by} = \gcd\left( a,b \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">ax</span></span><span class="mord"><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>的其中一组解</p><p>具体过程如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext> ax</mtext><mn>1</mn></msub><msub><mrow><mo>+</mo><mi>b</mi><mi>y</mi></mrow><mn>1</mn></msub><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\text{\ ax}_{1}{+ by}_{1} = \gcd\left( a,b \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mord"><span class="mord text"><span class="mord"> ax</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>利用欧几里得公式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mo>&gt;</mo><msub><mtext>bx</mtext><mn>2</mn></msub><msub><mrow><mo>+</mo><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">%</mi><mi>b</mi><mo stretchy="false">)</mo><mi>y</mi></mrow><mn>2</mn></msub><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mi mathvariant="normal">%</mi><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">= &gt; \text{bx}_{2}{+ (a\% b)y}_{2} = \gcd\left( b,a\% b \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">=&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.2997em;"></span><span class="mord"><span class="mord text"><span class="mord">bx</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord">+</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord">%</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord">%</span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>可以重复利用欧几里得公式，到最后一层b会变成0</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mo>&gt;</mo><mo stretchy="false">(</mo><mo>…</mo><mo stretchy="false">)</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><mo>…</mo><mo stretchy="false">)</mo><msub><mi>y</mi><mi>i</mi></msub><mtext> </mtext><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mo>…</mo><mo separator="true">,</mo><mn>0</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">= &gt; (\ldots)x_{i} + (\ldots)y_{i}\  = \gcd\left( \ldots,0\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">=&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="minner">…</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="minner">…</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p><p>最终b变成0时，最后一层的x与y可以求出来</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>ax</mtext><mi>i</mi></msub><msub><mrow><mo>+</mo><mi>b</mi><mi>y</mi></mrow><mi>i</mi></msub><mo>=</mo><mi>gcd</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mi>a</mi><mo separator="true">,</mo><mn>0</mn><mo fence="true">)</mo></mrow><mo>=</mo><mi>a</mi><mtext> </mtext><mo>∴</mo><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">{\text{ax}}_{i}{+ by}_{i} = \gcd\left( a,0 \right) = a\ \therefore x_{i} = 1,y_{i} = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mord"><span class="mord"><span class="mord text"><span class="mord">ax</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2175em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span style="margin-right:0.01389em;">g</span>cd</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mord mathnormal">a</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>现在看上下层的回溯关系</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mi mathvariant="normal">%</mi><mi>b</mi><mo>=</mo><mi>a</mi><mo>−</mo><mo stretchy="false">[</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">]</mo><mo>×</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a\% b = a - \lbrack\frac{a}{b}\rbrack \times b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord mathnormal">a</span><span class="mord">%</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p>但是第一步先要利用上面这个公式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>ax</mtext><mn>1</mn></msub><msub><mrow><mo>+</mo><mi>b</mi><mi>y</mi></mrow><mn>1</mn></msub><mo>=</mo><msub><mtext>bx</mtext><mn>2</mn></msub><mo>+</mo><msub><mrow><mo stretchy="false">(</mo><mi>a</mi><mi mathvariant="normal">%</mi><mi>b</mi><mo stretchy="false">)</mo><mi>y</mi></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\text{ax}_{1}{+ by}_{1} = \text{bx}_{2} + {(a\% b)y}_{2} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mord"><span class="mord text"><span class="mord">ax</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord">+</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">bx</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.2997em;"></span><span class="mord"><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord">%</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mi>b</mi><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mrow><mo fence="true">(</mo><mi>a</mi><mo>−</mo><mrow><mo fence="true">[</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo fence="true">]</mo></mrow><mo>×</mo><mi>b</mi><mo fence="true">)</mo></mrow><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">= bx_{2} + \left( a - \left\lbrack \frac{a}{b} \right\rbrack \times b \right)y_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.836em;vertical-align:-0.686em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mi>a</mi><msub><mi>y</mi><mn>2</mn></msub><mo>+</mo><mi>b</mi><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mrow><mo fence="true">[</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo fence="true">]</mo></mrow><mo>×</mo><mi>b</mi><mo>×</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">= ay_{2} + bx_{2} - \left\lbrack \frac{a}{b} \right\rbrack \times b \times y_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">b</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.836em;vertical-align:-0.686em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>=</mo><mi>a</mi><msub><mi>y</mi><mn>2</mn></msub><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mrow><mo fence="true">[</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo fence="true">]</mo></mrow><mo>×</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">= ay_{2} + b(x_{2} - \left\lbrack \frac{a}{b} \right\rbrack \times y_{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.836em;vertical-align:-0.686em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>所以上下层的x与y的关系:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><mrow><mo fence="true">[</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo fence="true">]</mo></mrow><mo>×</mo><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_{i} = y_{i + 1}y_{i} = x_{i + 1} - \left\lbrack \frac{a}{b} \right\rbrack \times y_{i + 1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.836em;vertical-align:-0.686em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">[</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">]</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>之后一层一层回退，求出x1与y1就是最终结果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exgcd</span>(b,a%b);</span><br><span class="line">    k=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=k-a/b*y;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="④欧几里得算法拓展的应用">④欧几里得算法拓展的应用</h2><p>欧几里得还可以求解下面的这种式子或者逆元也可以（逆元我实在不会啊）</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">ax + by = m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></span></p><p>首先要判断这种式子有没有解</p><p>所以我们要介绍一下贝祖定理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果a、b是整数，那么一定存在整数x、y使得ax+by=gcd(a,b)。</span><br></pre></td></tr></table></figure><p>换句话说，如果ax+by=m有解，那么m一定是gcd(a,b)的若干倍。</p><p>有一个直接的应用就是 如果ax+by=1有解，那么gcd(a,b)=1(所以欧几里得还可以用来求满足 ax mod b = 1 的最小正整数 x）</p><p>反正就是如果那个式子有解，把a与b同时乘k倍，使得gcd(ak,bk)=m</p><p>再用之前的方法求解就可以了（指求一组解，不可能求出所有解的）</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法』总结区间操作</title>
      <link href="/2019/07/17/suan-fa-zong-jie-qu-jian-cao-zuo/"/>
      <url>/2019/07/17/suan-fa-zong-jie-qu-jian-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="差分数组例题：P1083-借教室">差分数组例题：<a href="https://www.luogu.org/problemnew/show/P1083">P1083 借教室</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>],b[<span class="number">1000000</span>],c[<span class="number">1000000</span>],d[<span class="number">1000000</span>],x[<span class="number">1000000</span>],y[<span class="number">1000000</span>],n,m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in">sizeof</span>(b));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">&#123;</span><br><span class="line">b[x[i]] += d[i];</span><br><span class="line">b[y[i]+<span class="number">1</span>] -= d[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i] = c[i - <span class="number">1</span>] + b[i];</span><br><span class="line"><span class="keyword">if</span> (c[i] &gt; a[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;d[i], &amp;x[i], &amp;y[i]);</span><br><span class="line"><span class="type">int</span> l = <span class="number">1</span>, r = m;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check</span>(mid))l = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l == m)cout &lt;&lt; <span class="string">&quot;0&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl &lt;&lt; l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调数组数组例题：P1886-滑动窗口">单调数组数组例题：<a href="https://www.luogu.org/problemnew/show/P1886">P1886 滑动窗口</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; Max;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; Min;</span><br><span class="line"><span class="type">int</span> n, k, a[<span class="number">10000000</span>],Maxans[<span class="number">10000000</span>], Minans[<span class="number">10000000</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MAXmoveR</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Max.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">Max.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!Max.<span class="built_in">empty</span>() &amp;&amp; a[Max.<span class="built_in">back</span>()] &lt;= a[x])Max.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="keyword">if</span>(Max.<span class="built_in">empty</span>() || (!Max.<span class="built_in">empty</span>() &amp;&amp; a[Max.<span class="built_in">back</span>()] &gt;= a[x]))Max.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MAXmoveL</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Max.<span class="built_in">empty</span>() &amp;&amp; Max.<span class="built_in">front</span>() &lt; x)Max.<span class="built_in">pop_front</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MINmoveR</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Min.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">Min.<span class="built_in">push_back</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!Min.<span class="built_in">empty</span>() &amp;&amp; a[Min.<span class="built_in">back</span>()] &gt;= a[x])Min.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="keyword">if</span> (Min.<span class="built_in">empty</span>() || (!Min.<span class="built_in">empty</span>() &amp;&amp; a[Min.<span class="built_in">back</span>()] &lt;= a[x]))Min.<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MINmoveL</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Min.<span class="built_in">empty</span>() &amp;&amp; Min.<span class="built_in">front</span>() &lt; x)Min.<span class="built_in">pop_front</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n ,&amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)<span class="built_in">MAXmoveR</span>(i), <span class="built_in">MINmoveR</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = k+<span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">Maxans[++Maxans[<span class="number">0</span>]] = a[Max.<span class="built_in">front</span>()];</span><br><span class="line">Minans[++Minans[<span class="number">0</span>]] = a[Min.<span class="built_in">front</span>()];</span><br><span class="line"><span class="built_in">MAXmoveL</span>(i - k + <span class="number">1</span>); <span class="built_in">MINmoveL</span>(i - k + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">MAXmoveR</span>(i);<span class="built_in">MINmoveR</span>(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Maxans[++Maxans[<span class="number">0</span>]] = a[Max.<span class="built_in">front</span>()];</span><br><span class="line">Minans[++Minans[<span class="number">0</span>]] = a[Min.<span class="built_in">front</span>()];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Minans[<span class="number">0</span>]; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Minans[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= Maxans[<span class="number">0</span>]; i++)<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Maxans[i]);</span><br><span class="line"><span class="comment">//system(&quot;pause&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ST表-P3865-【模板】ST表">ST表:<a href="https://www.luogu.org/problemnew/show/P3865">P3865 【模板】ST表</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>], st[<span class="number">100001</span>][<span class="number">100</span>],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prework</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)st[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">log2</span>(n); j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++)</span><br><span class="line">st[i][j] = <span class="built_in">max</span>(st[i][j - <span class="number">1</span>], st[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">prework</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> l, r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『算法』总结KMP算法</title>
      <link href="/2019/07/15/suan-fa-zong-jie-kmp-suan-fa/"/>
      <url>/2019/07/15/suan-fa-zong-jie-kmp-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="【字符串】总结KMP算法">【字符串】总结KMP算法</h1><h3 id="buildtime-2019年7月15日">buildtime:2019年7月15日</h3><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是实现一个next()函数，函数本身包含了模式串的局部匹配信息。时间复杂度O(m+n)。</p><p>先放两篇比较好的资料:</p><p><a href="https://blog.csdn.net/v_july_v/article/details/7041827#t9">从头到尾彻底理解KMP（2014年8月22日版）</a></p><p><a href="https://www.bilibili.com/video/av22409335?from=search&amp;seid=11824929690341424834">[KMP算法]NEXT数列手算演示</a></p><p>KMP的算法流程：</p><p>假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置</p><ul><li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li><li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。</li></ul><p>换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值，即移动的实际位数为：j - next[j]，且此值大于等于1。</p><p>计算NEXT数组流程：</p><p>将前缀后缀相同数组去掉最后一个值，在前面加上-1即可（某些版本还有总体+1）</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000024</span>;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="type">int</span> next[N],n,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Getnext</span><span class="params">()</span><span class="comment">//针对子串 </span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;b.<span class="built_in">length</span>())<span class="comment">//从头到尾 </span></span><br><span class="line">  <span class="keyword">if</span>(j==<span class="number">-1</span> || b[i]==b[j])<span class="comment">//匹配成功，继续下一个字符 </span></span><br><span class="line">      next[++i]=++j;</span><br><span class="line">  <span class="keyword">else</span> j=next[j];<span class="comment">//不成功，回调再匹配</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">KMP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;a.<span class="built_in">length</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span> || a[i]==b[j])<span class="comment">//j==-1（开头跳位）或a[i]==b[j]匹配成功，令i++，j++，继续匹配下一个字符 </span></span><br><span class="line">i++,j++;</span><br><span class="line"><span class="keyword">else</span> j=next[j];<span class="comment">//不成功，进行合理移动，再来一遍 </span></span><br><span class="line"><span class="keyword">if</span>(j==b.<span class="built_in">length</span>())<span class="comment">//末尾成功，整串成功，输出结果并移动再继续 </span></span><br><span class="line">&#123;</span><br><span class="line">j=next[j];</span><br><span class="line">cout&lt;&lt;i-b.<span class="built_in">length</span>()+<span class="number">1</span>&lt;&lt;endl;<span class="comment">//母串位置-子串长度+1 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">Getnext</span>();</span><br><span class="line"><span class="built_in">KMP</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=b.<span class="built_in">length</span>();++i) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,next[i]);<span class="comment">//输出next数组（实际上不同版本有不同），此处真正使用的部分是 0~lenb-1 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『树莓派』搭建私有云服务器（Nextcloud）</title>
      <link href="/2019/07/10/shu-mei-pai-da-jian-si-you-yun-fu-wu-qi-nextcloud/"/>
      <url>/2019/07/10/shu-mei-pai-da-jian-si-you-yun-fu-wu-qi-nextcloud/</url>
      
        <content type="html"><![CDATA[<h1 id="【整理】树莓派搭建私有云服务器（Nextcloud）">【整理】树莓派搭建私有云服务器（Nextcloud）</h1><h3 id="buildtime-2019年7月10日">buildtime:2019年7月10日</h3><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801011783.jpg" alt=""></p><p>刚刚考完期末考，真的是累死。这个项目其实我去年就做过，现在想重新总结一下。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="purple"><mstyle mathcolor="white"><mtext>最详细也最正式地</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{purple}{\color{white}{\text{最详细也最正式地}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833em;vertical-align:-0.3em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833em;"><span style="top:-2.9833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="stretchy colorbox" style="height:1.2833em;background-color:purple;"></span></span><span style="top:-3.2833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord cjk_fallback" style="color:white;">最详细也最正式地</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span> 教授大家如何实现这个项目。</p><h2 id="我的配置-2">我的配置</h2><ol><li><a href="https://item.taobao.com/item.htm?spm=a230r.1.14.171.5d443e96TAhsHn&amp;id=42379193345&amp;ns=1&amp;abbucket=13#detail">树莓派3A+</a>一块</li><li>聪明的脑子一个</li></ol><p>树莓派其实可以使用其他任意版本（zerow也可以，虽然很卡但是仍可以正常使用）</p><p>请事先调试好你的树莓派确保能正常上网和连接，如有异议请点击<a href="http://shumeipai.nxez.com/hot-explorer#beginner">这里</a>入门</p><h2 id="好的我们开始！">好的我们开始！</h2><h2 id="Step0：基础知识">Step0：基础知识</h2><p>首先你需要有一个总体的概念才能一步步完成这个项目</p><p>好的，首先，我们要搭建一个私有云服务器</p><p>私有云服务器说白了就是运行私有云的一个网站服务器</p><p>要搭建一个网站，就不得不提一个词：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="purple"><mstyle mathcolor="white"><mtext>LAMP</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{purple}{\color{white}{\text{LAMP}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833em;vertical-align:-0.3em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833em;"><span style="top:-2.9833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="stretchy colorbox" style="height:1.2833em;background-color:purple;"></span></span><span style="top:-3.2833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord" style="color:white;">LAMP</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></p><p>何为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="purple"><mstyle mathcolor="white"><mtext>LAMP</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{purple}{\color{white}{\text{LAMP}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833em;vertical-align:-0.3em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833em;"><span style="top:-2.9833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="stretchy colorbox" style="height:1.2833em;background-color:purple;"></span></span><span style="top:-3.2833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord" style="color:white;">LAMP</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span> ？</p><p>这里引用百度百科：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="brown"><mstyle mathcolor="white"><mtext>LAMP是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写：</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{brown}{\color{white}{\text{LAMP是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写：}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833em;vertical-align:-0.3em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833em;"><span style="top:-2.9833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="stretchy colorbox" style="height:1.2833em;background-color:brown;"></span></span><span style="top:-3.2833em;"><span class="pstrut" style="height:3.2833em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord" style="color:white;">LAMP</span><span class="mord cjk_fallback" style="color:white;">是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写：</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></p><ol><li><strong>L</strong>inux，操作系统</li><li><strong>A</strong>pache，网页服务器</li><li><strong>M</strong>ariaDB或<strong>M</strong>ySQL，数据库管理系统（或者数据库服务器）</li><li><strong>P</strong>HP、<strong>P</strong>erl或<strong>P</strong>ython，脚本语言</li></ol><p>也就是说，要有LAMP环境你的那些PHP或HTML写的网站后台程序才能正常运行</p><p>其实我们还需要加入一个软件：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="green"><mstyle mathcolor="white"><mtext>PhpMyAdmin</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{green}{\color{white}{\text{PhpMyAdmin}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4889em;vertical-align:-0.4944em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9944em;"><span style="top:-2.9944em;"><span class="pstrut" style="height:3.4889em;"></span><span class="stretchy colorbox" style="height:1.4889em;background-color:green;"></span></span><span style="top:-3.4889em;"><span class="pstrut" style="height:3.4889em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord" style="color:white;">PhpMyAdmin</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4944em;"><span></span></span></span></span></span></span></span></span></p><p>phpMyAdmin 是一个以PHP为基础，以Web-Base方式架构在网站主机上的MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库。</p><p>为什么还要这个呢？因为Nextcloud还需要许多php的拓展才能运行，安装phpMyAdmin能自动分析依赖包来顺带安装拓展，不喜欢这样的话就“sudo apt-get install php-拓展名称”来安装吧</p><p>关于数据库，MySQL有一个更简单的代替方案：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="green"><mstyle mathcolor="white"><mtext>SQLite</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{green}{\color{white}{\text{SQLite}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4778em;vertical-align:-0.4944em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833em;"><span style="top:-2.9833em;"><span class="pstrut" style="height:3.4778em;"></span><span class="stretchy colorbox" style="height:1.4778em;background-color:green;"></span></span><span style="top:-3.4778em;"><span class="pstrut" style="height:3.4778em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord" style="color:white;">SQLite</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4944em;"><span></span></span></span></span></span></span></span></span></p><p>你可以选用SQLite，这样配置会简单一些，而且据说速度也会更快，但SQLite是用于小型设备的，而Nextcloud是被设计在大企中运行的，所以Nextcloud会不建议你用SQLite（管他呢，我做出来就我一个人用）</p><p>这里的PHP我们将使用PHP7.3版本</p><p>所以我们需要先搭建LAMP环境，然后在将Nextcloud安装在上面运行即可</p><p>可以了，你现在应该我们的步骤是什么了</p><h2 id="Step1：换源">Step1：换源</h2><p>换源又是什么？？？</p><p>好吧， 在树莓派中的/etc/apt/sources.list里面放着更新源信息，当我们用apt-get下载软件的时候，都会去文件里找去哪个服务器下载。但是树莓派是人家外国人的，更新源默认都是外国服务器，我们下载软件自然很吃力</p><p>所以我们要换成国内的服务器，这样速度会快一些</p><p>需要注意的是，不要更改系统版本，我之前就是把新系统Buster改成了stretch导致了安装软件的错误，我还大骂这个新系统怎么这么多bug，真是错怪树莓派基金会了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801060820.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">首先打开文件</span><br><span class="line"></span><br><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">把原来的源地址删掉。然后把下面新的的源地址复制进去</span><br><span class="line"></span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/</span><br></pre></td></tr></table></figure><p>复制好了以后点击ctrl -x保存退出</p><p>输入下面指令更新一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>完成了换源操作，其实网上还有关于换源<a href="https://www.cnblogs.com/xiangzhuo/p/9431502.html">更详细的知识</a></p><h2 id="Step2：搭建LAMP环境">Step2：搭建LAMP环境</h2><h3 id="①-Linux">① Linux</h3><p><s>你早就有了，不管</s></p><h3 id="②-Apache">② Apache</h3><p>Apache是世界使用排名第一的Web服务器软件（开放源码的网页服务器）。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一</p><p>用下面指令下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure><p>关于Apache，还需要修改一个配置文件</p><p>打开文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure><p>把文件中下图位置的None改成All(可以使用搜索功能）</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801091898.png" alt=""></p><h3 id="③-MySQL抑或是SQLite">③ MySQL抑或是SQLite</h3><p>MySQL是最好的关系数据库管理系统应用软件，其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><p>用下面指令下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line"></span><br><span class="line">#如果你跟我一样报错的话，就改用MariaDB吧，它是MySQL的一个分支，是差不多的</span><br><span class="line">sudo apt-get install  mariadb-server-10.0</span><br></pre></td></tr></table></figure><p>MySQL占用内存太大，而SQLite是一款轻量级零配置数据库，非常适合在树莓派和其他嵌入式系统中使用。</p><p>用下面指令下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sqlite sqlite3</span><br></pre></td></tr></table></figure><p>个人建议，<s>SQLite而不是MySQL</s>去丢个硬币决定最好</p><p>如果你用的是MySQL，那么现在要配置MySQL的root用户的密码（懒得弄的就用SQLite吧！）</p><p>按照下面的步骤做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -uroot</span><br><span class="line">#进入mysql</span><br><span class="line"></span><br><span class="line">#在里面输入以指定mysql数据库</span><br><span class="line">USE mysql;</span><br><span class="line">#这里的123456就是要设置的密码，可以自己变通</span><br><span class="line">UPDATE user SET password=PASSWORD(&#x27;123456&#x27;) WHERE user=&#x27;root&#x27;;</span><br><span class="line">UPDATE user SET plugin=&#x27;mysql_native_password&#x27; WHERE user=&#x27;root&#x27;;</span><br><span class="line">#刷新信息</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">#退出MySQL</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line">#现在我们退出了，重启MySQL</span><br><span class="line">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure><p>Okay</p><h3 id="④-PHP7-3">④ PHP7.3</h3><p>PHP是一种通用开源脚本语言。语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。</p><p>用下面指令下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php7.3 libapache2-mod-php7.3  php7.3-sqlite3 php7.3-int php-imagick php-apcu redis-server php-redis</span><br><span class="line"></span><br><span class="line">ps:如果这条命令没有正常运行，请把7.3版本改为7.0试一下，并且把下面nextcloud的版本改为14.0.14</span><br></pre></td></tr></table></figure><h3 id="⑤-phpMyAdmin">⑤ phpMyAdmin</h3><p><s>这东西是什么已经说过了，不讲</s></p><p>输入下面指令（你会发现会安装只需安装一(a)点(lot)点(of)东西)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin</span><br></pre></td></tr></table></figure><p>下载过程中按下图进行选择<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mpadded width="+6pt" height="+6pt" lspace="3pt" voffset="3pt" mathbackground="red"><mstyle mathcolor="white"><mtext>(第一个注意要按一下空格有星号表示选中！！！）</mtext></mstyle></mpadded></mrow><annotation encoding="application/x-tex">\colorbox{red}{\color{white}{\text{(第一个注意要按一下空格有星号表示选中！！！）}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6em;vertical-align:-0.55em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-3.05em;"><span class="pstrut" style="height:3.6em;"></span><span class="stretchy colorbox" style="height:1.6em;background-color:red;"></span></span><span style="top:-3.6em;"><span class="pstrut" style="height:3.6em;"></span><span class="mord boxpad"><span class="mord" style="color:white;"><span class="mord text" style="color:white;"><span class="mord" style="color:white;">(</span><span class="mord cjk_fallback" style="color:white;">第一个注意要按一下空格有星号表示选中！！！）</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.55em;"><span></span></span></span></span></span></span></span></span></p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801113905.png" alt=""></p><p>接下来这个东西按否</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636819466073.png" alt=""></p><p>完成！</p><h2 id="Step3：下载Nextcloud">Step3：下载Nextcloud</h2><p>NextCloud 是一款开源网络硬盘系统。任何人都可以自由的获取 NextCloud 程序，在家庭或公司构建私有且免费的网络硬盘。它是完全由你用户控制的私有、安全且功能完整的文件同步与共享解决方案。更关键的是Nextcloud在PC抑或是手机上都能访问。</p><p>用下面指令下载和完成安装</p><p>但因为Nextcloud的服务器在海外，下载很慢，建议用<a href="http://idman.ys168.com/">IDM</a>使用32线程弄下来再用<a href="https://www.filezilla.cn/">FileZilla</a>传送上去</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801176513.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo wget  https://download.nextcloud.com/server/releases/nextcloud-16.0.3.zip</span><br><span class="line">#下载，并且很可能龟速</span><br><span class="line"></span><br><span class="line">sudo unzip nextcloud-16.0.3.zip -d /var/www/html/</span><br><span class="line">#解压至服务器文件夹</span><br><span class="line"></span><br><span class="line">cd /var/www/html</span><br><span class="line">sudo chown -R www-data:www-data nextcloud</span><br><span class="line">#所有者改为www-data，这样nextcloud就不会报权限的问题了</span><br><span class="line"></span><br><span class="line">#下面要提供一个用于储存网盘文件的位置，可以自行设置，我提供两种比较顺眼的位置：</span><br><span class="line">①在nextcloud目录里</span><br><span class="line">cd /var/www/html/nextcloud</span><br><span class="line">②在桌面上</span><br><span class="line">cd /home/pi/Desktop</span><br><span class="line"></span><br><span class="line">mkdir data</span><br><span class="line">sudo chown -R www-data:www-data data</span><br></pre></td></tr></table></figure><h2 id="Step4-最后的配置">Step4:最后的配置</h2><p>在浏览器里输入“树莓派的IP\nextcloud”并回车<br>（电脑手机均可）</p><p>然后就进入nextcloud的网页，我们的服务器最终成功运行了</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801197466.png" alt=""></p><p>如果是用SQLite的就直接点安装完成就可以了</p><p>如果用MySQL的还需进行配置：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801214465.png" alt=""></p><p>进行如图的输入，数据库密码自己设的是什么就是什么</p><p>然后转那么几分钟就可以完成了（zerow可能要更久）</p><p>最终，你就可以自由使用这一网盘了！</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801240220.png" alt=""></p><h3 id="191026更新：各种关于安全及设置警告的提醒">191026更新：各种关于安全及设置警告的提醒</h3><p><a href="https://www.orgleaf.com/1233.html">内存缓存未配置</a></p><p><a href="https://www.cnblogs.com/h5av/p/10687751.html">通过不被信任的域名访问</a></p><p><a href="https://www.orgleaf.com/3409.html">删除文件时错误</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-396314.html">PHP内存低于512M</a></p><pre><code>然后就OK了。。。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『树莓派』WiFi信号中继</title>
      <link href="/2019/07/06/shu-mei-pai-wifi-xin-hao-zhong-ji/"/>
      <url>/2019/07/06/shu-mei-pai-wifi-xin-hao-zhong-ji/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="首先要先感谢树莓派实验室创客群-G的大佬：【管理员】辣鸡管理">首先要先感谢树莓派实验室创客群-G的大佬：【管理员】辣鸡管理</h3><p>话说我家的WiFi信号有些差劲，就想用树莓派中继一下，弄了一晚上之后成功，特此记录。</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801415045.jpg" alt=""></p><h2 id="我的配置：">我的配置：</h2><ol><li><a href="https://item.taobao.com/item.htm?spm=a230r.1.14.171.5d443e96TAhsHn&amp;id=42379193345&amp;ns=1&amp;abbucket=13#detail">树莓派3A+</a>一块</li><li><a href="https://item.jd.com/1034878.html#crumb-wrap">USB无线网卡</a>一个（建议选择大功率的，我做出来网速就很慢）</li></ol><p>树莓派其实可以用其他版本，zerow的话就需要<a href="https://item.jd.com/1742802.html#crumb-wrap">MicroUSB转USB的线</a></p><p>之所以要用USB网卡是因为中继需要两张无线网卡：一张连接网络，一张开AP。</p><p>如果你想用网线开热点的话，就不要理这个，把下面的“连接到网络的网卡”改成eth0即可</p><p>请事先调试好你的树莓派确保能正常上网和连接，如有异议请点击<a href="http://shumeipai.nxez.com/hot-explorer#beginner">这里</a>入门</p><h2 id="好的我们开始！-2">好的我们开始！</h2><h2 id="Step1：插上USB网卡">Step1：插上USB网卡</h2><p>插上后要检查一下有没有被识别，一般都能够别识别的<br>键入命令以查看网络情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>之后应该有两张无线网卡：wlan0和wlan1，如图：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801434413.png" alt=""></p><p>如果没有找到两张网卡，就是没有被识别，可以自行百度树莓派识别USB网卡</p><h2 id="Step2：安装create-ap">Step2：安装create_ap</h2><p>create_ap是GitHub上一个开源项目，专门用于开热点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#把这个项目Git下来并安装</span><br><span class="line">sudo git clone https://github.com/oblique/create_ap</span><br><span class="line">cd create_ap</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">#安装依赖的库</span><br><span class="line">sudo apt-get install util-linux procps hostapd iproute2 iw haveged dnsmasq</span><br></pre></td></tr></table></figure><p>这个东西的语法自己用-h去问，大概是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo create_ap 要使用的无线网卡 连接到网络的网卡 热点名 密码</span><br><span class="line">#或者这样，其中-n是无互联网连接的开关</span><br><span class="line">sudo create_ap -n 要使用的无线网卡 热点名 密码</span><br><span class="line">#其实密码都可以省略，表示没有密码</span><br></pre></td></tr></table></figure><p>完成了之后继续</p><h2 id="Step3：切断和重连">Step3：切断和重连</h2><p>因为两张无线网卡都连接到了WiFi（或者说是都在使用中），所以create_ap调用时就会报错，所以我们要先切断一张网卡的连接（这里我弄了有3、4个小时才搞清楚）<br>首先,你的那张USB网卡可能没有开AP的功能，而树莓派的板载网卡是有的，所以辨别要切断哪一个网卡的连接<br>用命令尝试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo create_ap wlan0 wlan1</span><br><span class="line">#用wlan0作AP源</span><br><span class="line">sudo create_ap wlan1 wlan0</span><br><span class="line">#用wlan1作AP源</span><br></pre></td></tr></table></figure><p>其中有一个会报如下错误（除非你两张都支持）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Your adapter does not support AP (master) mode</span><br><span class="line">#你的网卡没有AP功能</span><br></pre></td></tr></table></figure><p>那么，就可以知道哪一张是能开AP的了，下面用wpa切断这张网卡的WiFi连接（要用于开AP，必须空闲状态），此时要先记住另一个网卡的ip，如果你是用无线网络连接的话，可能就被一同切断，这时就要通过另一网卡连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wpa_cli -i wlan0 disable_network 0</span><br><span class="line">#注意你的是wlan0还是wlan1</span><br></pre></td></tr></table></figure><p>再ifconfig一下，你会发现有一张网卡没有ip地址，此时它被闲置了：</p><p><img src="https://pic-go-img.oss-cn-hangzhou.aliyuncs.com/1636801468004.png" alt=""></p><p>OK,此时再用create_ap创建AP（注意你选择的网卡）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo create_ap wlan0 wlan1 你的WiFi名 你的WiFi密码</span><br></pre></td></tr></table></figure><p>如果无误一般不会报错，但我在用2019年树莓派新版系统<a href="http://shumeipai.nxez.com/2019/06/26/buster-the-new-version-of-raspbian.html">Raspbian Buster</a>时会报错（弄了我2个小时，不知道这个bug现在修复了没有）。<br>此时，另一种方法可以避免这个bug（如果你已经报错，先重启）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#直接键入</span><br><span class="line">sudo create_ap wlan0 wlan1</span><br></pre></td></tr></table></figure><p>之后它会提示你输入SSID（网络名）和密码而并不会报错，真是巧妙</p><p>好了，万事大吉了</p><p>当然还有一个画龙点睛之笔</p><h2 id="画龙点睛：开机自启">画龙点睛：开机自启</h2><p>关于开机自启，有<a href="https://www.jianshu.com/p/86adb6d5347b">很多方法</a>，但我偏爱下面的这一个</p><p>先写一个开WiFi的脚本，再添加到rc.local里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#创建脚本：</span><br><span class="line">cd ~</span><br><span class="line">nano auto_ap.sh</span><br><span class="line"></span><br><span class="line">#随后在文件里输入:</span><br><span class="line">#!/bin/sh</span><br><span class="line">sleep 10s </span><br><span class="line">#这里延迟10s是因为rc.local比网卡启动早，要等网卡启动了之后才能进行下面的工作</span><br><span class="line">wpa_cli -i wlan0 disable_network 0</span><br><span class="line">sudo create_ap wlan0 wlan1 网络名 密码 &amp;</span><br><span class="line"></span><br><span class="line">#那个&amp;是后台的意思，这意味着你可以在这里添加一些其他代码，例如定时关机等等</span><br></pre></td></tr></table></figure><p>Ctrl+X，然后按Y确认保存</p><p>之后加权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 auto_ap.sh</span><br></pre></td></tr></table></figure><p>再打开rc.local文件，并加入代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#打开rc.local</span><br><span class="line">sudo nano /etc/rc.local</span><br><span class="line"></span><br><span class="line">#在exit 0上面加入</span><br><span class="line">su pi -c &quot;exec /home/pi/auto_ap.sh&quot;</span><br></pre></td></tr></table></figure><p>sudo reboot</p><p>Okay</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』 P1403 【[AHOI2005]约数研究】</title>
      <link href="/2019/05/30/ti-jie-p1403-ahoi2005yue-shu-yan-jiu/"/>
      <url>/2019/05/30/ti-jie-p1403-ahoi2005yue-shu-yan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="某有银用DP吗？？？">某有银用DP吗？？？</h1><h3 id="其实这道题用来学习DP（动态规划）也挺好的">其实这道题用来学习DP（动态规划）也挺好的</h3><p>先创个数组a[i]用于存储每个数的约数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>];</span><br></pre></td></tr></table></figure><p>再将i从1枚举到n</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br></pre></td></tr></table></figure><p>而且，可以从i的枚举i的倍数，且i绝对为i的倍数的约数<br>So。。。可设个变量j获得i的j倍</p><p>而且向前填数组的时候要注意i*j&lt;=n即可</p><p>最后，1也算约数，所以a[i]++;</p><p>代码奉上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>],n,sum;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(j*i&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">a[j*i]++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">a[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)sum+=a[i];</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』 P1087 【FBI树】</title>
      <link href="/2019/05/26/ti-jie-p1087-fbi-shu/"/>
      <url>/2019/05/26/ti-jie-p1087-fbi-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="不用那么麻烦">不用那么麻烦</h1><h2 id="做个函数判断类型，再按照“左右根-的顺序分解即可">做个函数判断类型，再按照“左右根&quot;的顺序分解即可</h2><p>直接上代码吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string tree;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">get_kind</span><span class="params">(string x)</span><span class="comment">//获得FBI类型 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>)!=x.npos&amp;&amp;x.<span class="built_in">find</span>(<span class="string">&#x27;1&#x27;</span>)!=x.npos)<span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span>; <span class="comment">//find判断是不包含子串要用!=x.npos的形式（ x.npos即为没有找到） </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x.<span class="built_in">find</span>(<span class="string">&#x27;0&#x27;</span>)!=x.npos)<span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">def</span><span class="params">(string tree)</span><span class="comment">//“左右根”分解 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree.<span class="built_in">length</span>()==<span class="number">1</span>)&#123;cout&lt;&lt;<span class="built_in">get_kind</span>(tree);<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="built_in">def</span>(tree.<span class="built_in">substr</span>(<span class="number">0</span>,tree.<span class="built_in">length</span>()/<span class="number">2</span>));<span class="comment">//左 </span></span><br><span class="line"><span class="built_in">def</span>(tree.<span class="built_in">substr</span>(tree.<span class="built_in">length</span>()/<span class="number">2</span>));<span class="comment">//右 </span></span><br><span class="line">cout&lt;&lt;<span class="built_in">get_kind</span>(tree);<span class="comment">//根 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;tree;</span><br><span class="line"><span class="built_in">def</span>(tree);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』 P1781 【宇宙总统】</title>
      <link href="/2019/04/11/ti-jie-p1781-yu-zhou-zong-tong/"/>
      <url>/2019/04/11/ti-jie-p1781-yu-zhou-zong-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="标准答案（用sort-string）">标准答案（用sort+string）</h1><p>先看长度，再用string的比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">president</span></span><br><span class="line">&#123;</span><br><span class="line">string price;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">&#125;a[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(president x,president y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i].price;</span><br><span class="line">a[i].n=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);</span><br><span class="line">cout&lt;&lt;a[<span class="number">1</span>].n&lt;&lt;endl&lt;&lt;a[<span class="number">1</span>].price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(president x,president y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.price.<span class="built_in">length</span>()!=y.price.<span class="built_in">length</span>())</span><br><span class="line"><span class="keyword">return</span> x.price.<span class="built_in">length</span>()&gt;y.price.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> x.price&gt;y.price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>『题解』 P1579 【哥德巴赫猜想（升级版）】</title>
      <link href="/2018/11/09/ti-jie-p1579-ge-de-ba-he-cai-xiang-sheng-ji-ban/"/>
      <url>/2018/11/09/ti-jie-p1579-ge-de-ba-he-cai-xiang-sheng-ji-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="好吧。。。感觉挺容易">好吧。。。感觉挺容易</h1><p>关于质数的判断，我用了一种很高端的方法，没有见过的可以看一下<br>其他没有什么好说的。。。直接上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">zhi</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">2</span>;a&lt;=n;a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">zhi</span>(a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> b=<span class="number">2</span>;b&lt;=n;b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">zhi</span>(b))</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c=n-a-b;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">zhi</span>(c))</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;c;</span><br><span class="line"><span class="keyword">goto</span> end;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">end:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">zhi</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">2</span>|n==<span class="number">3</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">6</span>!=<span class="number">1</span>&amp;&amp;n%<span class="number">6</span>!=<span class="number">5</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">5</span>;i&lt;=tmp;i+=<span class="number">6</span>)</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>||n%(i+<span class="number">2</span>)==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 算法竞赛 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
